{
  "index.html": {
    "href": "index.html",
    "title": "CWLDotNet | Documentation",
    "keywords": "CWLDotNet This project contains .Net objects and utilities auto-generated by https://github.com/common-workflow-language/schema_salad for parsing documents corresponding to the https://w3id.org/cwl/cwl schema Usage Loading Documents // Specify the CWL file to load Uri fileUri = new Uri(Path.GetFullPath(\"my-cwl-document.cwl\")); // Read the file contents string fileContent = System.IO.File.ReadAllText(fileUri.AbsolutePath); // Parse the CWL document var doc = CWLDotNet.RootLoader.LoadDocument(fileContent, fileUri.AbsoluteUri); // Work with the document doc.Switch( CommandLineTool => Console.WriteLine(\"The loaded document is a CommandLineTool\"), ExpressionTool => Console.WriteLine(\"The loaded document is a ExpressionTool\"), Workflow => Console.WriteLine(\"The loaded document is a Workflow\"), Operation => Console.WriteLine(\"The loaded document is an Operation\"), ListOf => Console.WriteLine(\"This is a list of one of: CommandLineTool | ExpressionTool | Workflow | Operation\") ); Creating, editing and serializing documents using System.Text.Json; using CWLDotNet; // Create a CommandLineTool with empty inputs and outputs CommandLineTool mytool = new CommandLineTool(new(),new()); // Set the base command mytool.baseCommand = \"echo\"; // Create an input parameter with a default value CommandInputParameter input1 = new CommandInputParameter(CWLType.INT); input1.default_ = \"Hello World!\"; // Add the input to the tool mytool.inputs.Add(input1); // Serialize the tool string outDoc = JsonSerializer.Serialize(mytool.Save()); Limitations CWLDotNet only supports the CWL v1.2 syntax. Other documents have to be upgraded using the cwl-upgrader Maintainers @ZimmerA"
  },
  "reference/CWLDotNet.Any.html": {
    "href": "reference/CWLDotNet.Any.html",
    "title": "Class Any | Documentation",
    "keywords": "Class Any Inheritance System.Object Any Implements IEnumClass < Any > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class Any : IEnumClass<Any>, IEnumClass Fields ANY Declaration public static readonly Any ANY Field Value Type Description Any Properties Members Declaration public static IList<Any> Members { get; } Property Value Type Description IList < Any > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static Any Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description Any Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.ArraySchema.html": {
    "href": "reference/CWLDotNet.ArraySchema.html",
    "title": "Class ArraySchema | Documentation",
    "keywords": "Class ArraySchema Auto-generated class implementation for https://w3id.org/cwl/salad#ArraySchema Inheritance System.Object ArraySchema Implements IArraySchema ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ArraySchema : IArraySchema, ISavable Constructors ArraySchema(OneOf<PrimitiveType, RecordSchema, EnumSchema, ArraySchema, String, List<OneOf<PrimitiveType, RecordSchema, EnumSchema, ArraySchema, String>>>, enum_d062602be0b4b8fd33e69e29a841317b6ab665bc, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public ArraySchema(OneOf<PrimitiveType, RecordSchema, EnumSchema, ArraySchema, string, List<OneOf<PrimitiveType, RecordSchema, EnumSchema, ArraySchema, string>>> items, enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < PrimitiveType , RecordSchema , EnumSchema , ArraySchema , System.String , List < OneOf.OneOf < PrimitiveType , RecordSchema , EnumSchema , ArraySchema , System.String >>> items enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties items Defines the type of the array elements. Declaration public OneOf<PrimitiveType, RecordSchema, EnumSchema, ArraySchema, string, List<OneOf<PrimitiveType, RecordSchema, EnumSchema, ArraySchema, string>>> items { get; set; } Property Value Type Description OneOf.OneOf < PrimitiveType , RecordSchema , EnumSchema , ArraySchema , System.String , List < OneOf.OneOf < PrimitiveType , RecordSchema , EnumSchema , ArraySchema , System.String >>> type Must be array Declaration public enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type { get; set; } Property Value Type Description enum_d062602be0b4b8fd33e69e29a841317b6ab665bc Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IArraySchema ISavable"
  },
  "reference/CWLDotNet.CommandInputArraySchema.html": {
    "href": "reference/CWLDotNet.CommandInputArraySchema.html",
    "title": "Class CommandInputArraySchema | Documentation",
    "keywords": "Class CommandInputArraySchema Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputArraySchema Inheritance System.Object CommandInputArraySchema Implements ICommandInputArraySchema IInputArraySchema IArraySchema IInputSchema IIOSchema ILabeled IDocumented ICommandInputSchema ICommandLineBindable ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandInputArraySchema : ICommandInputArraySchema, IInputArraySchema, IArraySchema, IInputSchema, IIOSchema, ILabeled, IDocumented, ICommandInputSchema, ICommandLineBindable, ISavable Constructors CommandInputArraySchema(OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, String, List<OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, String>>>, enum_d062602be0b4b8fd33e69e29a841317b6ab665bc, OneOf<None, String>, OneOf<None, String>, OneOf<None, String, List<String>>, OneOf<None, CommandLineBinding>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandInputArraySchema(OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, string, List<OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, string>>> items, enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type, OneOf<None, string> name = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, CommandLineBinding> inputBinding = default(OneOf<None, CommandLineBinding>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema , System.String , List < OneOf.OneOf < CWLType , CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema , System.String >>> items enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type OneOf.OneOf < OneOf.Types.None , System.String > name OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , CommandLineBinding > inputBinding LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> inputBinding Describes how to turn this object into command line arguments. Declaration public OneOf<None, CommandLineBinding> inputBinding { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , CommandLineBinding > items Defines the type of the array elements. Declaration public OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, string, List<OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, string>>> items { get; set; } Property Value Type Description OneOf.OneOf < CWLType , CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema , System.String , List < OneOf.OneOf < CWLType , CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema , System.String >>> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The identifier for this type Declaration public OneOf<None, string> name { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > type Must be array Declaration public enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type { get; set; } Property Value Type Description enum_d062602be0b4b8fd33e69e29a841317b6ab665bc Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandInputArraySchema IInputArraySchema IArraySchema IInputSchema IIOSchema ILabeled IDocumented ICommandInputSchema ICommandLineBindable ISavable"
  },
  "reference/CWLDotNet.CommandInputEnumSchema.html": {
    "href": "reference/CWLDotNet.CommandInputEnumSchema.html",
    "title": "Class CommandInputEnumSchema | Documentation",
    "keywords": "Class CommandInputEnumSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputEnumSchema Inheritance System.Object CommandInputEnumSchema Implements ICommandInputEnumSchema IInputEnumSchema IEnumSchema IInputSchema IIOSchema ILabeled IDocumented ICommandInputSchema ICommandLineBindable ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandInputEnumSchema : ICommandInputEnumSchema, IInputEnumSchema, IEnumSchema, IInputSchema, IIOSchema, ILabeled, IDocumented, ICommandInputSchema, ICommandLineBindable, ISavable Constructors CommandInputEnumSchema(List<String>, enum_d961d79c225752b9fadb617367615ab176b47d77, OneOf<None, String>, OneOf<None, String>, OneOf<None, String, List<String>>, OneOf<None, CommandLineBinding>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandInputEnumSchema(List<string> symbols, enum_d961d79c225752b9fadb617367615ab176b47d77 type, OneOf<None, string> name = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, CommandLineBinding> inputBinding = default(OneOf<None, CommandLineBinding>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < System.String > symbols enum_d961d79c225752b9fadb617367615ab176b47d77 type OneOf.OneOf < OneOf.Types.None , System.String > name OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , CommandLineBinding > inputBinding LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> inputBinding Describes how to turn this object into command line arguments. Declaration public OneOf<None, CommandLineBinding> inputBinding { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , CommandLineBinding > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The identifier for this type Declaration public OneOf<None, string> name { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > symbols Defines the set of valid symbols. Declaration public List<string> symbols { get; set; } Property Value Type Description List < System.String > type Must be enum Declaration public enum_d961d79c225752b9fadb617367615ab176b47d77 type { get; set; } Property Value Type Description enum_d961d79c225752b9fadb617367615ab176b47d77 Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandInputEnumSchema IInputEnumSchema IEnumSchema IInputSchema IIOSchema ILabeled IDocumented ICommandInputSchema ICommandLineBindable ISavable"
  },
  "reference/CWLDotNet.CommandInputParameter.html": {
    "href": "reference/CWLDotNet.CommandInputParameter.html",
    "title": "Class CommandInputParameter | Documentation",
    "keywords": "Class CommandInputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputParameter An input parameter for a CommandLineTool. Inheritance System.Object CommandInputParameter Implements ICommandInputParameter IInputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IInputFormat ILoadContents ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandInputParameter : ICommandInputParameter, IInputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IInputFormat, ILoadContents, ISavable Constructors CommandInputParameter(OneOf<CWLType, stdin, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, String, List<OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, String>>>, OneOf<None, String>, OneOf<None, String>, OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>, OneOf<None, Boolean>, OneOf<None, String, List<String>>, OneOf<None, String, List<String>>, OneOf<None, Boolean>, OneOf<None, LoadListingEnum>, OneOf<None, Object>, OneOf<None, CommandLineBinding>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandInputParameter(OneOf<CWLType, stdin, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, string, List<OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, string>>> type, OneOf<None, string> id = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles = default(OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>), OneOf<None, bool> streamable = default(OneOf<None, bool>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, string, List<string>> format = default(OneOf<None, string, List<string>>), OneOf<None, bool> loadContents = default(OneOf<None, bool>), OneOf<None, LoadListingEnum> loadListing = default(OneOf<None, LoadListingEnum>), OneOf<None, object> default_ = default(OneOf<None, object>), OneOf<None, CommandLineBinding> inputBinding = default(OneOf<None, CommandLineBinding>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , stdin , CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema , System.String , List < OneOf.OneOf < CWLType , CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema , System.String >>> type OneOf.OneOf < OneOf.Types.None , System.String > id OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> secondaryFiles OneOf.OneOf < OneOf.Types.None , System.Boolean > streamable OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format OneOf.OneOf < OneOf.Types.None , System.Boolean > loadContents OneOf.OneOf < OneOf.Types.None , LoadListingEnum > loadListing OneOf.OneOf < OneOf.Types.None , System.Object > default_ OneOf.OneOf < OneOf.Types.None , CommandLineBinding > inputBinding LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties default_ The default value to use for this parameter if the parameter is missing from the input object, or if the value of the parameter in the input object is null . Default values are applied before evaluating expressions (e.g. dependent valueFrom fields). Declaration public OneOf<None, object> default_ { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Object > doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format Only valid when type: File or is an array of items: File . This must be one or more IRIs of concept nodes that represents file formats which are allowed as input to this parameter, preferrably defined within an ontology. If no ontology is available, file formats may be tested by exact match. Declaration public OneOf<None, string, List<string>> format { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > inputBinding Describes how to turns the input parameters of a process into command line arguments. Declaration public OneOf<None, CommandLineBinding> inputBinding { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , CommandLineBinding > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > loadContents Only valid when type: File or is an array of items: File . If true, the file (or each file in the array) must be a UTF-8 text file 64 KiB or smaller, and the implementation must read the entire contents of the file (or file array) and place it in the contents field of the File object for use by expressions. If the size of the file is greater than 64 KiB, the implementation must raise a fatal error. Declaration public OneOf<None, bool> loadContents { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > loadListing Only valid when type: Directory or is an array of items: Directory . Specify the desired behavior for loading the listing field of a Directory object for use by expressions. The order of precedence for loadListing is: loadListing on an individual parameter Inherited from LoadListingRequirement By default: no_listing Declaration public OneOf<None, LoadListingEnum> loadListing { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , LoadListingEnum > secondaryFiles Only valid when type: File or is an array of items: File . Provides a pattern or expression specifying files or directories that should be included alongside the primary file. Secondary files may be required or optional. When not explicitly specified, secondary files specified for inputs are required and outputs are optional. An implementation must include matching Files and Directories in the secondaryFiles property of the primary file. These Files and Directories must be transferred and staged alongside the primary file. An implementation may fail workflow execution if a required secondary file does not exist. If the value is an expression, the value of self in the expression must be the primary input or output File object to which this binding applies. The basename , nameroot and nameext fields must be present in self . For CommandLineTool outputs the path field must also be present. The expression must return a filename string relative to the path to the primary File, a File or Directory object with either path or location and basename fields set, or an array consisting of strings or File or Directory objects. It is legal to reference an unchanged File or Directory object taken from input as a secondaryFile. The expression may return \"null\" in which case there is no secondaryFile from that expression. To work on non-filename-preserving storage systems, portable tool descriptions should avoid constructing new values from location , but should construct relative references using basename or nameroot instead. If a value in secondaryFiles is a string that is not an expression, it specifies that the following pattern should be applied to the path of the primary file to yield a filename relative to the primary File: If string ends with ? character, remove the last ? and mark the resulting secondary file as optional. If string begins with one or more caret ^ characters, for each caret, remove the last file extension from the path (the last period . and all following characters). If there are no file extensions, the path is unchanged. Append the remainder of the string to the end of the file path. Declaration public OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> streamable Only valid when type: File or is an array of items: File . A value of true indicates that the file is read or written sequentially without seeking. An implementation may use this flag to indicate whether it is valid to stream file contents using a named pipe. Default: false . Declaration public OneOf<None, bool> streamable { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > type Specify valid types of data that may be assigned to this parameter. Declaration public OneOf<CWLType, stdin, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, string, List<OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, string>>> type { get; set; } Property Value Type Description OneOf.OneOf < CWLType , stdin , CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema , System.String , List < OneOf.OneOf < CWLType , CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema , System.String >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandInputParameter IInputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IInputFormat ILoadContents ISavable"
  },
  "reference/CWLDotNet.CommandInputRecordField.html": {
    "href": "reference/CWLDotNet.CommandInputRecordField.html",
    "title": "Class CommandInputRecordField | Documentation",
    "keywords": "Class CommandInputRecordField Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputRecordField Inheritance System.Object CommandInputRecordField Implements ICommandInputRecordField IInputRecordField IRecordField IDocumented IFieldBase ILabeled IInputFormat ILoadContents ICommandLineBindable ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandInputRecordField : ICommandInputRecordField, IInputRecordField, IRecordField, IDocumented, IFieldBase, ILabeled, IInputFormat, ILoadContents, ICommandLineBindable, ISavable Constructors CommandInputRecordField(OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, String, List<OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, String>>>, String, OneOf<None, String, List<String>>, OneOf<None, String>, OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>, OneOf<None, Boolean>, OneOf<None, String, List<String>>, OneOf<None, Boolean>, OneOf<None, LoadListingEnum>, OneOf<None, CommandLineBinding>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandInputRecordField(OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, string, List<OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, string>>> type, string name = null, OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles = default(OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>), OneOf<None, bool> streamable = default(OneOf<None, bool>), OneOf<None, string, List<string>> format = default(OneOf<None, string, List<string>>), OneOf<None, bool> loadContents = default(OneOf<None, bool>), OneOf<None, LoadListingEnum> loadListing = default(OneOf<None, LoadListingEnum>), OneOf<None, CommandLineBinding> inputBinding = default(OneOf<None, CommandLineBinding>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema , System.String , List < OneOf.OneOf < CWLType , CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema , System.String >>> type System.String name OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> secondaryFiles OneOf.OneOf < OneOf.Types.None , System.Boolean > streamable OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format OneOf.OneOf < OneOf.Types.None , System.Boolean > loadContents OneOf.OneOf < OneOf.Types.None , LoadListingEnum > loadListing OneOf.OneOf < OneOf.Types.None , CommandLineBinding > inputBinding LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format Only valid when type: File or is an array of items: File . This must be one or more IRIs of concept nodes that represents file formats which are allowed as input to this parameter, preferrably defined within an ontology. If no ontology is available, file formats may be tested by exact match. Declaration public OneOf<None, string, List<string>> format { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> inputBinding Describes how to turn this object into command line arguments. Declaration public OneOf<None, CommandLineBinding> inputBinding { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , CommandLineBinding > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > loadContents Only valid when type: File or is an array of items: File . If true, the file (or each file in the array) must be a UTF-8 text file 64 KiB or smaller, and the implementation must read the entire contents of the file (or file array) and place it in the contents field of the File object for use by expressions. If the size of the file is greater than 64 KiB, the implementation must raise a fatal error. Declaration public OneOf<None, bool> loadContents { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > loadListing Only valid when type: Directory or is an array of items: Directory . Specify the desired behavior for loading the listing field of a Directory object for use by expressions. The order of precedence for loadListing is: loadListing on an individual parameter Inherited from LoadListingRequirement By default: no_listing Declaration public OneOf<None, LoadListingEnum> loadListing { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , LoadListingEnum > name The name of the field Declaration public string name { get; set; } Property Value Type Description System.String secondaryFiles Only valid when type: File or is an array of items: File . Provides a pattern or expression specifying files or directories that should be included alongside the primary file. Secondary files may be required or optional. When not explicitly specified, secondary files specified for inputs are required and outputs are optional. An implementation must include matching Files and Directories in the secondaryFiles property of the primary file. These Files and Directories must be transferred and staged alongside the primary file. An implementation may fail workflow execution if a required secondary file does not exist. If the value is an expression, the value of self in the expression must be the primary input or output File object to which this binding applies. The basename , nameroot and nameext fields must be present in self . For CommandLineTool outputs the path field must also be present. The expression must return a filename string relative to the path to the primary File, a File or Directory object with either path or location and basename fields set, or an array consisting of strings or File or Directory objects. It is legal to reference an unchanged File or Directory object taken from input as a secondaryFile. The expression may return \"null\" in which case there is no secondaryFile from that expression. To work on non-filename-preserving storage systems, portable tool descriptions should avoid constructing new values from location , but should construct relative references using basename or nameroot instead. If a value in secondaryFiles is a string that is not an expression, it specifies that the following pattern should be applied to the path of the primary file to yield a filename relative to the primary File: If string ends with ? character, remove the last ? and mark the resulting secondary file as optional. If string begins with one or more caret ^ characters, for each caret, remove the last file extension from the path (the last period . and all following characters). If there are no file extensions, the path is unchanged. Append the remainder of the string to the end of the file path. Declaration public OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> streamable Only valid when type: File or is an array of items: File . A value of true indicates that the file is read or written sequentially without seeking. An implementation may use this flag to indicate whether it is valid to stream file contents using a named pipe. Default: false . Declaration public OneOf<None, bool> streamable { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > type The field type Declaration public OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, string, List<OneOf<CWLType, CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema, string>>> type { get; set; } Property Value Type Description OneOf.OneOf < CWLType , CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema , System.String , List < OneOf.OneOf < CWLType , CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema , System.String >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandInputRecordField IInputRecordField IRecordField IDocumented IFieldBase ILabeled IInputFormat ILoadContents ICommandLineBindable ISavable"
  },
  "reference/CWLDotNet.CommandInputRecordSchema.html": {
    "href": "reference/CWLDotNet.CommandInputRecordSchema.html",
    "title": "Class CommandInputRecordSchema | Documentation",
    "keywords": "Class CommandInputRecordSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputRecordSchema Inheritance System.Object CommandInputRecordSchema Implements ICommandInputRecordSchema IInputRecordSchema IRecordSchema IInputSchema IIOSchema ILabeled IDocumented ICommandInputSchema ICommandLineBindable ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandInputRecordSchema : ICommandInputRecordSchema, IInputRecordSchema, IRecordSchema, IInputSchema, IIOSchema, ILabeled, IDocumented, ICommandInputSchema, ICommandLineBindable, ISavable Constructors CommandInputRecordSchema(enum_d9cba076fca539106791a4f46d198c7fcfbdb779, OneOf<None, String>, OneOf<None, List<CommandInputRecordField>>, OneOf<None, String>, OneOf<None, String, List<String>>, OneOf<None, CommandLineBinding>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandInputRecordSchema(enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type, OneOf<None, string> name = default(OneOf<None, string>), OneOf<None, List<CommandInputRecordField>> fields = default(OneOf<None, List<CommandInputRecordField>>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, CommandLineBinding> inputBinding = default(OneOf<None, CommandLineBinding>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type OneOf.OneOf < OneOf.Types.None , System.String > name OneOf.OneOf < OneOf.Types.None , List < CommandInputRecordField >> fields OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , CommandLineBinding > inputBinding LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> fields Defines the fields of the record. Declaration public OneOf<None, List<CommandInputRecordField>> fields { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < CommandInputRecordField >> inputBinding Describes how to turn this object into command line arguments. Declaration public OneOf<None, CommandLineBinding> inputBinding { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , CommandLineBinding > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The identifier for this type Declaration public OneOf<None, string> name { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > type Must be record Declaration public enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type { get; set; } Property Value Type Description enum_d9cba076fca539106791a4f46d198c7fcfbdb779 Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandInputRecordSchema IInputRecordSchema IRecordSchema IInputSchema IIOSchema ILabeled IDocumented ICommandInputSchema ICommandLineBindable ISavable"
  },
  "reference/CWLDotNet.CommandLineBindable.html": {
    "href": "reference/CWLDotNet.CommandLineBindable.html",
    "title": "Class CommandLineBindable | Documentation",
    "keywords": "Class CommandLineBindable Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandLineBindable Inheritance System.Object CommandLineBindable Implements ICommandLineBindable ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandLineBindable : ICommandLineBindable, ISavable Constructors CommandLineBindable(OneOf<None, CommandLineBinding>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandLineBindable(OneOf<None, CommandLineBinding> inputBinding = default(OneOf<None, CommandLineBinding>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < OneOf.Types.None , CommandLineBinding > inputBinding LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties inputBinding Describes how to turn this object into command line arguments. Declaration public OneOf<None, CommandLineBinding> inputBinding { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , CommandLineBinding > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandLineBindable ISavable"
  },
  "reference/CWLDotNet.CommandLineBinding.html": {
    "href": "reference/CWLDotNet.CommandLineBinding.html",
    "title": "Class CommandLineBinding | Documentation",
    "keywords": "Class CommandLineBinding Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandLineBinding When listed under inputBinding in the input schema, the term \"value\" refers to the the corresponding value in the input object. For binding objects listed in CommandLineTool.arguments , the term \"value\" refers to the effective value after evaluating valueFrom . The binding behavior when building the command line depends on the data type of the value. If there is a mismatch between the type described by the input schema and the effective value, such as resulting from an expression evaluation, an implementation must use the data type of the effective value. string : Add prefix and the string to the command line. number : Add prefix and decimal representation to command line. boolean : If true, add prefix to the command line. If false, add nothing. File : Add prefix and the value of File.path to the command line. Directory : Add prefix and the value of Directory.path to the command line. array : If itemSeparator is specified, add prefix and the join the array into a single string with itemSeparator separating the items. Otherwise first add prefix , then recursively process individual elements. If the array is empty, it does not add anything to command line. object : Add prefix only, and recursively add object fields for which inputBinding is specified. null : Add nothing. Inheritance System.Object CommandLineBinding Implements ICommandLineBinding IInputBinding ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandLineBinding : ICommandLineBinding, IInputBinding, ISavable Constructors CommandLineBinding(OneOf<None, Boolean>, OneOf<None, Int32, String>, OneOf<None, String>, OneOf<None, Boolean>, OneOf<None, String>, OneOf<None, String>, OneOf<None, Boolean>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandLineBinding(OneOf<None, bool> loadContents = default(OneOf<None, bool>), OneOf<None, int, string> position = default(OneOf<None, int, string>), OneOf<None, string> prefix = default(OneOf<None, string>), OneOf<None, bool> separate = default(OneOf<None, bool>), OneOf<None, string> itemSeparator = default(OneOf<None, string>), OneOf<None, string> valueFrom = default(OneOf<None, string>), OneOf<None, bool> shellQuote = default(OneOf<None, bool>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < OneOf.Types.None , System.Boolean > loadContents OneOf.OneOf < OneOf.Types.None , System.Int32 , System.String > position OneOf.OneOf < OneOf.Types.None , System.String > prefix OneOf.OneOf < OneOf.Types.None , System.Boolean > separate OneOf.OneOf < OneOf.Types.None , System.String > itemSeparator OneOf.OneOf < OneOf.Types.None , System.String > valueFrom OneOf.OneOf < OneOf.Types.None , System.Boolean > shellQuote LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties itemSeparator Join the array elements into a single string with the elements separated by by itemSeparator . Declaration public OneOf<None, string> itemSeparator { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > loadContents Use of loadContents in InputBinding is deprecated. Preserved for v1.0 backwards compatibility. Will be removed in CWL v2.0. Use InputParameter.loadContents instead. Declaration public OneOf<None, bool> loadContents { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > position The sorting key. Default position is 0. If a CWL Parameter Reference or CWL Expression is used and if the inputBinding is associated with an input parameter, then the value of self will be the value of the input parameter. Input parameter defaults (as specified by the InputParameter.default field) must be applied before evaluating the expression. Expressions must return a single value of type int or a null. Declaration public OneOf<None, int, string> position { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Int32 , System.String > prefix Command line prefix to add before the value. Declaration public OneOf<None, string> prefix { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > separate If true (default), then the prefix and value must be added as separate command line arguments; if false, prefix and value must be concatenated into a single command line argument. Declaration public OneOf<None, bool> separate { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > shellQuote If ShellCommandRequirement is in the requirements for the current command, this controls whether the value is quoted on the command line (default is true). Use shellQuote: false to inject metacharacters for operations such as pipes. If shellQuote is true or not provided, the implementation must not permit interpretation of any shell metacharacters or directives. Declaration public OneOf<None, bool> shellQuote { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > valueFrom If valueFrom is a constant string value, use this as the value and apply the binding rules above. If valueFrom is an expression, evaluate the expression to yield the actual value to use to build the command line and apply the binding rules above. If the inputBinding is associated with an input parameter, the value of self in the expression will be the value of the input parameter. Input parameter defaults (as specified by the InputParameter.default field) must be applied before evaluating the expression. If the value of the associated input parameter is null , valueFrom is not evaluated and nothing is added to the command line. When a binding is part of the CommandLineTool.arguments field, the valueFrom field is required. Declaration public OneOf<None, string> valueFrom { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandLineBinding IInputBinding ISavable"
  },
  "reference/CWLDotNet.CommandLineTool.html": {
    "href": "reference/CWLDotNet.CommandLineTool.html",
    "title": "Class CommandLineTool | Documentation",
    "keywords": "Class CommandLineTool Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandLineTool This defines the schema of the CWL Command Line Tool Description document. Inheritance System.Object CommandLineTool Implements ICommandLineTool IProcess IIdentified ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandLineTool : ICommandLineTool, IProcess, IIdentified, ILabeled, IDocumented, ISavable Constructors CommandLineTool(List<CommandInputParameter>, List<CommandOutputParameter>, OneOf<None, String>, CommandLineTool_class, OneOf<None, String>, OneOf<None, String, List<String>>, OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>>, OneOf<None, List<Object>>, OneOf<None, CWLVersion>, OneOf<None, List<String>>, OneOf<None, String, List<String>>, OneOf<None, List<OneOf<String, CommandLineBinding>>>, OneOf<None, String>, OneOf<None, String>, OneOf<None, String>, OneOf<None, List<Int32>>, OneOf<None, List<Int32>>, OneOf<None, List<Int32>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandLineTool(List<CommandInputParameter> inputs, List<CommandOutputParameter> outputs, OneOf<None, string> id = default(OneOf<None, string>), CommandLineTool_class class_ = null, OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>> requirements = default(OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>>), OneOf<None, List<object>> hints = default(OneOf<None, List<object>>), OneOf<None, CWLVersion> cwlVersion = default(OneOf<None, CWLVersion>), OneOf<None, List<string>> intent = default(OneOf<None, List<string>>), OneOf<None, string, List<string>> baseCommand = default(OneOf<None, string, List<string>>), OneOf<None, List<OneOf<string, CommandLineBinding>>> arguments_ = default(OneOf<None, List<OneOf<string, CommandLineBinding>>>), OneOf<None, string> stdin = default(OneOf<None, string>), OneOf<None, string> stderr = default(OneOf<None, string>), OneOf<None, string> stdout = default(OneOf<None, string>), OneOf<None, List<int>> successCodes = default(OneOf<None, List<int>>), OneOf<None, List<int>> temporaryFailCodes = default(OneOf<None, List<int>>), OneOf<None, List<int>> permanentFailCodes = default(OneOf<None, List<int>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < CommandInputParameter > inputs List < CommandOutputParameter > outputs OneOf.OneOf < OneOf.Types.None , System.String > id CommandLineTool_class class_ OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < InlineJavascriptRequirement , SchemaDefRequirement , LoadListingRequirement , DockerRequirement , SoftwareRequirement , InitialWorkDirRequirement , EnvVarRequirement , ShellCommandRequirement , ResourceRequirement , WorkReuse , NetworkAccess , InplaceUpdateRequirement , ToolTimeLimit , SubworkflowFeatureRequirement , ScatterFeatureRequirement , MultipleInputFeatureRequirement , StepInputExpressionRequirement >>> requirements OneOf.OneOf < OneOf.Types.None , List < System.Object >> hints OneOf.OneOf < OneOf.Types.None , CWLVersion > cwlVersion OneOf.OneOf < OneOf.Types.None , List < System.String >> intent OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> baseCommand OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < System.String , CommandLineBinding >>> arguments_ OneOf.OneOf < OneOf.Types.None , System.String > stdin OneOf.OneOf < OneOf.Types.None , System.String > stderr OneOf.OneOf < OneOf.Types.None , System.String > stdout OneOf.OneOf < OneOf.Types.None , List < System.Int32 >> successCodes OneOf.OneOf < OneOf.Types.None , List < System.Int32 >> temporaryFailCodes OneOf.OneOf < OneOf.Types.None , List < System.Int32 >> permanentFailCodes LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties arguments_ Command line bindings which are not directly associated with input parameters. If the value is a string, it is used as a string literal argument. If it is an Expression, the result of the evaluation is used as an argument. Declaration public OneOf<None, List<OneOf<string, CommandLineBinding>>> arguments_ { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < System.String , CommandLineBinding >>> baseCommand Specifies the program to execute. If an array, the first element of the array is the command to execute, and subsequent elements are mandatory command line arguments. The elements in baseCommand must appear before any command line bindings from inputBinding or arguments . If baseCommand is not provided or is an empty array, the first element of the command line produced after processing inputBinding or arguments must be used as the program to execute. If the program includes a path separator character it must be an absolute path, otherwise it is an error. If the program does not include a path separator, search the $PATH variable in the runtime environment of the workflow runner find the absolute path of the executable. Declaration public OneOf<None, string, List<string>> baseCommand { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> class_ Declaration public CommandLineTool_class class_ { get; set; } Property Value Type Description CommandLineTool_class cwlVersion CWL document version. Always required at the document root. Not required for a Process embedded inside another Process. Declaration public OneOf<None, CWLVersion> cwlVersion { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , CWLVersion > doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> hints Declares hints applying to either the runtime environment or the workflow engine that may be helpful in executing this process. It is not an error if an implementation cannot satisfy all hints, however the implementation may report a warning. Declaration public OneOf<None, List<object>> hints { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.Object >> id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > inputs Defines the input parameters of the process. The process is ready to run when all required input parameters are associated with concrete values. Input parameters include a schema for each parameter which is used to validate the input object. It may also be used to build a user interface for constructing the input object. When accepting an input object, all input parameters must have a value. If an input parameter is missing from the input object, it must be assigned a value of null (or the value of default for that parameter, if provided) for the purposes of validation and evaluation of expressions. Declaration public List<CommandInputParameter> inputs { get; set; } Property Value Type Description List < CommandInputParameter > intent An identifier for the type of computational operation, of this Process. Especially useful for \"class: Operation\", but can also be used for CommandLineTool, Workflow, or ExpressionTool. If provided, then this must be an IRI of a concept node that represents the type of operation, preferrably defined within an ontology. For example, in the domain of bioinformatics, one can use an IRI from the EDAM Ontology's Operation concept nodes , like Alignment , or Clustering ; or a more specific Operation concept like Split read mapping . Declaration public OneOf<None, List<string>> intent { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.String >> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > outputs Defines the parameters representing the output of the process. May be used to generate and/or validate the output object. Declaration public List<CommandOutputParameter> outputs { get; set; } Property Value Type Description List < CommandOutputParameter > permanentFailCodes Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail. If not specified, all exit codes except 0 are considered permanent failure. Declaration public OneOf<None, List<int>> permanentFailCodes { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.Int32 >> requirements Declares requirements that apply to either the runtime environment or the workflow engine that must be met in order to execute this process. If an implementation cannot satisfy all requirements, or a requirement is listed which is not recognized by the implementation, it is a fatal error and the implementation must not attempt to run the process, unless overridden at user option. Declaration public OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>> requirements { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < InlineJavascriptRequirement , SchemaDefRequirement , LoadListingRequirement , DockerRequirement , SoftwareRequirement , InitialWorkDirRequirement , EnvVarRequirement , ShellCommandRequirement , ResourceRequirement , WorkReuse , NetworkAccess , InplaceUpdateRequirement , ToolTimeLimit , SubworkflowFeatureRequirement , ScatterFeatureRequirement , MultipleInputFeatureRequirement , StepInputExpressionRequirement >>> stderr Capture the command's standard error stream to a file written to the designated output directory. If stderr is a string, it specifies the file name to use. If stderr is an expression, the expression is evaluated and must return a string with the file name to use to capture stderr. If the return value is not a string, or the resulting path contains illegal characters (such as the path separator / ) it is an error. Declaration public OneOf<None, string> stderr { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > stdin A path to a file whose contents must be piped into the command's standard input stream. Declaration public OneOf<None, string> stdin { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > stdout Capture the command's standard output stream to a file written to the designated output directory. If the CommandLineTool contains logically chained commands (e.g. echo a &amp;&amp; echo b ) stdout must include the output of every command. If stdout is a string, it specifies the file name to use. If stdout is an expression, the expression is evaluated and must return a string with the file name to use to capture stdout. If the return value is not a string, or the resulting path contains illegal characters (such as the path separator / ) it is an error. Declaration public OneOf<None, string> stdout { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > successCodes Exit codes that indicate the process completed successfully. If not specified, only exit code 0 is considered success. Declaration public OneOf<None, List<int>> successCodes { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.Int32 >> temporaryFailCodes Exit codes that indicate the process failed due to a possibly temporary condition, where executing the process with the same runtime environment and inputs may produce different results. If not specified, no exit codes are considered temporary failure. Declaration public OneOf<None, List<int>> temporaryFailCodes { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.Int32 >> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandLineTool IProcess IIdentified ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.CommandLineTool_class.html": {
    "href": "reference/CWLDotNet.CommandLineTool_class.html",
    "title": "Class CommandLineTool_class | Documentation",
    "keywords": "Class CommandLineTool_class Inheritance System.Object CommandLineTool_class Implements IEnumClass < CommandLineTool_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandLineTool_class : IEnumClass<CommandLineTool_class>, IEnumClass Fields COMMANDLINETOOL Declaration public static readonly CommandLineTool_class COMMANDLINETOOL Field Value Type Description CommandLineTool_class Properties Members Declaration public static IList<CommandLineTool_class> Members { get; } Property Value Type Description IList < CommandLineTool_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static CommandLineTool_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description CommandLineTool_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.CommandOutputArraySchema.html": {
    "href": "reference/CWLDotNet.CommandOutputArraySchema.html",
    "title": "Class CommandOutputArraySchema | Documentation",
    "keywords": "Class CommandOutputArraySchema Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputArraySchema Inheritance System.Object CommandOutputArraySchema Implements ICommandOutputArraySchema IOutputArraySchema IArraySchema IOutputSchema IIOSchema ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandOutputArraySchema : ICommandOutputArraySchema, IOutputArraySchema, IArraySchema, IOutputSchema, IIOSchema, ILabeled, IDocumented, ISavable Constructors CommandOutputArraySchema(OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, String, List<OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, String>>>, enum_d062602be0b4b8fd33e69e29a841317b6ab665bc, OneOf<None, String>, OneOf<None, String>, OneOf<None, String, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandOutputArraySchema(OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, string, List<OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, string>>> items, enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type, OneOf<None, string> name = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , CommandOutputRecordSchema , CommandOutputEnumSchema , CommandOutputArraySchema , System.String , List < OneOf.OneOf < CWLType , CommandOutputRecordSchema , CommandOutputEnumSchema , CommandOutputArraySchema , System.String >>> items enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type OneOf.OneOf < OneOf.Types.None , System.String > name OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> items Defines the type of the array elements. Declaration public OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, string, List<OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, string>>> items { get; set; } Property Value Type Description OneOf.OneOf < CWLType , CommandOutputRecordSchema , CommandOutputEnumSchema , CommandOutputArraySchema , System.String , List < OneOf.OneOf < CWLType , CommandOutputRecordSchema , CommandOutputEnumSchema , CommandOutputArraySchema , System.String >>> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The identifier for this type Declaration public OneOf<None, string> name { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > type Must be array Declaration public enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type { get; set; } Property Value Type Description enum_d062602be0b4b8fd33e69e29a841317b6ab665bc Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandOutputArraySchema IOutputArraySchema IArraySchema IOutputSchema IIOSchema ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.CommandOutputBinding.html": {
    "href": "reference/CWLDotNet.CommandOutputBinding.html",
    "title": "Class CommandOutputBinding | Documentation",
    "keywords": "Class CommandOutputBinding Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputBinding Describes how to generate an output parameter based on the files produced by a CommandLineTool. The output parameter value is generated by applying these operations in the following order: glob loadContents outputEval secondaryFiles Inheritance System.Object CommandOutputBinding Implements ICommandOutputBinding ILoadContents ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandOutputBinding : ICommandOutputBinding, ILoadContents, ISavable Constructors CommandOutputBinding(OneOf<None, Boolean>, OneOf<None, LoadListingEnum>, OneOf<None, String, List<String>>, OneOf<None, String>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandOutputBinding(OneOf<None, bool> loadContents = default(OneOf<None, bool>), OneOf<None, LoadListingEnum> loadListing = default(OneOf<None, LoadListingEnum>), OneOf<None, string, List<string>> glob = default(OneOf<None, string, List<string>>), OneOf<None, string> outputEval = default(OneOf<None, string>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < OneOf.Types.None , System.Boolean > loadContents OneOf.OneOf < OneOf.Types.None , LoadListingEnum > loadListing OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> glob OneOf.OneOf < OneOf.Types.None , System.String > outputEval LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties glob Find files or directories relative to the output directory, using POSIX glob(3) pathname matching. If an array is provided, find files or directories that match any pattern in the array. If an expression is provided, the expression must return a string or an array of strings, which will then be evaluated as one or more glob patterns. Must only match and return files/directories which actually exist. If the value of glob is a relative path pattern (does not begin with a slash '/') then it is resolved relative to the output directory. If the value of the glob is an absolute path pattern (it does begin with a slash '/') then it must refer to a path within the output directory. It is an error if any glob resolves to a path outside the output directory. Specifically this means globs that resolve to paths outside the output directory are illegal. A glob may match a path within the output directory which is actually a symlink to another file. In this case, the expected behavior is for the resulting File/Directory object to take the basename (and corresponding nameroot and nameext ) of the symlink. The location of the File/Directory is implementation dependent, but logically the File/Directory should have the same content as the symlink target. Platforms may stage output files/directories to cloud storage that lack the concept of a symlink. In this case file content and directories may be duplicated, or (to avoid duplication) the File/Directory location may refer to the symlink target. It is an error if a symlink in the output directory (or any symlink in a chain of links) refers to any file or directory that is not under an input or output directory. Implementations may shut down a container before globbing output, so globs and expressions must not assume access to the container filesystem except for declared input and output. Declaration public OneOf<None, string, List<string>> glob { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> loadContents Only valid when type: File or is an array of items: File . If true, the file (or each file in the array) must be a UTF-8 text file 64 KiB or smaller, and the implementation must read the entire contents of the file (or file array) and place it in the contents field of the File object for use by expressions. If the size of the file is greater than 64 KiB, the implementation must raise a fatal error. Declaration public OneOf<None, bool> loadContents { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > loadListing Only valid when type: Directory or is an array of items: Directory . Specify the desired behavior for loading the listing field of a Directory object for use by expressions. The order of precedence for loadListing is: loadListing on an individual parameter Inherited from LoadListingRequirement By default: no_listing Declaration public OneOf<None, LoadListingEnum> loadListing { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , LoadListingEnum > outputEval Evaluate an expression to generate the output value. If glob was specified, the value of self must be an array containing file objects that were matched. If no files were matched, self must be a zero length array; if a single file was matched, the value of self is an array of a single element. The exit code of the process is available in the expression as runtime.exitCode . Additionally if loadContents is true, the file must be a UTF-8 text file 64 KiB or smaller, and the implementation must read the entire contents of the file (or file array) and place it in the contents field of the File object for use in outputEval . If the size of the file is greater than 64 KiB, the implementation must raise a fatal error. If a tool needs to return a large amount of structured data to the workflow, loading the output object from cwl.output.json bypasses outputEval and is not subject to the 64 KiB loadContents limit. Declaration public OneOf<None, string> outputEval { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandOutputBinding ILoadContents ISavable"
  },
  "reference/CWLDotNet.CommandOutputEnumSchema.html": {
    "href": "reference/CWLDotNet.CommandOutputEnumSchema.html",
    "title": "Class CommandOutputEnumSchema | Documentation",
    "keywords": "Class CommandOutputEnumSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputEnumSchema Inheritance System.Object CommandOutputEnumSchema Implements ICommandOutputEnumSchema IOutputEnumSchema IEnumSchema IOutputSchema IIOSchema ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandOutputEnumSchema : ICommandOutputEnumSchema, IOutputEnumSchema, IEnumSchema, IOutputSchema, IIOSchema, ILabeled, IDocumented, ISavable Constructors CommandOutputEnumSchema(List<String>, enum_d961d79c225752b9fadb617367615ab176b47d77, OneOf<None, String>, OneOf<None, String>, OneOf<None, String, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandOutputEnumSchema(List<string> symbols, enum_d961d79c225752b9fadb617367615ab176b47d77 type, OneOf<None, string> name = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < System.String > symbols enum_d961d79c225752b9fadb617367615ab176b47d77 type OneOf.OneOf < OneOf.Types.None , System.String > name OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The identifier for this type Declaration public OneOf<None, string> name { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > symbols Defines the set of valid symbols. Declaration public List<string> symbols { get; set; } Property Value Type Description List < System.String > type Must be enum Declaration public enum_d961d79c225752b9fadb617367615ab176b47d77 type { get; set; } Property Value Type Description enum_d961d79c225752b9fadb617367615ab176b47d77 Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandOutputEnumSchema IOutputEnumSchema IEnumSchema IOutputSchema IIOSchema ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.CommandOutputParameter.html": {
    "href": "reference/CWLDotNet.CommandOutputParameter.html",
    "title": "Class CommandOutputParameter | Documentation",
    "keywords": "Class CommandOutputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputParameter An output parameter for a CommandLineTool. Inheritance System.Object CommandOutputParameter Implements ICommandOutputParameter IOutputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IOutputFormat ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandOutputParameter : ICommandOutputParameter, IOutputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IOutputFormat, ISavable Constructors CommandOutputParameter(OneOf<CWLType, stdout, stderr, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, String, List<OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, String>>>, OneOf<None, String>, OneOf<None, String>, OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>, OneOf<None, Boolean>, OneOf<None, String, List<String>>, OneOf<None, String>, OneOf<None, CommandOutputBinding>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandOutputParameter(OneOf<CWLType, stdout, stderr, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, string, List<OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, string>>> type, OneOf<None, string> id = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles = default(OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>), OneOf<None, bool> streamable = default(OneOf<None, bool>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, string> format = default(OneOf<None, string>), OneOf<None, CommandOutputBinding> outputBinding = default(OneOf<None, CommandOutputBinding>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , stdout , stderr , CommandOutputRecordSchema , CommandOutputEnumSchema , CommandOutputArraySchema , System.String , List < OneOf.OneOf < CWLType , CommandOutputRecordSchema , CommandOutputEnumSchema , CommandOutputArraySchema , System.String >>> type OneOf.OneOf < OneOf.Types.None , System.String > id OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> secondaryFiles OneOf.OneOf < OneOf.Types.None , System.Boolean > streamable OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , System.String > format OneOf.OneOf < OneOf.Types.None , CommandOutputBinding > outputBinding LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format Only valid when type: File or is an array of items: File . This is the file format that will be assigned to the output File object. Declaration public OneOf<None, string> format { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > outputBinding Describes how to generate this output object based on the files produced by a CommandLineTool Declaration public OneOf<None, CommandOutputBinding> outputBinding { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , CommandOutputBinding > secondaryFiles Only valid when type: File or is an array of items: File . Provides a pattern or expression specifying files or directories that should be included alongside the primary file. Secondary files may be required or optional. When not explicitly specified, secondary files specified for inputs are required and outputs are optional. An implementation must include matching Files and Directories in the secondaryFiles property of the primary file. These Files and Directories must be transferred and staged alongside the primary file. An implementation may fail workflow execution if a required secondary file does not exist. If the value is an expression, the value of self in the expression must be the primary input or output File object to which this binding applies. The basename , nameroot and nameext fields must be present in self . For CommandLineTool outputs the path field must also be present. The expression must return a filename string relative to the path to the primary File, a File or Directory object with either path or location and basename fields set, or an array consisting of strings or File or Directory objects. It is legal to reference an unchanged File or Directory object taken from input as a secondaryFile. The expression may return \"null\" in which case there is no secondaryFile from that expression. To work on non-filename-preserving storage systems, portable tool descriptions should avoid constructing new values from location , but should construct relative references using basename or nameroot instead. If a value in secondaryFiles is a string that is not an expression, it specifies that the following pattern should be applied to the path of the primary file to yield a filename relative to the primary File: If string ends with ? character, remove the last ? and mark the resulting secondary file as optional. If string begins with one or more caret ^ characters, for each caret, remove the last file extension from the path (the last period . and all following characters). If there are no file extensions, the path is unchanged. Append the remainder of the string to the end of the file path. Declaration public OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> streamable Only valid when type: File or is an array of items: File . A value of true indicates that the file is read or written sequentially without seeking. An implementation may use this flag to indicate whether it is valid to stream file contents using a named pipe. Default: false . Declaration public OneOf<None, bool> streamable { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > type Specify valid types of data that may be assigned to this parameter. Declaration public OneOf<CWLType, stdout, stderr, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, string, List<OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, string>>> type { get; set; } Property Value Type Description OneOf.OneOf < CWLType , stdout , stderr , CommandOutputRecordSchema , CommandOutputEnumSchema , CommandOutputArraySchema , System.String , List < OneOf.OneOf < CWLType , CommandOutputRecordSchema , CommandOutputEnumSchema , CommandOutputArraySchema , System.String >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandOutputParameter IOutputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IOutputFormat ISavable"
  },
  "reference/CWLDotNet.CommandOutputRecordField.html": {
    "href": "reference/CWLDotNet.CommandOutputRecordField.html",
    "title": "Class CommandOutputRecordField | Documentation",
    "keywords": "Class CommandOutputRecordField Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputRecordField Inheritance System.Object CommandOutputRecordField Implements ICommandOutputRecordField IOutputRecordField IRecordField IDocumented IFieldBase ILabeled IOutputFormat ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandOutputRecordField : ICommandOutputRecordField, IOutputRecordField, IRecordField, IDocumented, IFieldBase, ILabeled, IOutputFormat, ISavable Constructors CommandOutputRecordField(OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, String, List<OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, String>>>, String, OneOf<None, String, List<String>>, OneOf<None, String>, OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>, OneOf<None, Boolean>, OneOf<None, String>, OneOf<None, CommandOutputBinding>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandOutputRecordField(OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, string, List<OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, string>>> type, string name = null, OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles = default(OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>), OneOf<None, bool> streamable = default(OneOf<None, bool>), OneOf<None, string> format = default(OneOf<None, string>), OneOf<None, CommandOutputBinding> outputBinding = default(OneOf<None, CommandOutputBinding>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , CommandOutputRecordSchema , CommandOutputEnumSchema , CommandOutputArraySchema , System.String , List < OneOf.OneOf < CWLType , CommandOutputRecordSchema , CommandOutputEnumSchema , CommandOutputArraySchema , System.String >>> type System.String name OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> secondaryFiles OneOf.OneOf < OneOf.Types.None , System.Boolean > streamable OneOf.OneOf < OneOf.Types.None , System.String > format OneOf.OneOf < OneOf.Types.None , CommandOutputBinding > outputBinding LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format Only valid when type: File or is an array of items: File . This is the file format that will be assigned to the output File object. Declaration public OneOf<None, string> format { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The name of the field Declaration public string name { get; set; } Property Value Type Description System.String outputBinding Describes how to generate this output object based on the files produced by a CommandLineTool Declaration public OneOf<None, CommandOutputBinding> outputBinding { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , CommandOutputBinding > secondaryFiles Only valid when type: File or is an array of items: File . Provides a pattern or expression specifying files or directories that should be included alongside the primary file. Secondary files may be required or optional. When not explicitly specified, secondary files specified for inputs are required and outputs are optional. An implementation must include matching Files and Directories in the secondaryFiles property of the primary file. These Files and Directories must be transferred and staged alongside the primary file. An implementation may fail workflow execution if a required secondary file does not exist. If the value is an expression, the value of self in the expression must be the primary input or output File object to which this binding applies. The basename , nameroot and nameext fields must be present in self . For CommandLineTool outputs the path field must also be present. The expression must return a filename string relative to the path to the primary File, a File or Directory object with either path or location and basename fields set, or an array consisting of strings or File or Directory objects. It is legal to reference an unchanged File or Directory object taken from input as a secondaryFile. The expression may return \"null\" in which case there is no secondaryFile from that expression. To work on non-filename-preserving storage systems, portable tool descriptions should avoid constructing new values from location , but should construct relative references using basename or nameroot instead. If a value in secondaryFiles is a string that is not an expression, it specifies that the following pattern should be applied to the path of the primary file to yield a filename relative to the primary File: If string ends with ? character, remove the last ? and mark the resulting secondary file as optional. If string begins with one or more caret ^ characters, for each caret, remove the last file extension from the path (the last period . and all following characters). If there are no file extensions, the path is unchanged. Append the remainder of the string to the end of the file path. Declaration public OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> streamable Only valid when type: File or is an array of items: File . A value of true indicates that the file is read or written sequentially without seeking. An implementation may use this flag to indicate whether it is valid to stream file contents using a named pipe. Default: false . Declaration public OneOf<None, bool> streamable { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > type The field type Declaration public OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, string, List<OneOf<CWLType, CommandOutputRecordSchema, CommandOutputEnumSchema, CommandOutputArraySchema, string>>> type { get; set; } Property Value Type Description OneOf.OneOf < CWLType , CommandOutputRecordSchema , CommandOutputEnumSchema , CommandOutputArraySchema , System.String , List < OneOf.OneOf < CWLType , CommandOutputRecordSchema , CommandOutputEnumSchema , CommandOutputArraySchema , System.String >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandOutputRecordField IOutputRecordField IRecordField IDocumented IFieldBase ILabeled IOutputFormat ISavable"
  },
  "reference/CWLDotNet.CommandOutputRecordSchema.html": {
    "href": "reference/CWLDotNet.CommandOutputRecordSchema.html",
    "title": "Class CommandOutputRecordSchema | Documentation",
    "keywords": "Class CommandOutputRecordSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputRecordSchema Inheritance System.Object CommandOutputRecordSchema Implements ICommandOutputRecordSchema IOutputRecordSchema IRecordSchema IOutputSchema IIOSchema ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CommandOutputRecordSchema : ICommandOutputRecordSchema, IOutputRecordSchema, IRecordSchema, IOutputSchema, IIOSchema, ILabeled, IDocumented, ISavable Constructors CommandOutputRecordSchema(enum_d9cba076fca539106791a4f46d198c7fcfbdb779, OneOf<None, String>, OneOf<None, List<CommandOutputRecordField>>, OneOf<None, String>, OneOf<None, String, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public CommandOutputRecordSchema(enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type, OneOf<None, string> name = default(OneOf<None, string>), OneOf<None, List<CommandOutputRecordField>> fields = default(OneOf<None, List<CommandOutputRecordField>>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type OneOf.OneOf < OneOf.Types.None , System.String > name OneOf.OneOf < OneOf.Types.None , List < CommandOutputRecordField >> fields OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> fields Defines the fields of the record. Declaration public OneOf<None, List<CommandOutputRecordField>> fields { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < CommandOutputRecordField >> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The identifier for this type Declaration public OneOf<None, string> name { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > type Must be record Declaration public enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type { get; set; } Property Value Type Description enum_d9cba076fca539106791a4f46d198c7fcfbdb779 Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ICommandOutputRecordSchema IOutputRecordSchema IRecordSchema IOutputSchema IIOSchema ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.CWLType.html": {
    "href": "reference/CWLDotNet.CWLType.html",
    "title": "Class CWLType | Documentation",
    "keywords": "Class CWLType Inheritance System.Object CWLType Implements IEnumClass < CWLType > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CWLType : IEnumClass<CWLType>, IEnumClass Fields BOOLEAN Declaration public static readonly CWLType BOOLEAN Field Value Type Description CWLType DIRECTORY Declaration public static readonly CWLType DIRECTORY Field Value Type Description CWLType DOUBLE Declaration public static readonly CWLType DOUBLE Field Value Type Description CWLType FILE Declaration public static readonly CWLType FILE Field Value Type Description CWLType FLOAT Declaration public static readonly CWLType FLOAT Field Value Type Description CWLType INT Declaration public static readonly CWLType INT Field Value Type Description CWLType LONG Declaration public static readonly CWLType LONG Field Value Type Description CWLType NULL Declaration public static readonly CWLType NULL Field Value Type Description CWLType STRING Declaration public static readonly CWLType STRING Field Value Type Description CWLType Properties Members Declaration public static IList<CWLType> Members { get; } Property Value Type Description IList < CWLType > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static CWLType Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description CWLType Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.CWLVersion.html": {
    "href": "reference/CWLDotNet.CWLVersion.html",
    "title": "Class CWLVersion | Documentation",
    "keywords": "Class CWLVersion Inheritance System.Object CWLVersion Implements IEnumClass < CWLVersion > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class CWLVersion : IEnumClass<CWLVersion>, IEnumClass Fields DRAFT_2 Declaration public static readonly CWLVersion DRAFT_2 Field Value Type Description CWLVersion DRAFT_3 Declaration public static readonly CWLVersion DRAFT_3 Field Value Type Description CWLVersion DRAFT_3_DEV1 Declaration public static readonly CWLVersion DRAFT_3_DEV1 Field Value Type Description CWLVersion DRAFT_3_DEV2 Declaration public static readonly CWLVersion DRAFT_3_DEV2 Field Value Type Description CWLVersion DRAFT_3_DEV3 Declaration public static readonly CWLVersion DRAFT_3_DEV3 Field Value Type Description CWLVersion DRAFT_3_DEV4 Declaration public static readonly CWLVersion DRAFT_3_DEV4 Field Value Type Description CWLVersion DRAFT_3_DEV5 Declaration public static readonly CWLVersion DRAFT_3_DEV5 Field Value Type Description CWLVersion DRAFT_4_DEV1 Declaration public static readonly CWLVersion DRAFT_4_DEV1 Field Value Type Description CWLVersion DRAFT_4_DEV2 Declaration public static readonly CWLVersion DRAFT_4_DEV2 Field Value Type Description CWLVersion DRAFT_4_DEV3 Declaration public static readonly CWLVersion DRAFT_4_DEV3 Field Value Type Description CWLVersion V1_0 Declaration public static readonly CWLVersion V1_0 Field Value Type Description CWLVersion V1_0_DEV4 Declaration public static readonly CWLVersion V1_0_DEV4 Field Value Type Description CWLVersion V1_1 Declaration public static readonly CWLVersion V1_1 Field Value Type Description CWLVersion V1_1_0_DEV1 Declaration public static readonly CWLVersion V1_1_0_DEV1 Field Value Type Description CWLVersion V1_2 Declaration public static readonly CWLVersion V1_2 Field Value Type Description CWLVersion V1_2_0_DEV1 Declaration public static readonly CWLVersion V1_2_0_DEV1 Field Value Type Description CWLVersion V1_2_0_DEV2 Declaration public static readonly CWLVersion V1_2_0_DEV2 Field Value Type Description CWLVersion V1_2_0_DEV3 Declaration public static readonly CWLVersion V1_2_0_DEV3 Field Value Type Description CWLVersion V1_2_0_DEV4 Declaration public static readonly CWLVersion V1_2_0_DEV4 Field Value Type Description CWLVersion V1_2_0_DEV5 Declaration public static readonly CWLVersion V1_2_0_DEV5 Field Value Type Description CWLVersion Properties Members Declaration public static IList<CWLVersion> Members { get; } Property Value Type Description IList < CWLVersion > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static CWLVersion Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description CWLVersion Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.DefaultFetcher.html": {
    "href": "reference/CWLDotNet.DefaultFetcher.html",
    "title": "Class DefaultFetcher | Documentation",
    "keywords": "Class DefaultFetcher Inheritance System.Object DefaultFetcher Implements IFetcher Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class DefaultFetcher : IFetcher Constructors DefaultFetcher() Declaration public DefaultFetcher() DefaultFetcher(HttpClient) Declaration public DefaultFetcher(HttpClient client) Parameters Type Name Description HttpClient client Methods CheckExists(String) Declaration public bool CheckExists(string uri) Parameters Type Name Description System.String uri Returns Type Description System.Boolean FetchText(String) Declaration public string FetchText(string uri) Parameters Type Name Description System.String uri Returns Type Description System.String Urljoin(String, String) Declaration public string Urljoin(string baseUrl, string url) Parameters Type Name Description System.String baseUrl System.String url Returns Type Description System.String Implements IFetcher"
  },
  "reference/CWLDotNet.Directory.html": {
    "href": "reference/CWLDotNet.Directory.html",
    "title": "Class Directory | Documentation",
    "keywords": "Class Directory Auto-generated class implementation for https://w3id.org/cwl/cwl#Directory Represents a directory to present to a command line tool. Directories are represented as objects with class of Directory . Directory objects have a number of properties that provide metadata about the directory. The location property of a Directory is a URI that uniquely identifies the directory. Implementations must support the file:// URI scheme and may support other schemes such as http://. Alternately to location , implementations must also accept the path property on Directory, which must be a filesystem path available on the same host as the CWL runner (for inputs) or the runtime environment of a command line tool execution (for command line tool outputs). A Directory object may have a listing field. This is a list of File and Directory objects that are contained in the Directory. For each entry in listing , the basename property defines the name of the File or Subdirectory when staged to disk. If listing is not provided, the implementation must have some way of fetching the Directory listing at runtime based on the location field. If a Directory does not have location , it is a Directory literal. A Directory literal must provide listing . Directory literals must be created on disk at runtime as needed. The resources in a Directory literal do not need to have any implied relationship in their location . For example, a Directory listing may contain two files located on different hosts. It is the responsibility of the runtime to ensure that those files are staged to disk appropriately. Secondary files associated with files in listing must also be staged to the same Directory. When executing a CommandLineTool, Directories must be recursively staged first and have local values of path assigend. Directory objects in CommandLineTool output must provide either a location URI or a path property in the context of the tool execution runtime (local to the compute node, or within the executing container). An ExpressionTool may forward file references from input to output by using the same value for location . Name conflicts (the same basename appearing multiple times in listing or in any entry in secondaryFiles in the listing) is a fatal error. Inheritance System.Object Directory Implements IDirectory ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class Directory : IDirectory, ISavable Constructors Directory(Directory_class, OneOf<None, String>, OneOf<None, String>, OneOf<None, String>, OneOf<None, List<OneOf<File, Directory>>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public Directory(Directory_class class_ = null, OneOf<None, string> location = default(OneOf<None, string>), OneOf<None, string> path = default(OneOf<None, string>), OneOf<None, string> basename = default(OneOf<None, string>), OneOf<None, List<OneOf<File, Directory>>> listing = default(OneOf<None, List<OneOf<File, Directory>>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description Directory_class class_ OneOf.OneOf < OneOf.Types.None , System.String > location OneOf.OneOf < OneOf.Types.None , System.String > path OneOf.OneOf < OneOf.Types.None , System.String > basename OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < File , Directory >>> listing LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties basename The base name of the directory, that is, the name of the file without any leading directory path. The base name must not contain a slash / . If not provided, the implementation must set this field based on the location field by taking the final path component after parsing location as an IRI. If basename is provided, it is not required to match the value from location . When this file is made available to a CommandLineTool, it must be named with basename , i.e. the final component of the path field must match basename . Declaration public OneOf<None, string> basename { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > class_ Must be Directory to indicate this object describes a Directory. Declaration public Directory_class class_ { get; set; } Property Value Type Description Directory_class listing List of files or subdirectories contained in this directory. The name of each file or subdirectory is determined by the basename field of each File or Directory object. It is an error if a File shares a basename with any other entry in listing . If two or more Directory object share the same basename , this must be treated as equivalent to a single subdirectory with the listings recursively merged. Declaration public OneOf<None, List<OneOf<File, Directory>>> listing { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < File , Directory >>> location An IRI that identifies the directory resource. This may be a relative reference, in which case it must be resolved using the base IRI of the document. The location may refer to a local or remote resource. If the listing field is not set, the implementation must use the location IRI to retrieve directory listing. If an implementation is unable to retrieve the directory listing stored at a remote resource (due to unsupported protocol, access denied, or other issue) it must signal an error. If the location field is not provided, the listing field must be provided. The implementation must assign a unique identifier for the location field. If the path field is provided but the location field is not, an implementation may assign the value of the path field to location , then follow the rules above. Declaration public OneOf<None, string> location { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > path The local path where the Directory is made available prior to executing a CommandLineTool. This must be set by the implementation. This field must not be used in any other context. The command line tool being executed must be able to to access the directory at path using the POSIX opendir(2) syscall. If the path contains POSIX shell metacharacters ( | , &amp; , ; , &lt; , > , ( , ) , $ , ` , \\ , &quot; , &apos; , &lt;space> , &lt;tab> , and &lt;newline> ) or characters not allowed for Internationalized Domain Names for Applications then implementations may terminate the process with a permanentFailure . Declaration public OneOf<None, string> path { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IDirectory ISavable"
  },
  "reference/CWLDotNet.Directory_class.html": {
    "href": "reference/CWLDotNet.Directory_class.html",
    "title": "Class Directory_class | Documentation",
    "keywords": "Class Directory_class Inheritance System.Object Directory_class Implements IEnumClass < Directory_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class Directory_class : IEnumClass<Directory_class>, IEnumClass Fields DIRECTORY Declaration public static readonly Directory_class DIRECTORY Field Value Type Description Directory_class Properties Members Declaration public static IList<Directory_class> Members { get; } Property Value Type Description IList < Directory_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static Directory_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description Directory_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.Dirent.html": {
    "href": "reference/CWLDotNet.Dirent.html",
    "title": "Class Dirent | Documentation",
    "keywords": "Class Dirent Auto-generated class implementation for https://w3id.org/cwl/cwl#Dirent Define a file or subdirectory that must be staged to a particular place prior to executing the command line tool. May be the result of executing an expression, such as building a configuration file from a template. Usually files are staged within the designated output directory . However, under certain circumstances, files may be staged at arbitrary locations, see discussion for entryname . Inheritance System.Object Dirent Implements IDirent ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class Dirent : IDirent, ISavable Constructors Dirent(OneOf<String>, OneOf<None, String>, OneOf<None, Boolean>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public Dirent(OneOf<string> entry, OneOf<None, string> entryname = default(OneOf<None, string>), OneOf<None, bool> writable = default(OneOf<None, bool>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < System.String > entry OneOf.OneOf < OneOf.Types.None , System.String > entryname OneOf.OneOf < OneOf.Types.None , System.Boolean > writable LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties entry If the value is a string literal or an expression which evaluates to a string, a new text file must be created with the string as the file contents. If the value is an expression that evaluates to a File or Directory object, or an array of File or Directory objects, this indicates the referenced file or directory should be added to the designated output directory prior to executing the tool. If the value is an expression that evaluates to null , nothing is added to the designated output directory, the entry has no effect. If the value is an expression that evaluates to some other array, number, or object not consisting of File or Directory objects, a new file must be created with the value serialized to JSON text as the file contents. The JSON serialization behavior should match the behavior of string interpolation of Parameter references . Declaration public OneOf<string> entry { get; set; } Property Value Type Description OneOf.OneOf < System.String > entryname The \"target\" name of the file or subdirectory. If entry is a File or Directory, the entryname field overrides the value of basename of the File or Directory object. Required when entry evaluates to file contents only Optional when entry evaluates to a File or Directory object with a basename Invalid when entry evaluates to an array of File or Directory objects. If entryname is a relative path, it specifies a name within the designated output directory. A relative path starting with ../ or that resolves to location above the designated output directory is an error. If entryname is an absolute path (starts with a slash / ) it is an error unless the following conditions are met: DockerRequirement is present in requirements The program is will run inside a software container where, from the perspective of the program, the root filesystem is not shared with any other user or running program. In this case, and the above conditions are met, then entryname may specify the absolute path within the container where the file or directory must be placed. Declaration public OneOf<None, string> entryname { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > writable If true, the File or Directory (or array of Files or Directories) declared in entry must be writable by the tool. Changes to the file or directory must be isolated and not visible by any other CommandLineTool process. This may be implemented by making a copy of the original file or directory. Disruptive changes to the referenced file or directory must not be allowed unless InplaceUpdateRequirement.inplaceUpdate is true. Default false (files and directories read-only by default). A directory marked as writable: true implies that all files and subdirectories are recursively writable as well. If writable is false, the file may be made available using a bind mount or file system link to avoid unnecessary copying of the input file. Command line tools may receive an error on attempting to rename or delete files or directories that are not explicitly marked as writable. Declaration public OneOf<None, bool> writable { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IDirent ISavable"
  },
  "reference/CWLDotNet.DockerRequirement.html": {
    "href": "reference/CWLDotNet.DockerRequirement.html",
    "title": "Class DockerRequirement | Documentation",
    "keywords": "Class DockerRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#DockerRequirement Indicates that a workflow component should be run in a Docker or Docker-compatible (such as Singularity and udocker ) container environment and specifies how to fetch or build the image. If a CommandLineTool lists DockerRequirement under hints (or requirements ), it may (or must) be run in the specified Docker container. The platform must first acquire or install the correct Docker image as specified by dockerPull , dockerImport , dockerLoad or dockerFile . The platform must execute the tool in the container using docker run with the appropriate Docker image and tool command line. The workflow platform may provide input files and the designated output directory through the use of volume bind mounts. The platform should rewrite file paths in the input object to correspond to the Docker bind mounted locations. That is, the platform should rewrite values in the parameter context such as runtime.outdir , runtime.tmpdir and others to be valid paths within the container. The platform must ensure that runtime.outdir and runtime.tmpdir are distinct directories. When running a tool contained in Docker, the workflow platform must not assume anything about the contents of the Docker container, such as the presence or absence of specific software, except to assume that the generated command line represents a valid command within the runtime environment of the container. A container image may specify an ENTRYPOINT and/or CMD . Command line arguments will be appended after all elements of ENTRYPOINT, and will override all elements specified using CMD (in other words, CMD is only used when the CommandLineTool definition produces an empty command line). Use of implicit ENTRYPOINT or CMD are discouraged due to reproducibility concerns of the implicit hidden execution point (For further discussion, see https://doi.org/10.12688/f1000research.15140.1 ). Portable CommandLineTool wrappers in which use of a container is optional must not rely on ENTRYPOINT or CMD. CommandLineTools which do rely on ENTRYPOINT or CMD must list DockerRequirement in the requirements section. Interaction with other requirements If EnvVarRequirement is specified alongside a DockerRequirement, the environment variables must be provided to Docker using --env or --env-file and interact with the container's preexisting environment as defined by Docker. Inheritance System.Object DockerRequirement Implements IDockerRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class DockerRequirement : IDockerRequirement, IProcessRequirement, ISavable Constructors DockerRequirement(DockerRequirement_class, OneOf<None, String>, OneOf<None, String>, OneOf<None, String>, OneOf<None, String>, OneOf<None, String>, OneOf<None, String>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public DockerRequirement(DockerRequirement_class class_ = null, OneOf<None, string> dockerPull = default(OneOf<None, string>), OneOf<None, string> dockerLoad = default(OneOf<None, string>), OneOf<None, string> dockerFile = default(OneOf<None, string>), OneOf<None, string> dockerImport = default(OneOf<None, string>), OneOf<None, string> dockerImageId = default(OneOf<None, string>), OneOf<None, string> dockerOutputDirectory = default(OneOf<None, string>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description DockerRequirement_class class_ OneOf.OneOf < OneOf.Types.None , System.String > dockerPull OneOf.OneOf < OneOf.Types.None , System.String > dockerLoad OneOf.OneOf < OneOf.Types.None , System.String > dockerFile OneOf.OneOf < OneOf.Types.None , System.String > dockerImport OneOf.OneOf < OneOf.Types.None , System.String > dockerImageId OneOf.OneOf < OneOf.Types.None , System.String > dockerOutputDirectory LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'DockerRequirement' Declaration public DockerRequirement_class class_ { get; set; } Property Value Type Description DockerRequirement_class dockerFile Supply the contents of a Dockerfile which will be built using docker build . Declaration public OneOf<None, string> dockerFile { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > dockerImageId The image id that will be used for docker run . May be a human-readable image name or the image identifier hash. May be skipped if dockerPull is specified, in which case the dockerPull image id must be used. Declaration public OneOf<None, string> dockerImageId { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > dockerImport Provide HTTP URL to download and gunzip a Docker images using `docker import. Declaration public OneOf<None, string> dockerImport { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > dockerLoad Specify a HTTP URL from which to download a Docker image using docker load . Declaration public OneOf<None, string> dockerLoad { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > dockerOutputDirectory Set the designated output directory to a specific location inside the Docker container. Declaration public OneOf<None, string> dockerOutputDirectory { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > dockerPull Specify a Docker image to retrieve using docker pull . Can contain the immutable digest to ensure an exact container is used: dockerPull: ubuntu@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2 Declaration public OneOf<None, string> dockerPull { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IDockerRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.DockerRequirement_class.html": {
    "href": "reference/CWLDotNet.DockerRequirement_class.html",
    "title": "Class DockerRequirement_class | Documentation",
    "keywords": "Class DockerRequirement_class Inheritance System.Object DockerRequirement_class Implements IEnumClass < DockerRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class DockerRequirement_class : IEnumClass<DockerRequirement_class>, IEnumClass Fields DOCKERREQUIREMENT Declaration public static readonly DockerRequirement_class DOCKERREQUIREMENT Field Value Type Description DockerRequirement_class Properties Members Declaration public static IList<DockerRequirement_class> Members { get; } Property Value Type Description IList < DockerRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static DockerRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description DockerRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.enum_d062602be0b4b8fd33e69e29a841317b6ab665bc.html": {
    "href": "reference/CWLDotNet.enum_d062602be0b4b8fd33e69e29a841317b6ab665bc.html",
    "title": "Class enum_d062602be0b4b8fd33e69e29a841317b6ab665bc | Documentation",
    "keywords": "Class enum_d062602be0b4b8fd33e69e29a841317b6ab665bc Inheritance System.Object enum_d062602be0b4b8fd33e69e29a841317b6ab665bc Implements IEnumClass < enum_d062602be0b4b8fd33e69e29a841317b6ab665bc > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class enum_d062602be0b4b8fd33e69e29a841317b6ab665bc : IEnumClass<enum_d062602be0b4b8fd33e69e29a841317b6ab665bc>, IEnumClass Fields ARRAY Declaration public static readonly enum_d062602be0b4b8fd33e69e29a841317b6ab665bc ARRAY Field Value Type Description enum_d062602be0b4b8fd33e69e29a841317b6ab665bc Properties Members Declaration public static IList<enum_d062602be0b4b8fd33e69e29a841317b6ab665bc> Members { get; } Property Value Type Description IList < enum_d062602be0b4b8fd33e69e29a841317b6ab665bc > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static enum_d062602be0b4b8fd33e69e29a841317b6ab665bc Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description enum_d062602be0b4b8fd33e69e29a841317b6ab665bc Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.enum_d961d79c225752b9fadb617367615ab176b47d77.html": {
    "href": "reference/CWLDotNet.enum_d961d79c225752b9fadb617367615ab176b47d77.html",
    "title": "Class enum_d961d79c225752b9fadb617367615ab176b47d77 | Documentation",
    "keywords": "Class enum_d961d79c225752b9fadb617367615ab176b47d77 Inheritance System.Object enum_d961d79c225752b9fadb617367615ab176b47d77 Implements IEnumClass < enum_d961d79c225752b9fadb617367615ab176b47d77 > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class enum_d961d79c225752b9fadb617367615ab176b47d77 : IEnumClass<enum_d961d79c225752b9fadb617367615ab176b47d77>, IEnumClass Fields ENUM Declaration public static readonly enum_d961d79c225752b9fadb617367615ab176b47d77 ENUM Field Value Type Description enum_d961d79c225752b9fadb617367615ab176b47d77 Properties Members Declaration public static IList<enum_d961d79c225752b9fadb617367615ab176b47d77> Members { get; } Property Value Type Description IList < enum_d961d79c225752b9fadb617367615ab176b47d77 > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static enum_d961d79c225752b9fadb617367615ab176b47d77 Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description enum_d961d79c225752b9fadb617367615ab176b47d77 Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.enum_d9cba076fca539106791a4f46d198c7fcfbdb779.html": {
    "href": "reference/CWLDotNet.enum_d9cba076fca539106791a4f46d198c7fcfbdb779.html",
    "title": "Class enum_d9cba076fca539106791a4f46d198c7fcfbdb779 | Documentation",
    "keywords": "Class enum_d9cba076fca539106791a4f46d198c7fcfbdb779 Inheritance System.Object enum_d9cba076fca539106791a4f46d198c7fcfbdb779 Implements IEnumClass < enum_d9cba076fca539106791a4f46d198c7fcfbdb779 > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class enum_d9cba076fca539106791a4f46d198c7fcfbdb779 : IEnumClass<enum_d9cba076fca539106791a4f46d198c7fcfbdb779>, IEnumClass Fields RECORD Declaration public static readonly enum_d9cba076fca539106791a4f46d198c7fcfbdb779 RECORD Field Value Type Description enum_d9cba076fca539106791a4f46d198c7fcfbdb779 Properties Members Declaration public static IList<enum_d9cba076fca539106791a4f46d198c7fcfbdb779> Members { get; } Property Value Type Description IList < enum_d9cba076fca539106791a4f46d198c7fcfbdb779 > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static enum_d9cba076fca539106791a4f46d198c7fcfbdb779 Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description enum_d9cba076fca539106791a4f46d198c7fcfbdb779 Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.EnumSchema.html": {
    "href": "reference/CWLDotNet.EnumSchema.html",
    "title": "Class EnumSchema | Documentation",
    "keywords": "Class EnumSchema Auto-generated class implementation for https://w3id.org/cwl/salad#EnumSchema Define an enumerated type. Inheritance System.Object EnumSchema Implements IEnumSchema ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class EnumSchema : IEnumSchema, ISavable Constructors EnumSchema(List<String>, enum_d961d79c225752b9fadb617367615ab176b47d77, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public EnumSchema(List<string> symbols, enum_d961d79c225752b9fadb617367615ab176b47d77 type, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < System.String > symbols enum_d961d79c225752b9fadb617367615ab176b47d77 type LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties symbols Defines the set of valid symbols. Declaration public List<string> symbols { get; set; } Property Value Type Description List < System.String > type Must be enum Declaration public enum_d961d79c225752b9fadb617367615ab176b47d77 type { get; set; } Property Value Type Description enum_d961d79c225752b9fadb617367615ab176b47d77 Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IEnumSchema ISavable"
  },
  "reference/CWLDotNet.EnvironmentDef.html": {
    "href": "reference/CWLDotNet.EnvironmentDef.html",
    "title": "Class EnvironmentDef | Documentation",
    "keywords": "Class EnvironmentDef Auto-generated class implementation for https://w3id.org/cwl/cwl#EnvironmentDef Define an environment variable that will be set in the runtime environment by the workflow platform when executing the command line tool. May be the result of executing an expression, such as getting a parameter from input. Inheritance System.Object EnvironmentDef Implements IEnvironmentDef ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class EnvironmentDef : IEnvironmentDef, ISavable Constructors EnvironmentDef(String, OneOf<String>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public EnvironmentDef(string envName, OneOf<string> envValue, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description System.String envName OneOf.OneOf < System.String > envValue LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties envName The environment variable name Declaration public string envName { get; set; } Property Value Type Description System.String envValue The environment variable value Declaration public OneOf<string> envValue { get; set; } Property Value Type Description OneOf.OneOf < System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IEnvironmentDef ISavable"
  },
  "reference/CWLDotNet.EnvVarRequirement.html": {
    "href": "reference/CWLDotNet.EnvVarRequirement.html",
    "title": "Class EnvVarRequirement | Documentation",
    "keywords": "Class EnvVarRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#EnvVarRequirement Define a list of environment variables which will be set in the execution environment of the tool. See EnvironmentDef for details. Inheritance System.Object EnvVarRequirement Implements IEnvVarRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class EnvVarRequirement : IEnvVarRequirement, IProcessRequirement, ISavable Constructors EnvVarRequirement(List<EnvironmentDef>, EnvVarRequirement_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public EnvVarRequirement(List<EnvironmentDef> envDef, EnvVarRequirement_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < EnvironmentDef > envDef EnvVarRequirement_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'EnvVarRequirement' Declaration public EnvVarRequirement_class class_ { get; set; } Property Value Type Description EnvVarRequirement_class envDef The list of environment variables. Declaration public List<EnvironmentDef> envDef { get; set; } Property Value Type Description List < EnvironmentDef > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IEnvVarRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.EnvVarRequirement_class.html": {
    "href": "reference/CWLDotNet.EnvVarRequirement_class.html",
    "title": "Class EnvVarRequirement_class | Documentation",
    "keywords": "Class EnvVarRequirement_class Inheritance System.Object EnvVarRequirement_class Implements IEnumClass < EnvVarRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class EnvVarRequirement_class : IEnumClass<EnvVarRequirement_class>, IEnumClass Fields ENVVARREQUIREMENT Declaration public static readonly EnvVarRequirement_class ENVVARREQUIREMENT Field Value Type Description EnvVarRequirement_class Properties Members Declaration public static IList<EnvVarRequirement_class> Members { get; } Property Value Type Description IList < EnvVarRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static EnvVarRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description EnvVarRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.Expression.html": {
    "href": "reference/CWLDotNet.Expression.html",
    "title": "Class Expression | Documentation",
    "keywords": "Class Expression Inheritance System.Object Expression Implements IEnumClass < Expression > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class Expression : IEnumClass<Expression>, IEnumClass Fields EXPRESSIONPLACEHOLDER Declaration public static readonly Expression EXPRESSIONPLACEHOLDER Field Value Type Description Expression Properties Members Declaration public static IList<Expression> Members { get; } Property Value Type Description IList < Expression > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static Expression Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description Expression Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.ExpressionTool.html": {
    "href": "reference/CWLDotNet.ExpressionTool.html",
    "title": "Class ExpressionTool | Documentation",
    "keywords": "Class ExpressionTool Auto-generated class implementation for https://w3id.org/cwl/cwl#ExpressionTool An ExpressionTool is a type of Process object that can be run by itself or as a Workflow step. It executes a pure Javascript expression that has access to the same input parameters as a workflow. It is meant to be used sparingly as a way to isolate complex Javascript expressions that need to operate on input data and produce some result; perhaps just a rearrangement of the inputs. No Docker software container is required or allowed. Inheritance System.Object ExpressionTool Implements IExpressionTool IProcess IIdentified ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ExpressionTool : IExpressionTool, IProcess, IIdentified, ILabeled, IDocumented, ISavable Constructors ExpressionTool(List<WorkflowInputParameter>, List<ExpressionToolOutputParameter>, String, OneOf<None, String>, ExpressionTool_class, OneOf<None, String>, OneOf<None, String, List<String>>, OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>>, OneOf<None, List<Object>>, OneOf<None, CWLVersion>, OneOf<None, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public ExpressionTool(List<WorkflowInputParameter> inputs, List<ExpressionToolOutputParameter> outputs, string expression, OneOf<None, string> id = default(OneOf<None, string>), ExpressionTool_class class_ = null, OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>> requirements = default(OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>>), OneOf<None, List<object>> hints = default(OneOf<None, List<object>>), OneOf<None, CWLVersion> cwlVersion = default(OneOf<None, CWLVersion>), OneOf<None, List<string>> intent = default(OneOf<None, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < WorkflowInputParameter > inputs List < ExpressionToolOutputParameter > outputs System.String expression OneOf.OneOf < OneOf.Types.None , System.String > id ExpressionTool_class class_ OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < InlineJavascriptRequirement , SchemaDefRequirement , LoadListingRequirement , DockerRequirement , SoftwareRequirement , InitialWorkDirRequirement , EnvVarRequirement , ShellCommandRequirement , ResourceRequirement , WorkReuse , NetworkAccess , InplaceUpdateRequirement , ToolTimeLimit , SubworkflowFeatureRequirement , ScatterFeatureRequirement , MultipleInputFeatureRequirement , StepInputExpressionRequirement >>> requirements OneOf.OneOf < OneOf.Types.None , List < System.Object >> hints OneOf.OneOf < OneOf.Types.None , CWLVersion > cwlVersion OneOf.OneOf < OneOf.Types.None , List < System.String >> intent LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Declaration public ExpressionTool_class class_ { get; set; } Property Value Type Description ExpressionTool_class cwlVersion CWL document version. Always required at the document root. Not required for a Process embedded inside another Process. Declaration public OneOf<None, CWLVersion> cwlVersion { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , CWLVersion > doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> expression The expression to execute. The expression must return a plain Javascript object which matches the output parameters of the ExpressionTool. Declaration public string expression { get; set; } Property Value Type Description System.String hints Declares hints applying to either the runtime environment or the workflow engine that may be helpful in executing this process. It is not an error if an implementation cannot satisfy all hints, however the implementation may report a warning. Declaration public OneOf<None, List<object>> hints { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.Object >> id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > inputs Defines the input parameters of the process. The process is ready to run when all required input parameters are associated with concrete values. Input parameters include a schema for each parameter which is used to validate the input object. It may also be used to build a user interface for constructing the input object. When accepting an input object, all input parameters must have a value. If an input parameter is missing from the input object, it must be assigned a value of null (or the value of default for that parameter, if provided) for the purposes of validation and evaluation of expressions. Declaration public List<WorkflowInputParameter> inputs { get; set; } Property Value Type Description List < WorkflowInputParameter > intent An identifier for the type of computational operation, of this Process. Especially useful for \"class: Operation\", but can also be used for CommandLineTool, Workflow, or ExpressionTool. If provided, then this must be an IRI of a concept node that represents the type of operation, preferrably defined within an ontology. For example, in the domain of bioinformatics, one can use an IRI from the EDAM Ontology's Operation concept nodes , like Alignment , or Clustering ; or a more specific Operation concept like Split read mapping . Declaration public OneOf<None, List<string>> intent { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.String >> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > outputs Defines the parameters representing the output of the process. May be used to generate and/or validate the output object. Declaration public List<ExpressionToolOutputParameter> outputs { get; set; } Property Value Type Description List < ExpressionToolOutputParameter > requirements Declares requirements that apply to either the runtime environment or the workflow engine that must be met in order to execute this process. If an implementation cannot satisfy all requirements, or a requirement is listed which is not recognized by the implementation, it is a fatal error and the implementation must not attempt to run the process, unless overridden at user option. Declaration public OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>> requirements { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < InlineJavascriptRequirement , SchemaDefRequirement , LoadListingRequirement , DockerRequirement , SoftwareRequirement , InitialWorkDirRequirement , EnvVarRequirement , ShellCommandRequirement , ResourceRequirement , WorkReuse , NetworkAccess , InplaceUpdateRequirement , ToolTimeLimit , SubworkflowFeatureRequirement , ScatterFeatureRequirement , MultipleInputFeatureRequirement , StepInputExpressionRequirement >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IExpressionTool IProcess IIdentified ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.ExpressionTool_class.html": {
    "href": "reference/CWLDotNet.ExpressionTool_class.html",
    "title": "Class ExpressionTool_class | Documentation",
    "keywords": "Class ExpressionTool_class Inheritance System.Object ExpressionTool_class Implements IEnumClass < ExpressionTool_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ExpressionTool_class : IEnumClass<ExpressionTool_class>, IEnumClass Fields EXPRESSIONTOOL Declaration public static readonly ExpressionTool_class EXPRESSIONTOOL Field Value Type Description ExpressionTool_class Properties Members Declaration public static IList<ExpressionTool_class> Members { get; } Property Value Type Description IList < ExpressionTool_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static ExpressionTool_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description ExpressionTool_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.ExpressionToolOutputParameter.html": {
    "href": "reference/CWLDotNet.ExpressionToolOutputParameter.html",
    "title": "Class ExpressionToolOutputParameter | Documentation",
    "keywords": "Class ExpressionToolOutputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#ExpressionToolOutputParameter Inheritance System.Object ExpressionToolOutputParameter Implements IExpressionToolOutputParameter IOutputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IOutputFormat ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ExpressionToolOutputParameter : IExpressionToolOutputParameter, IOutputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IOutputFormat, ISavable Constructors ExpressionToolOutputParameter(OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, String, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, String>>>, OneOf<None, String>, OneOf<None, String>, OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>, OneOf<None, Boolean>, OneOf<None, String, List<String>>, OneOf<None, String>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public ExpressionToolOutputParameter(OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string>>> type, OneOf<None, string> id = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles = default(OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>), OneOf<None, bool> streamable = default(OneOf<None, bool>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, string> format = default(OneOf<None, string>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String , List < OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String >>> type OneOf.OneOf < OneOf.Types.None , System.String > id OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> secondaryFiles OneOf.OneOf < OneOf.Types.None , System.Boolean > streamable OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , System.String > format LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format Only valid when type: File or is an array of items: File . This is the file format that will be assigned to the output File object. Declaration public OneOf<None, string> format { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > secondaryFiles Only valid when type: File or is an array of items: File . Provides a pattern or expression specifying files or directories that should be included alongside the primary file. Secondary files may be required or optional. When not explicitly specified, secondary files specified for inputs are required and outputs are optional. An implementation must include matching Files and Directories in the secondaryFiles property of the primary file. These Files and Directories must be transferred and staged alongside the primary file. An implementation may fail workflow execution if a required secondary file does not exist. If the value is an expression, the value of self in the expression must be the primary input or output File object to which this binding applies. The basename , nameroot and nameext fields must be present in self . For CommandLineTool outputs the path field must also be present. The expression must return a filename string relative to the path to the primary File, a File or Directory object with either path or location and basename fields set, or an array consisting of strings or File or Directory objects. It is legal to reference an unchanged File or Directory object taken from input as a secondaryFile. The expression may return \"null\" in which case there is no secondaryFile from that expression. To work on non-filename-preserving storage systems, portable tool descriptions should avoid constructing new values from location , but should construct relative references using basename or nameroot instead. If a value in secondaryFiles is a string that is not an expression, it specifies that the following pattern should be applied to the path of the primary file to yield a filename relative to the primary File: If string ends with ? character, remove the last ? and mark the resulting secondary file as optional. If string begins with one or more caret ^ characters, for each caret, remove the last file extension from the path (the last period . and all following characters). If there are no file extensions, the path is unchanged. Append the remainder of the string to the end of the file path. Declaration public OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> streamable Only valid when type: File or is an array of items: File . A value of true indicates that the file is read or written sequentially without seeking. An implementation may use this flag to indicate whether it is valid to stream file contents using a named pipe. Default: false . Declaration public OneOf<None, bool> streamable { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > type Specify valid types of data that may be assigned to this parameter. Declaration public OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string>>> type { get; set; } Property Value Type Description OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String , List < OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IExpressionToolOutputParameter IOutputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IOutputFormat ISavable"
  },
  "reference/CWLDotNet.File.html": {
    "href": "reference/CWLDotNet.File.html",
    "title": "Class File | Documentation",
    "keywords": "Class File Auto-generated class implementation for https://w3id.org/cwl/cwl#File Represents a file (or group of files when secondaryFiles is provided) that will be accessible by tools using standard POSIX file system call API such as open(2) and read(2). Files are represented as objects with class of File . File objects have a number of properties that provide metadata about the file. The location property of a File is a URI that uniquely identifies the file. Implementations must support the file:// URI scheme and may support other schemes such as http:// and https:// . The value of location may also be a relative reference, in which case it must be resolved relative to the URI of the document it appears in. Alternately to location , implementations must also accept the path property on File, which must be a filesystem path available on the same host as the CWL runner (for inputs) or the runtime environment of a command line tool execution (for command line tool outputs). If no location or path is specified, a file object must specify contents with the UTF-8 text content of the file. This is a \"file literal\". File literals do not correspond to external resources, but are created on disk with contents with when needed for a executing a tool. Where appropriate, expressions can return file literals to define new files on a runtime. The maximum size of contents is 64 kilobytes. The basename property defines the filename on disk where the file is staged. This may differ from the resource name. If not provided, basename must be computed from the last path part of location and made available to expressions. The secondaryFiles property is a list of File or Directory objects that must be staged in the same directory as the primary file. It is an error for file names to be duplicated in secondaryFiles . The size property is the size in bytes of the File. It must be computed from the resource and made available to expressions. The checksum field contains a cryptographic hash of the file content for use it verifying file contents. Implementations may, at user option, enable or disable computation of the checksum field for performance or other reasons. However, the ability to compute output checksums is required to pass the CWL conformance test suite. When executing a CommandLineTool, the files and secondary files may be staged to an arbitrary directory, but must use the value of basename for the filename. The path property must be file path in the context of the tool execution runtime (local to the compute node, or within the executing container). All computed properties should be available to expressions. File literals also must be staged and path must be set. When collecting CommandLineTool outputs, glob matching returns file paths (with the path property) and the derived properties. This can all be modified by outputEval . Alternately, if the file cwl.output.json is present in the output, outputBinding is ignored. File objects in the output must provide either a location URI or a path property in the context of the tool execution runtime (local to the compute node, or within the executing container). When evaluating an ExpressionTool, file objects must be referenced via location (the expression tool does not have access to files on disk so path is meaningless) or as file literals. It is legal to return a file object with an existing location but a different basename . The loadContents field of ExpressionTool inputs behaves the same as on CommandLineTool inputs, however it is not meaningful on the outputs. An ExpressionTool may forward file references from input to output by using the same value for location . Inheritance System.Object File Implements IFile ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class File : IFile, ISavable Constructors File(File_class, OneOf<None, String>, OneOf<None, String>, OneOf<None, String>, OneOf<None, String>, OneOf<None, String>, OneOf<None, String>, OneOf<None, String>, OneOf<None, Int32, Int64>, OneOf<None, List<OneOf<File, Directory>>>, OneOf<None, String>, OneOf<None, String>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public File(File_class class_ = null, OneOf<None, string> location = default(OneOf<None, string>), OneOf<None, string> path = default(OneOf<None, string>), OneOf<None, string> basename = default(OneOf<None, string>), OneOf<None, string> dirname = default(OneOf<None, string>), OneOf<None, string> nameroot = default(OneOf<None, string>), OneOf<None, string> nameext = default(OneOf<None, string>), OneOf<None, string> checksum = default(OneOf<None, string>), OneOf<None, int, long> size = default(OneOf<None, int, long>), OneOf<None, List<OneOf<File, Directory>>> secondaryFiles = default(OneOf<None, List<OneOf<File, Directory>>>), OneOf<None, string> format = default(OneOf<None, string>), OneOf<None, string> contents = default(OneOf<None, string>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description File_class class_ OneOf.OneOf < OneOf.Types.None , System.String > location OneOf.OneOf < OneOf.Types.None , System.String > path OneOf.OneOf < OneOf.Types.None , System.String > basename OneOf.OneOf < OneOf.Types.None , System.String > dirname OneOf.OneOf < OneOf.Types.None , System.String > nameroot OneOf.OneOf < OneOf.Types.None , System.String > nameext OneOf.OneOf < OneOf.Types.None , System.String > checksum OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 > size OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < File , Directory >>> secondaryFiles OneOf.OneOf < OneOf.Types.None , System.String > format OneOf.OneOf < OneOf.Types.None , System.String > contents LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties basename The base name of the file, that is, the name of the file without any leading directory path. The base name must not contain a slash / . If not provided, the implementation must set this field based on the location field by taking the final path component after parsing location as an IRI. If basename is provided, it is not required to match the value from location . When this file is made available to a CommandLineTool, it must be named with basename , i.e. the final component of the path field must match basename . Declaration public OneOf<None, string> basename { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > checksum Optional hash code for validating file integrity. Currently must be in the form \"sha1$ + hexadecimal string\" using the SHA-1 algorithm. Declaration public OneOf<None, string> checksum { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > class_ Must be File to indicate this object describes a file. Declaration public File_class class_ { get; set; } Property Value Type Description File_class contents File contents literal. If neither location nor path is provided, contents must be non-null. The implementation must assign a unique identifier for the location field. When the file is staged as input to CommandLineTool, the value of contents must be written to a file. If contents is set as a result of an Javascript expression, an entry in InitialWorkDirRequirement , or read in from cwl.output.json , there is no specified upper limit on the size of contents . Implementations may have practical limits on the size of contents based on memory and storage available to the workflow runner or other factors. If the loadContents field of an InputParameter or OutputParameter is true, and the input or output File object location is valid, the file must be a UTF-8 text file 64 KiB or smaller, and the implementation must read the entire contents of the file and place it in the contents field. If the size of the file is greater than 64 KiB, the implementation must raise a fatal error. Declaration public OneOf<None, string> contents { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > dirname The name of the directory containing file, that is, the path leading up to the final slash in the path such that dirname + &apos;/&apos; + basename == path . The implementation must set this field based on the value of path prior to evaluating parameter references or expressions in a CommandLineTool document. This field must not be used in any other context. Declaration public OneOf<None, string> dirname { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > format The format of the file: this must be an IRI of a concept node that represents the file format, preferrably defined within an ontology. If no ontology is available, file formats may be tested by exact match. Reasoning about format compatibility must be done by checking that an input file format is the same, owl:equivalentClass or rdfs:subClassOf the format required by the input parameter. owl:equivalentClass is transitive with rdfs:subClassOf , e.g. if &lt;B> owl:equivalentClass &lt;C> and &lt;B> owl:subclassOf &lt;A> then infer &lt;C> owl:subclassOf &lt;A> . File format ontologies may be provided in the \"$schemas\" metadata at the root of the document. If no ontologies are specified in $schemas , the runtime may perform exact file format matches. Declaration public OneOf<None, string> format { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > location An IRI that identifies the file resource. This may be a relative reference, in which case it must be resolved using the base IRI of the document. The location may refer to a local or remote resource; the implementation must use the IRI to retrieve file content. If an implementation is unable to retrieve the file content stored at a remote resource (due to unsupported protocol, access denied, or other issue) it must signal an error. If the location field is not provided, the contents field must be provided. The implementation must assign a unique identifier for the location field. If the path field is provided but the location field is not, an implementation may assign the value of the path field to location , then follow the rules above. Declaration public OneOf<None, string> location { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > nameext The basename extension such that nameroot + nameext == basename , and nameext is empty or begins with a period and contains at most one period. Leading periods on the basename are ignored; a basename of .cshrc will have an empty nameext . The implementation must set this field automatically based on the value of basename prior to evaluating parameter references or expressions. Declaration public OneOf<None, string> nameext { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > nameroot The basename root such that nameroot + nameext == basename , and nameext is empty or begins with a period and contains at most one period. For the purposess of path splitting leading periods on the basename are ignored; a basename of .cshrc will have a nameroot of .cshrc . The implementation must set this field automatically based on the value of basename prior to evaluating parameter references or expressions. Declaration public OneOf<None, string> nameroot { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > path The local host path where the File is available when a CommandLineTool is executed. This field must be set by the implementation. The final path component must match the value of basename . This field must not be used in any other context. The command line tool being executed must be able to to access the file at path using the POSIX open(2) syscall. As a special case, if the path field is provided but the location field is not, an implementation may assign the value of the path field to location , and remove the path field. If the path contains POSIX shell metacharacters ( | , &amp; , ; , &lt; , > , ( , ) , $ , ` , \\ , &quot; , &apos; , &lt;space> , &lt;tab> , and &lt;newline> ) or characters not allowed for Internationalized Domain Names for Applications then implementations may terminate the process with a permanentFailure . Declaration public OneOf<None, string> path { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > secondaryFiles A list of additional files or directories that are associated with the primary file and must be transferred alongside the primary file. Examples include indexes of the primary file, or external references which must be included when loading primary document. A file object listed in secondaryFiles may itself include secondaryFiles for which the same rules apply. Declaration public OneOf<None, List<OneOf<File, Directory>>> secondaryFiles { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < File , Directory >>> size Optional file size (in bytes) Declaration public OneOf<None, int, long> size { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IFile ISavable"
  },
  "reference/CWLDotNet.File_class.html": {
    "href": "reference/CWLDotNet.File_class.html",
    "title": "Class File_class | Documentation",
    "keywords": "Class File_class Inheritance System.Object File_class Implements IEnumClass < File_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class File_class : IEnumClass<File_class>, IEnumClass Fields FILE Declaration public static readonly File_class FILE Field Value Type Description File_class Properties Members Declaration public static IList<File_class> Members { get; } Property Value Type Description IList < File_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static File_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description File_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.html": {
    "href": "reference/CWLDotNet.html",
    "title": "Namespace CWLDotNet | Documentation",
    "keywords": "Namespace CWLDotNet Classes Any ArraySchema Auto-generated class implementation for https://w3id.org/cwl/salad#ArraySchema CommandInputArraySchema Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputArraySchema CommandInputEnumSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputEnumSchema CommandInputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputParameter An input parameter for a CommandLineTool. CommandInputRecordField Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputRecordField CommandInputRecordSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputRecordSchema CommandLineBindable Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandLineBindable CommandLineBinding Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandLineBinding When listed under inputBinding in the input schema, the term \"value\" refers to the the corresponding value in the input object. For binding objects listed in CommandLineTool.arguments , the term \"value\" refers to the effective value after evaluating valueFrom . The binding behavior when building the command line depends on the data type of the value. If there is a mismatch between the type described by the input schema and the effective value, such as resulting from an expression evaluation, an implementation must use the data type of the effective value. string : Add prefix and the string to the command line. number : Add prefix and decimal representation to command line. boolean : If true, add prefix to the command line. If false, add nothing. File : Add prefix and the value of File.path to the command line. Directory : Add prefix and the value of Directory.path to the command line. array : If itemSeparator is specified, add prefix and the join the array into a single string with itemSeparator separating the items. Otherwise first add prefix , then recursively process individual elements. If the array is empty, it does not add anything to command line. object : Add prefix only, and recursively add object fields for which inputBinding is specified. null : Add nothing. CommandLineTool Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandLineTool This defines the schema of the CWL Command Line Tool Description document. CommandLineTool_class CommandOutputArraySchema Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputArraySchema CommandOutputBinding Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputBinding Describes how to generate an output parameter based on the files produced by a CommandLineTool. The output parameter value is generated by applying these operations in the following order: glob loadContents outputEval secondaryFiles CommandOutputEnumSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputEnumSchema CommandOutputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputParameter An output parameter for a CommandLineTool. CommandOutputRecordField Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputRecordField CommandOutputRecordSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputRecordSchema CWLType CWLVersion DefaultFetcher Directory Auto-generated class implementation for https://w3id.org/cwl/cwl#Directory Represents a directory to present to a command line tool. Directories are represented as objects with class of Directory . Directory objects have a number of properties that provide metadata about the directory. The location property of a Directory is a URI that uniquely identifies the directory. Implementations must support the file:// URI scheme and may support other schemes such as http://. Alternately to location , implementations must also accept the path property on Directory, which must be a filesystem path available on the same host as the CWL runner (for inputs) or the runtime environment of a command line tool execution (for command line tool outputs). A Directory object may have a listing field. This is a list of File and Directory objects that are contained in the Directory. For each entry in listing , the basename property defines the name of the File or Subdirectory when staged to disk. If listing is not provided, the implementation must have some way of fetching the Directory listing at runtime based on the location field. If a Directory does not have location , it is a Directory literal. A Directory literal must provide listing . Directory literals must be created on disk at runtime as needed. The resources in a Directory literal do not need to have any implied relationship in their location . For example, a Directory listing may contain two files located on different hosts. It is the responsibility of the runtime to ensure that those files are staged to disk appropriately. Secondary files associated with files in listing must also be staged to the same Directory. When executing a CommandLineTool, Directories must be recursively staged first and have local values of path assigend. Directory objects in CommandLineTool output must provide either a location URI or a path property in the context of the tool execution runtime (local to the compute node, or within the executing container). An ExpressionTool may forward file references from input to output by using the same value for location . Name conflicts (the same basename appearing multiple times in listing or in any entry in secondaryFiles in the listing) is a fatal error. Directory_class Dirent Auto-generated class implementation for https://w3id.org/cwl/cwl#Dirent Define a file or subdirectory that must be staged to a particular place prior to executing the command line tool. May be the result of executing an expression, such as building a configuration file from a template. Usually files are staged within the designated output directory . However, under certain circumstances, files may be staged at arbitrary locations, see discussion for entryname . DockerRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#DockerRequirement Indicates that a workflow component should be run in a Docker or Docker-compatible (such as Singularity and udocker ) container environment and specifies how to fetch or build the image. If a CommandLineTool lists DockerRequirement under hints (or requirements ), it may (or must) be run in the specified Docker container. The platform must first acquire or install the correct Docker image as specified by dockerPull , dockerImport , dockerLoad or dockerFile . The platform must execute the tool in the container using docker run with the appropriate Docker image and tool command line. The workflow platform may provide input files and the designated output directory through the use of volume bind mounts. The platform should rewrite file paths in the input object to correspond to the Docker bind mounted locations. That is, the platform should rewrite values in the parameter context such as runtime.outdir , runtime.tmpdir and others to be valid paths within the container. The platform must ensure that runtime.outdir and runtime.tmpdir are distinct directories. When running a tool contained in Docker, the workflow platform must not assume anything about the contents of the Docker container, such as the presence or absence of specific software, except to assume that the generated command line represents a valid command within the runtime environment of the container. A container image may specify an ENTRYPOINT and/or CMD . Command line arguments will be appended after all elements of ENTRYPOINT, and will override all elements specified using CMD (in other words, CMD is only used when the CommandLineTool definition produces an empty command line). Use of implicit ENTRYPOINT or CMD are discouraged due to reproducibility concerns of the implicit hidden execution point (For further discussion, see https://doi.org/10.12688/f1000research.15140.1 ). Portable CommandLineTool wrappers in which use of a container is optional must not rely on ENTRYPOINT or CMD. CommandLineTools which do rely on ENTRYPOINT or CMD must list DockerRequirement in the requirements section. Interaction with other requirements If EnvVarRequirement is specified alongside a DockerRequirement, the environment variables must be provided to Docker using --env or --env-file and interact with the container's preexisting environment as defined by Docker. DockerRequirement_class enum_d062602be0b4b8fd33e69e29a841317b6ab665bc enum_d961d79c225752b9fadb617367615ab176b47d77 enum_d9cba076fca539106791a4f46d198c7fcfbdb779 EnumSchema Auto-generated class implementation for https://w3id.org/cwl/salad#EnumSchema Define an enumerated type. EnvironmentDef Auto-generated class implementation for https://w3id.org/cwl/cwl#EnvironmentDef Define an environment variable that will be set in the runtime environment by the workflow platform when executing the command line tool. May be the result of executing an expression, such as getting a parameter from input. EnvVarRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#EnvVarRequirement Define a list of environment variables which will be set in the execution environment of the tool. See EnvironmentDef for details. EnvVarRequirement_class Expression ExpressionTool Auto-generated class implementation for https://w3id.org/cwl/cwl#ExpressionTool An ExpressionTool is a type of Process object that can be run by itself or as a Workflow step. It executes a pure Javascript expression that has access to the same input parameters as a workflow. It is meant to be used sparingly as a way to isolate complex Javascript expressions that need to operate on input data and produce some result; perhaps just a rearrangement of the inputs. No Docker software container is required or allowed. ExpressionTool_class ExpressionToolOutputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#ExpressionToolOutputParameter File Auto-generated class implementation for https://w3id.org/cwl/cwl#File Represents a file (or group of files when secondaryFiles is provided) that will be accessible by tools using standard POSIX file system call API such as open(2) and read(2). Files are represented as objects with class of File . File objects have a number of properties that provide metadata about the file. The location property of a File is a URI that uniquely identifies the file. Implementations must support the file:// URI scheme and may support other schemes such as http:// and https:// . The value of location may also be a relative reference, in which case it must be resolved relative to the URI of the document it appears in. Alternately to location , implementations must also accept the path property on File, which must be a filesystem path available on the same host as the CWL runner (for inputs) or the runtime environment of a command line tool execution (for command line tool outputs). If no location or path is specified, a file object must specify contents with the UTF-8 text content of the file. This is a \"file literal\". File literals do not correspond to external resources, but are created on disk with contents with when needed for a executing a tool. Where appropriate, expressions can return file literals to define new files on a runtime. The maximum size of contents is 64 kilobytes. The basename property defines the filename on disk where the file is staged. This may differ from the resource name. If not provided, basename must be computed from the last path part of location and made available to expressions. The secondaryFiles property is a list of File or Directory objects that must be staged in the same directory as the primary file. It is an error for file names to be duplicated in secondaryFiles . The size property is the size in bytes of the File. It must be computed from the resource and made available to expressions. The checksum field contains a cryptographic hash of the file content for use it verifying file contents. Implementations may, at user option, enable or disable computation of the checksum field for performance or other reasons. However, the ability to compute output checksums is required to pass the CWL conformance test suite. When executing a CommandLineTool, the files and secondary files may be staged to an arbitrary directory, but must use the value of basename for the filename. The path property must be file path in the context of the tool execution runtime (local to the compute node, or within the executing container). All computed properties should be available to expressions. File literals also must be staged and path must be set. When collecting CommandLineTool outputs, glob matching returns file paths (with the path property) and the derived properties. This can all be modified by outputEval . Alternately, if the file cwl.output.json is present in the output, outputBinding is ignored. File objects in the output must provide either a location URI or a path property in the context of the tool execution runtime (local to the compute node, or within the executing container). When evaluating an ExpressionTool, file objects must be referenced via location (the expression tool does not have access to files on disk so path is meaningless) or as file literals. It is legal to return a file object with an existing location but a different basename . The loadContents field of ExpressionTool inputs behaves the same as on CommandLineTool inputs, however it is not meaningful on the outputs. An ExpressionTool may forward file references from input to output by using the same value for location . File_class InitialWorkDirRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#InitialWorkDirRequirement Define a list of files and subdirectories that must be staged by the workflow platform prior to executing the command line tool. Normally files are staged within the designated output directory. However, when running inside containers, files may be staged at arbitrary locations, see discussion for Dirent.entryname . Together with DockerRequirement.dockerOutputDirectory it is possible to control the locations of both input and output files when running in containers. InitialWorkDirRequirement_class InlineJavascriptRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#InlineJavascriptRequirement Indicates that the workflow platform must support inline Javascript expressions. If this requirement is not present, the workflow platform must not perform expression interpolatation. InlineJavascriptRequirement_class InplaceUpdateRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#InplaceUpdateRequirement If inplaceUpdate is true, then an implementation supporting this feature may permit tools to directly update files with writable: true in InitialWorkDirRequirement. That is, as an optimization, files may be destructively modified in place as opposed to copied and updated. An implementation must ensure that only one workflow step may access a writable file at a time. It is an error if a file which is writable by one workflow step file is accessed (for reading or writing) by any other workflow step running independently. However, a file which has been updated in a previous completed step may be used as input to multiple steps, provided it is read-only in every step. Workflow steps which modify a file must produce the modified file as output. Downstream steps which futher process the file must use the output of previous steps, and not refer to a common input (this is necessary for both ordering and correctness). Workflow authors should provide this in the hints section. The intent of this feature is that workflows produce the same results whether or not InplaceUpdateRequirement is supported by the implementation, and this feature is primarily available as an optimization for particular environments. Users and implementers should be aware that workflows that destructively modify inputs may not be repeatable or reproducible. In particular, enabling this feature implies that WorkReuse should not be enabled. InplaceUpdateRequirement_class InputArraySchema Auto-generated class implementation for https://w3id.org/cwl/cwl#InputArraySchema InputBinding Auto-generated class implementation for https://w3id.org/cwl/cwl#InputBinding InputEnumSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#InputEnumSchema InputRecordField Auto-generated class implementation for https://w3id.org/cwl/cwl#InputRecordField InputRecordSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#InputRecordSchema LinkMergeMethod LoadingOptions LoadListingEnum LoadListingRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#LoadListingRequirement Specify the desired behavior for loading the listing field of a Directory object for use by expressions. LoadListingRequirement_class MultipleInputFeatureRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#MultipleInputFeatureRequirement Indicates that the workflow platform must support multiple inbound data links listed in the source field of WorkflowStepInput . MultipleInputFeatureRequirement_class NetworkAccess Auto-generated class implementation for https://w3id.org/cwl/cwl#NetworkAccess Indicate whether a process requires outgoing IPv4/IPv6 network access. Choice of IPv4 or IPv6 is implementation and site specific, correct tools must support both. If networkAccess is false or not specified, tools must not assume network access, except for localhost (the loopback device). If networkAccess is true, the tool must be able to make outgoing connections to network resources. Resources may be on a private subnet or the public Internet. However, implementations and sites may apply their own security policies to restrict what is accessible by the tool. Enabling network access does not imply a publically routable IP address or the ability to accept inbound connections. NetworkAccess_class Operation Auto-generated class implementation for https://w3id.org/cwl/cwl#Operation This record describes an abstract operation. It is a potential step of a workflow that has not yet been bound to a concrete implementation. It specifies an input and output signature, but does not provide enough information to be executed. An implementation (or other tooling) may provide a means of binding an Operation to a concrete process (such as Workflow, CommandLineTool, or ExpressionTool) with a compatible signature. Operation_class OperationInputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#OperationInputParameter Describe an input parameter of an operation. OperationOutputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#OperationOutputParameter Describe an output parameter of an operation. OutputArraySchema Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputArraySchema OutputEnumSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputEnumSchema OutputRecordField Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputRecordField OutputRecordSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputRecordSchema PickValueMethod PrimitiveType RecordField Auto-generated class implementation for https://w3id.org/cwl/salad#RecordField A field of a record. RecordSchema Auto-generated class implementation for https://w3id.org/cwl/salad#RecordSchema ResourceRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#ResourceRequirement Specify basic hardware resource requirements. \"min\" is the minimum amount of a resource that must be reserved to schedule a job. If \"min\" cannot be satisfied, the job should not be run. \"max\" is the maximum amount of a resource that the job shall be allocated. If a node has sufficient resources, multiple jobs may be scheduled on a single node provided each job's \"max\" resource requirements are met. If a job attempts to exceed its resource allocation, an implementation may deny additional resources, which may result in job failure. If both \"min\" and \"max\" are specified, an implementation may choose to allocate any amount between \"min\" and \"max\", with the actual allocation provided in the runtime object. If \"min\" is specified but \"max\" is not, then \"max\" == \"min\" If \"max\" is specified by \"min\" is not, then \"min\" == \"max\". It is an error if max < min. It is an error if the value of any of these fields is negative. If neither \"min\" nor \"max\" is specified for a resource, use the default values below. ResourceRequirement_class RootLoader ScatterFeatureRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#ScatterFeatureRequirement Indicates that the workflow platform must support the scatter and scatterMethod fields of WorkflowStep . ScatterFeatureRequirement_class ScatterMethod SchemaDefRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#SchemaDefRequirement This field consists of an array of type definitions which must be used when interpreting the inputs and outputs fields. When a type field contains a IRI, the implementation must check if the type is defined in schemaDefs and use that definition. If the type is not found in schemaDefs , it is an error. The entries in schemaDefs must be processed in the order listed such that later schema definitions may refer to earlier schema definitions. Type definitions are allowed for enum and record types only. Type definitions may be shared by defining them in a file and then $include -ing them in the types field. A file can contain a list of type definitions SchemaDefRequirement_class SecondaryFileSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#SecondaryFileSchema Secondary files are specified using the following micro-DSL for secondary files: If the value is a string, it is transformed to an object with two fields pattern and required By default, the value of required is null (this indicates default behavior, which may be based on the context) If the value ends with a question mark ? the question mark is stripped off and the value of the field required is set to False The remaining value is assigned to the field pattern For implementation details and examples, please see this section in the Schema Salad specification. ShellCommandRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#ShellCommandRequirement Modify the behavior of CommandLineTool to generate a single string containing a shell command line. Each item in the arguments list must be joined into a string separated by single spaces and quoted to prevent intepretation by the shell, unless CommandLineBinding for that argument contains shellQuote: false . If shellQuote: false is specified, the argument is joined into the command string without quoting, which allows the use of shell metacharacters such as | for pipes. ShellCommandRequirement_class SoftwarePackage Auto-generated class implementation for https://w3id.org/cwl/cwl#SoftwarePackage SoftwareRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#SoftwareRequirement A list of software packages that should be configured in the environment of the defined process. SoftwareRequirement_class stderr stdin stdout StepInputExpressionRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#StepInputExpressionRequirement Indicate that the workflow platform must support the valueFrom field of WorkflowStepInput . StepInputExpressionRequirement_class SubworkflowFeatureRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#SubworkflowFeatureRequirement Indicates that the workflow platform must support nested workflows in the run field of WorkflowStep . SubworkflowFeatureRequirement_class ToolTimeLimit Auto-generated class implementation for https://w3id.org/cwl/cwl#ToolTimeLimit Set an upper limit on the execution time of a CommandLineTool. A CommandLineTool whose execution duration exceeds the time limit may be preemptively terminated and considered failed. May also be used by batch systems to make scheduling decisions. The execution duration excludes external operations, such as staging of files, pulling a docker image etc, and only counts wall-time for the execution of the command line itself. ToolTimeLimit_class Utilities ValidationException Workflow Auto-generated class implementation for https://w3id.org/cwl/cwl#Workflow A workflow describes a set of steps and the dependencies between those steps. When a step produces output that will be consumed by a second step, the first step is a dependency of the second step. When there is a dependency, the workflow engine must execute the preceding step and wait for it to successfully produce output before executing the dependent step. If two steps are defined in the workflow graph that are not directly or indirectly dependent, these steps are independent , and may execute in any order or execute concurrently. A workflow is complete when all steps have been executed. Dependencies between parameters are expressed using the source field on workflow step input parameters and outputSource field on workflow output parameters . The source field on each workflow step input parameter expresses the data links that contribute to the value of the step input parameter (the \"sink\"). A workflow step can only begin execution when every data link connected to a step has been fulfilled. The outputSource field on each workflow step input parameter expresses the data links that contribute to the value of the workflow output parameter (the \"sink\"). Workflow execution cannot complete successfully until every data link connected to an output parameter has been fulfilled. Workflow success and failure A completed step must result in one of success , temporaryFailure or permanentFailure states. An implementation may choose to retry a step execution which resulted in temporaryFailure . An implementation may choose to either continue running other steps of a workflow, or terminate immediately upon permanentFailure . If any step of a workflow execution results in permanentFailure , then the workflow status is permanentFailure . If one or more steps result in temporaryFailure and all other steps complete success or are not executed, then the workflow status is temporaryFailure . If all workflow steps are executed and complete with success , then the workflow status is success . Extensions ScatterFeatureRequirement and SubworkflowFeatureRequirement are available as standard extensions to core workflow semantics. Workflow_class WorkflowInputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkflowInputParameter WorkflowOutputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkflowOutputParameter Describe an output parameter of a workflow. The parameter must be connected to one or more parameters defined in the workflow that will provide the value of the output parameter. It is legal to connect a WorkflowInputParameter to a WorkflowOutputParameter. See WorkflowStepInput for discussion of linkMerge and pickValue . WorkflowStep Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkflowStep A workflow step is an executable element of a workflow. It specifies the underlying process implementation (such as CommandLineTool or another Workflow ) in the run field and connects the input and output parameters of the underlying process to workflow parameters. Scatter/gather To use scatter/gather, ScatterFeatureRequirement must be specified in the workflow or workflow step requirements. A \"scatter\" operation specifies that the associated workflow step or subworkflow should execute separately over a list of input elements. Each job making up a scatter operation is independent and may be executed concurrently. The scatter field specifies one or more input parameters which will be scattered. An input parameter may be listed more than once. The declared type of each input parameter is implicitly becomes an array of items of the input parameter type. If a parameter is listed more than once, it becomes a nested array. As a result, upstream parameters which are connected to scattered parameters must be arrays. All output parameter types are also implicitly wrapped in arrays. Each job in the scatter results in an entry in the output array. If any scattered parameter runtime value is an empty array, all outputs are set to empty arrays and no work is done for the step, according to applicable scattering rules. If scatter declares more than one input parameter, scatterMethod describes how to decompose the input into a discrete set of jobs. dotproduct specifies that each of the input arrays are aligned and one element taken from each array to construct each job. It is an error if all input arrays are not the same length. nested_crossproduct specifies the Cartesian product of the inputs, producing a job for every combination of the scattered inputs. The output must be nested arrays for each level of scattering, in the order that the input arrays are listed in the scatter field. flat_crossproduct specifies the Cartesian product of the inputs, producing a job for every combination of the scattered inputs. The output arrays must be flattened to a single level, but otherwise listed in the order that the input arrays are listed in the scatter field. Conditional execution (Optional) Conditional execution makes execution of a step conditional on an expression. A step that is not executed is \"skipped\". A skipped step produces null for all output parameters. The condition is evaluated after scatter , using the input object of each individual scatter job. This means over a set of scatter jobs, some may be executed and some may be skipped. When the results are gathered, skipped steps must be null in the output arrays. The when field controls conditional execution. This is an expression that must be evaluated with inputs bound to the step input object (or individual scatter job), and returns a boolean value. It is an error if this expression returns a value other than true or false . Conditionals in CWL are an optional feature and are not required to be implemented by all consumers of CWL documents. An implementation that does not support conditionals must return a fatal error when attempting execute a workflow that uses conditional constructs the implementation does not support. Subworkflows To specify a nested workflow as part of a workflow step, SubworkflowFeatureRequirement must be specified in the workflow or workflow step requirements. It is a fatal error if a workflow directly or indirectly invokes itself as a subworkflow (recursive workflows are not allowed). WorkflowStepInput Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkflowStepInput The input of a workflow step connects an upstream parameter (from the workflow inputs, or the outputs of other workflows steps) with the input parameters of the process specified by the run field. Only input parameters declared by the target process will be passed through at runtime to the process though additonal parameters may be specified (for use within valueFrom expressions for instance) - unconnected or unused parameters do not represent an error condition. Input object A WorkflowStepInput object must contain an id field in the form #fieldname or #prefix/fieldname . When the id field contains a slash / the field name consists of the characters following the final slash (the prefix portion may contain one or more slashes to indicate scope). This defines a field of the workflow step input object with the value of the source parameter(s). Merging multiple inbound data links To merge multiple inbound data links, MultipleInputFeatureRequirement must be specified in the workflow or workflow step requirements. If the sink parameter is an array, or named in a workflow scatter operation, there may be multiple inbound data links listed in the source field. The values from the input links are merged depending on the method specified in the linkMerge field. If both linkMerge and pickValue are null or not specified, and there is more than one element in the source array, the default method is \"merge_nested\". If both linkMerge and pickValue are null or not specified, and there is only a single element in the source , then the input parameter takes the scalar value from the single input link (it is not wrapped in a single-list). merge_nested The input must be an array consisting of exactly one entry for each input link. If \"merge_nested\" is specified with a single link, the value from the link must be wrapped in a single-item list. merge_flattened The source and sink parameters must be compatible types, or the source type must be compatible with single element from the \"items\" type of the destination array parameter. Source parameters which are arrays are concatenated. Source parameters which are single element types are appended as single elements. Picking non-null values among inbound data links If present, pickValue specifies how to picking non-null values among inbound data links. pickValue is evaluated Once all source values from upstream step or parameters are available. After linkMerge . Before scatter or valueFrom . This is specifically intended to be useful in combination with conditional execution , where several upstream steps may be connected to a single input ( source is a list), and skipped steps produce null values. Static type checkers should check for type consistency after infering what the type will be after pickValue is applied, just as they do currently for linkMerge . first_non_null For the first level of a list input, pick the first non-null element. The result is a scalar. It is an error if there is no non-null element. Examples: [null, x, null, y] -> x [null, [null], null, y] -> [null] [null, null, null] -> Runtime Error Intended use case : If-else pattern where the value comes either from a conditional step or from a default or fallback value. The conditional step(s) should be placed first in the list. the_only_non_null For the first level of a list input, pick the single non-null element. The result is a scalar. It is an error if there is more than one non-null element. Examples: [null, x, null] -> x [null, x, null, y] -> Runtime Error [null, [null], null] -> [null] [null, null, null] -> Runtime Error Intended use case : Switch type patterns where developer considers more than one active code path as a workflow error (possibly indicating an error in writing when condition expressions). all_non_null For the first level of a list input, pick all non-null values. The result is a list, which may be empty. Examples: [null, x, null] -> [x] [x, null, y] -> [x, y] [null, [x], [null]] -> [[x], [null]] [null, null, null] -> [] Intended use case : It is valid to have more than one source, but sources are conditional, so null sources (from skipped steps) should be filtered out. WorkflowStepOutput Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkflowStepOutput Associate an output parameter of the underlying process with a workflow parameter. The workflow parameter (given in the id field) be may be used as a source to connect with input parameters of other workflow steps, or with an output parameter of the process. A unique identifier for this workflow output parameter. This is the identifier to use in the source field of WorkflowStepInput to connect the output value to downstream parameters. WorkReuse Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkReuse For implementations that support reusing output from past work (on the assumption that same code and same input produce same results), control whether to enable or disable the reuse behavior for a particular tool or step (to accomodate situations where that assumption is incorrect). A reused step is not executed but instead returns the same output as the original execution. If WorkReuse is not specified, correct tools should assume it is enabled by default. WorkReuse_class Interfaces IArraySchema Auto-generated interface for https://w3id.org/cwl/salad#ArraySchema ICommandInputArraySchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandInputArraySchema ICommandInputEnumSchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandInputEnumSchema ICommandInputParameter Auto-generated interface for https://w3id.org/cwl/cwl#CommandInputParameter An input parameter for a CommandLineTool. ICommandInputRecordField Auto-generated interface for https://w3id.org/cwl/cwl#CommandInputRecordField ICommandInputRecordSchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandInputRecordSchema ICommandInputSchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandInputSchema ICommandLineBindable Auto-generated interface for https://w3id.org/cwl/cwl#CommandLineBindable ICommandLineBinding Auto-generated interface for https://w3id.org/cwl/cwl#CommandLineBinding When listed under inputBinding in the input schema, the term \"value\" refers to the the corresponding value in the input object. For binding objects listed in CommandLineTool.arguments , the term \"value\" refers to the effective value after evaluating valueFrom . The binding behavior when building the command line depends on the data type of the value. If there is a mismatch between the type described by the input schema and the effective value, such as resulting from an expression evaluation, an implementation must use the data type of the effective value. string : Add prefix and the string to the command line. number : Add prefix and decimal representation to command line. boolean : If true, add prefix to the command line. If false, add nothing. File : Add prefix and the value of File.path to the command line. Directory : Add prefix and the value of Directory.path to the command line. array : If itemSeparator is specified, add prefix and the join the array into a single string with itemSeparator separating the items. Otherwise first add prefix , then recursively process individual elements. If the array is empty, it does not add anything to command line. object : Add prefix only, and recursively add object fields for which inputBinding is specified. null : Add nothing. ICommandLineTool Auto-generated interface for https://w3id.org/cwl/cwl#CommandLineTool This defines the schema of the CWL Command Line Tool Description document. ICommandOutputArraySchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandOutputArraySchema ICommandOutputBinding Auto-generated interface for https://w3id.org/cwl/cwl#CommandOutputBinding Describes how to generate an output parameter based on the files produced by a CommandLineTool. The output parameter value is generated by applying these operations in the following order: glob loadContents outputEval secondaryFiles ICommandOutputEnumSchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandOutputEnumSchema ICommandOutputParameter Auto-generated interface for https://w3id.org/cwl/cwl#CommandOutputParameter An output parameter for a CommandLineTool. ICommandOutputRecordField Auto-generated interface for https://w3id.org/cwl/cwl#CommandOutputRecordField ICommandOutputRecordSchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandOutputRecordSchema IDirectory Auto-generated interface for https://w3id.org/cwl/cwl#Directory Represents a directory to present to a command line tool. Directories are represented as objects with class of Directory . Directory objects have a number of properties that provide metadata about the directory. The location property of a Directory is a URI that uniquely identifies the directory. Implementations must support the file:// URI scheme and may support other schemes such as http://. Alternately to location , implementations must also accept the path property on Directory, which must be a filesystem path available on the same host as the CWL runner (for inputs) or the runtime environment of a command line tool execution (for command line tool outputs). A Directory object may have a listing field. This is a list of File and Directory objects that are contained in the Directory. For each entry in listing , the basename property defines the name of the File or Subdirectory when staged to disk. If listing is not provided, the implementation must have some way of fetching the Directory listing at runtime based on the location field. If a Directory does not have location , it is a Directory literal. A Directory literal must provide listing . Directory literals must be created on disk at runtime as needed. The resources in a Directory literal do not need to have any implied relationship in their location . For example, a Directory listing may contain two files located on different hosts. It is the responsibility of the runtime to ensure that those files are staged to disk appropriately. Secondary files associated with files in listing must also be staged to the same Directory. When executing a CommandLineTool, Directories must be recursively staged first and have local values of path assigend. Directory objects in CommandLineTool output must provide either a location URI or a path property in the context of the tool execution runtime (local to the compute node, or within the executing container). An ExpressionTool may forward file references from input to output by using the same value for location . Name conflicts (the same basename appearing multiple times in listing or in any entry in secondaryFiles in the listing) is a fatal error. IDirent Auto-generated interface for https://w3id.org/cwl/cwl#Dirent Define a file or subdirectory that must be staged to a particular place prior to executing the command line tool. May be the result of executing an expression, such as building a configuration file from a template. Usually files are staged within the designated output directory . However, under certain circumstances, files may be staged at arbitrary locations, see discussion for entryname . IDockerRequirement Auto-generated interface for https://w3id.org/cwl/cwl#DockerRequirement Indicates that a workflow component should be run in a Docker or Docker-compatible (such as Singularity and udocker ) container environment and specifies how to fetch or build the image. If a CommandLineTool lists DockerRequirement under hints (or requirements ), it may (or must) be run in the specified Docker container. The platform must first acquire or install the correct Docker image as specified by dockerPull , dockerImport , dockerLoad or dockerFile . The platform must execute the tool in the container using docker run with the appropriate Docker image and tool command line. The workflow platform may provide input files and the designated output directory through the use of volume bind mounts. The platform should rewrite file paths in the input object to correspond to the Docker bind mounted locations. That is, the platform should rewrite values in the parameter context such as runtime.outdir , runtime.tmpdir and others to be valid paths within the container. The platform must ensure that runtime.outdir and runtime.tmpdir are distinct directories. When running a tool contained in Docker, the workflow platform must not assume anything about the contents of the Docker container, such as the presence or absence of specific software, except to assume that the generated command line represents a valid command within the runtime environment of the container. A container image may specify an ENTRYPOINT and/or CMD . Command line arguments will be appended after all elements of ENTRYPOINT, and will override all elements specified using CMD (in other words, CMD is only used when the CommandLineTool definition produces an empty command line). Use of implicit ENTRYPOINT or CMD are discouraged due to reproducibility concerns of the implicit hidden execution point (For further discussion, see https://doi.org/10.12688/f1000research.15140.1 ). Portable CommandLineTool wrappers in which use of a container is optional must not rely on ENTRYPOINT or CMD. CommandLineTools which do rely on ENTRYPOINT or CMD must list DockerRequirement in the requirements section. Interaction with other requirements If EnvVarRequirement is specified alongside a DockerRequirement, the environment variables must be provided to Docker using --env or --env-file and interact with the container's preexisting environment as defined by Docker. IDocumented Auto-generated interface for https://w3id.org/cwl/salad#Documented IEnumClass IEnumClass<T> IEnumSchema Auto-generated interface for https://w3id.org/cwl/salad#EnumSchema Define an enumerated type. IEnvironmentDef Auto-generated interface for https://w3id.org/cwl/cwl#EnvironmentDef Define an environment variable that will be set in the runtime environment by the workflow platform when executing the command line tool. May be the result of executing an expression, such as getting a parameter from input. IEnvVarRequirement Auto-generated interface for https://w3id.org/cwl/cwl#EnvVarRequirement Define a list of environment variables which will be set in the execution environment of the tool. See EnvironmentDef for details. IExpressionTool Auto-generated interface for https://w3id.org/cwl/cwl#ExpressionTool An ExpressionTool is a type of Process object that can be run by itself or as a Workflow step. It executes a pure Javascript expression that has access to the same input parameters as a workflow. It is meant to be used sparingly as a way to isolate complex Javascript expressions that need to operate on input data and produce some result; perhaps just a rearrangement of the inputs. No Docker software container is required or allowed. IExpressionToolOutputParameter Auto-generated interface for https://w3id.org/cwl/cwl#ExpressionToolOutputParameter IFetcher IFieldBase Auto-generated interface for https://w3id.org/cwl/cwl#FieldBase IFile Auto-generated interface for https://w3id.org/cwl/cwl#File Represents a file (or group of files when secondaryFiles is provided) that will be accessible by tools using standard POSIX file system call API such as open(2) and read(2). Files are represented as objects with class of File . File objects have a number of properties that provide metadata about the file. The location property of a File is a URI that uniquely identifies the file. Implementations must support the file:// URI scheme and may support other schemes such as http:// and https:// . The value of location may also be a relative reference, in which case it must be resolved relative to the URI of the document it appears in. Alternately to location , implementations must also accept the path property on File, which must be a filesystem path available on the same host as the CWL runner (for inputs) or the runtime environment of a command line tool execution (for command line tool outputs). If no location or path is specified, a file object must specify contents with the UTF-8 text content of the file. This is a \"file literal\". File literals do not correspond to external resources, but are created on disk with contents with when needed for a executing a tool. Where appropriate, expressions can return file literals to define new files on a runtime. The maximum size of contents is 64 kilobytes. The basename property defines the filename on disk where the file is staged. This may differ from the resource name. If not provided, basename must be computed from the last path part of location and made available to expressions. The secondaryFiles property is a list of File or Directory objects that must be staged in the same directory as the primary file. It is an error for file names to be duplicated in secondaryFiles . The size property is the size in bytes of the File. It must be computed from the resource and made available to expressions. The checksum field contains a cryptographic hash of the file content for use it verifying file contents. Implementations may, at user option, enable or disable computation of the checksum field for performance or other reasons. However, the ability to compute output checksums is required to pass the CWL conformance test suite. When executing a CommandLineTool, the files and secondary files may be staged to an arbitrary directory, but must use the value of basename for the filename. The path property must be file path in the context of the tool execution runtime (local to the compute node, or within the executing container). All computed properties should be available to expressions. File literals also must be staged and path must be set. When collecting CommandLineTool outputs, glob matching returns file paths (with the path property) and the derived properties. This can all be modified by outputEval . Alternately, if the file cwl.output.json is present in the output, outputBinding is ignored. File objects in the output must provide either a location URI or a path property in the context of the tool execution runtime (local to the compute node, or within the executing container). When evaluating an ExpressionTool, file objects must be referenced via location (the expression tool does not have access to files on disk so path is meaningless) or as file literals. It is legal to return a file object with an existing location but a different basename . The loadContents field of ExpressionTool inputs behaves the same as on CommandLineTool inputs, however it is not meaningful on the outputs. An ExpressionTool may forward file references from input to output by using the same value for location . IIdentified Auto-generated interface for https://w3id.org/cwl/cwl#Identified IInitialWorkDirRequirement Auto-generated interface for https://w3id.org/cwl/cwl#InitialWorkDirRequirement Define a list of files and subdirectories that must be staged by the workflow platform prior to executing the command line tool. Normally files are staged within the designated output directory. However, when running inside containers, files may be staged at arbitrary locations, see discussion for Dirent.entryname . Together with DockerRequirement.dockerOutputDirectory it is possible to control the locations of both input and output files when running in containers. IInlineJavascriptRequirement Auto-generated interface for https://w3id.org/cwl/cwl#InlineJavascriptRequirement Indicates that the workflow platform must support inline Javascript expressions. If this requirement is not present, the workflow platform must not perform expression interpolatation. IInplaceUpdateRequirement Auto-generated interface for https://w3id.org/cwl/cwl#InplaceUpdateRequirement If inplaceUpdate is true, then an implementation supporting this feature may permit tools to directly update files with writable: true in InitialWorkDirRequirement. That is, as an optimization, files may be destructively modified in place as opposed to copied and updated. An implementation must ensure that only one workflow step may access a writable file at a time. It is an error if a file which is writable by one workflow step file is accessed (for reading or writing) by any other workflow step running independently. However, a file which has been updated in a previous completed step may be used as input to multiple steps, provided it is read-only in every step. Workflow steps which modify a file must produce the modified file as output. Downstream steps which futher process the file must use the output of previous steps, and not refer to a common input (this is necessary for both ordering and correctness). Workflow authors should provide this in the hints section. The intent of this feature is that workflows produce the same results whether or not InplaceUpdateRequirement is supported by the implementation, and this feature is primarily available as an optimization for particular environments. Users and implementers should be aware that workflows that destructively modify inputs may not be repeatable or reproducible. In particular, enabling this feature implies that WorkReuse should not be enabled. IInputArraySchema Auto-generated interface for https://w3id.org/cwl/cwl#InputArraySchema IInputBinding Auto-generated interface for https://w3id.org/cwl/cwl#InputBinding IInputEnumSchema Auto-generated interface for https://w3id.org/cwl/cwl#InputEnumSchema IInputFormat Auto-generated interface for https://w3id.org/cwl/cwl#InputFormat IInputParameter Auto-generated interface for https://w3id.org/cwl/cwl#InputParameter IInputRecordField Auto-generated interface for https://w3id.org/cwl/cwl#InputRecordField IInputRecordSchema Auto-generated interface for https://w3id.org/cwl/cwl#InputRecordSchema IInputSchema Auto-generated interface for https://w3id.org/cwl/cwl#InputSchema IIOSchema Auto-generated interface for https://w3id.org/cwl/cwl#IOSchema ILabeled Auto-generated interface for https://w3id.org/cwl/cwl#Labeled ILoadContents Auto-generated interface for https://w3id.org/cwl/cwl#LoadContents ILoadListingRequirement Auto-generated interface for https://w3id.org/cwl/cwl#LoadListingRequirement Specify the desired behavior for loading the listing field of a Directory object for use by expressions. IMultipleInputFeatureRequirement Auto-generated interface for https://w3id.org/cwl/cwl#MultipleInputFeatureRequirement Indicates that the workflow platform must support multiple inbound data links listed in the source field of WorkflowStepInput . INetworkAccess Auto-generated interface for https://w3id.org/cwl/cwl#NetworkAccess Indicate whether a process requires outgoing IPv4/IPv6 network access. Choice of IPv4 or IPv6 is implementation and site specific, correct tools must support both. If networkAccess is false or not specified, tools must not assume network access, except for localhost (the loopback device). If networkAccess is true, the tool must be able to make outgoing connections to network resources. Resources may be on a private subnet or the public Internet. However, implementations and sites may apply their own security policies to restrict what is accessible by the tool. Enabling network access does not imply a publically routable IP address or the ability to accept inbound connections. IOperation Auto-generated interface for https://w3id.org/cwl/cwl#Operation This record describes an abstract operation. It is a potential step of a workflow that has not yet been bound to a concrete implementation. It specifies an input and output signature, but does not provide enough information to be executed. An implementation (or other tooling) may provide a means of binding an Operation to a concrete process (such as Workflow, CommandLineTool, or ExpressionTool) with a compatible signature. IOperationInputParameter Auto-generated interface for https://w3id.org/cwl/cwl#OperationInputParameter Describe an input parameter of an operation. IOperationOutputParameter Auto-generated interface for https://w3id.org/cwl/cwl#OperationOutputParameter Describe an output parameter of an operation. IOutputArraySchema Auto-generated interface for https://w3id.org/cwl/cwl#OutputArraySchema IOutputEnumSchema Auto-generated interface for https://w3id.org/cwl/cwl#OutputEnumSchema IOutputFormat Auto-generated interface for https://w3id.org/cwl/cwl#OutputFormat IOutputParameter Auto-generated interface for https://w3id.org/cwl/cwl#OutputParameter IOutputRecordField Auto-generated interface for https://w3id.org/cwl/cwl#OutputRecordField IOutputRecordSchema Auto-generated interface for https://w3id.org/cwl/cwl#OutputRecordSchema IOutputSchema Auto-generated interface for https://w3id.org/cwl/cwl#OutputSchema IParameter Auto-generated interface for https://w3id.org/cwl/cwl#Parameter Define an input or output parameter to a process. IProcess Auto-generated interface for https://w3id.org/cwl/cwl#Process The base executable type in CWL is the Process object defined by the document. Note that the Process object is abstract and cannot be directly executed. IProcessRequirement Auto-generated interface for https://w3id.org/cwl/cwl#ProcessRequirement A process requirement declares a prerequisite that may or must be fulfilled before executing a process. See Process.hints and Process.requirements . Process requirements are the primary mechanism for specifying extensions to the CWL core specification. IRecordField Auto-generated interface for https://w3id.org/cwl/salad#RecordField A field of a record. IRecordSchema Auto-generated interface for https://w3id.org/cwl/salad#RecordSchema IResourceRequirement Auto-generated interface for https://w3id.org/cwl/cwl#ResourceRequirement Specify basic hardware resource requirements. \"min\" is the minimum amount of a resource that must be reserved to schedule a job. If \"min\" cannot be satisfied, the job should not be run. \"max\" is the maximum amount of a resource that the job shall be allocated. If a node has sufficient resources, multiple jobs may be scheduled on a single node provided each job's \"max\" resource requirements are met. If a job attempts to exceed its resource allocation, an implementation may deny additional resources, which may result in job failure. If both \"min\" and \"max\" are specified, an implementation may choose to allocate any amount between \"min\" and \"max\", with the actual allocation provided in the runtime object. If \"min\" is specified but \"max\" is not, then \"max\" == \"min\" If \"max\" is specified by \"min\" is not, then \"min\" == \"max\". It is an error if max < min. It is an error if the value of any of these fields is negative. If neither \"min\" nor \"max\" is specified for a resource, use the default values below. ISavable IScatterFeatureRequirement Auto-generated interface for https://w3id.org/cwl/cwl#ScatterFeatureRequirement Indicates that the workflow platform must support the scatter and scatterMethod fields of WorkflowStep . ISchemaDefRequirement Auto-generated interface for https://w3id.org/cwl/cwl#SchemaDefRequirement This field consists of an array of type definitions which must be used when interpreting the inputs and outputs fields. When a type field contains a IRI, the implementation must check if the type is defined in schemaDefs and use that definition. If the type is not found in schemaDefs , it is an error. The entries in schemaDefs must be processed in the order listed such that later schema definitions may refer to earlier schema definitions. Type definitions are allowed for enum and record types only. Type definitions may be shared by defining them in a file and then $include -ing them in the types field. A file can contain a list of type definitions ISecondaryFileSchema Auto-generated interface for https://w3id.org/cwl/cwl#SecondaryFileSchema Secondary files are specified using the following micro-DSL for secondary files: If the value is a string, it is transformed to an object with two fields pattern and required By default, the value of required is null (this indicates default behavior, which may be based on the context) If the value ends with a question mark ? the question mark is stripped off and the value of the field required is set to False The remaining value is assigned to the field pattern For implementation details and examples, please see this section in the Schema Salad specification. IShellCommandRequirement Auto-generated interface for https://w3id.org/cwl/cwl#ShellCommandRequirement Modify the behavior of CommandLineTool to generate a single string containing a shell command line. Each item in the arguments list must be joined into a string separated by single spaces and quoted to prevent intepretation by the shell, unless CommandLineBinding for that argument contains shellQuote: false . If shellQuote: false is specified, the argument is joined into the command string without quoting, which allows the use of shell metacharacters such as | for pipes. ISink Auto-generated interface for https://w3id.org/cwl/cwl#Sink ISoftwarePackage Auto-generated interface for https://w3id.org/cwl/cwl#SoftwarePackage ISoftwareRequirement Auto-generated interface for https://w3id.org/cwl/cwl#SoftwareRequirement A list of software packages that should be configured in the environment of the defined process. IStepInputExpressionRequirement Auto-generated interface for https://w3id.org/cwl/cwl#StepInputExpressionRequirement Indicate that the workflow platform must support the valueFrom field of WorkflowStepInput . ISubworkflowFeatureRequirement Auto-generated interface for https://w3id.org/cwl/cwl#SubworkflowFeatureRequirement Indicates that the workflow platform must support nested workflows in the run field of WorkflowStep . IToolTimeLimit Auto-generated interface for https://w3id.org/cwl/cwl#ToolTimeLimit Set an upper limit on the execution time of a CommandLineTool. A CommandLineTool whose execution duration exceeds the time limit may be preemptively terminated and considered failed. May also be used by batch systems to make scheduling decisions. The execution duration excludes external operations, such as staging of files, pulling a docker image etc, and only counts wall-time for the execution of the command line itself. IWorkflow Auto-generated interface for https://w3id.org/cwl/cwl#Workflow A workflow describes a set of steps and the dependencies between those steps. When a step produces output that will be consumed by a second step, the first step is a dependency of the second step. When there is a dependency, the workflow engine must execute the preceding step and wait for it to successfully produce output before executing the dependent step. If two steps are defined in the workflow graph that are not directly or indirectly dependent, these steps are independent , and may execute in any order or execute concurrently. A workflow is complete when all steps have been executed. Dependencies between parameters are expressed using the source field on workflow step input parameters and outputSource field on workflow output parameters . The source field on each workflow step input parameter expresses the data links that contribute to the value of the step input parameter (the \"sink\"). A workflow step can only begin execution when every data link connected to a step has been fulfilled. The outputSource field on each workflow step input parameter expresses the data links that contribute to the value of the workflow output parameter (the \"sink\"). Workflow execution cannot complete successfully until every data link connected to an output parameter has been fulfilled. Workflow success and failure A completed step must result in one of success , temporaryFailure or permanentFailure states. An implementation may choose to retry a step execution which resulted in temporaryFailure . An implementation may choose to either continue running other steps of a workflow, or terminate immediately upon permanentFailure . If any step of a workflow execution results in permanentFailure , then the workflow status is permanentFailure . If one or more steps result in temporaryFailure and all other steps complete success or are not executed, then the workflow status is temporaryFailure . If all workflow steps are executed and complete with success , then the workflow status is success . Extensions ScatterFeatureRequirement and SubworkflowFeatureRequirement are available as standard extensions to core workflow semantics. IWorkflowInputParameter Auto-generated interface for https://w3id.org/cwl/cwl#WorkflowInputParameter IWorkflowOutputParameter Auto-generated interface for https://w3id.org/cwl/cwl#WorkflowOutputParameter Describe an output parameter of a workflow. The parameter must be connected to one or more parameters defined in the workflow that will provide the value of the output parameter. It is legal to connect a WorkflowInputParameter to a WorkflowOutputParameter. See WorkflowStepInput for discussion of linkMerge and pickValue . IWorkflowStep Auto-generated interface for https://w3id.org/cwl/cwl#WorkflowStep A workflow step is an executable element of a workflow. It specifies the underlying process implementation (such as CommandLineTool or another Workflow ) in the run field and connects the input and output parameters of the underlying process to workflow parameters. Scatter/gather To use scatter/gather, ScatterFeatureRequirement must be specified in the workflow or workflow step requirements. A \"scatter\" operation specifies that the associated workflow step or subworkflow should execute separately over a list of input elements. Each job making up a scatter operation is independent and may be executed concurrently. The scatter field specifies one or more input parameters which will be scattered. An input parameter may be listed more than once. The declared type of each input parameter is implicitly becomes an array of items of the input parameter type. If a parameter is listed more than once, it becomes a nested array. As a result, upstream parameters which are connected to scattered parameters must be arrays. All output parameter types are also implicitly wrapped in arrays. Each job in the scatter results in an entry in the output array. If any scattered parameter runtime value is an empty array, all outputs are set to empty arrays and no work is done for the step, according to applicable scattering rules. If scatter declares more than one input parameter, scatterMethod describes how to decompose the input into a discrete set of jobs. dotproduct specifies that each of the input arrays are aligned and one element taken from each array to construct each job. It is an error if all input arrays are not the same length. nested_crossproduct specifies the Cartesian product of the inputs, producing a job for every combination of the scattered inputs. The output must be nested arrays for each level of scattering, in the order that the input arrays are listed in the scatter field. flat_crossproduct specifies the Cartesian product of the inputs, producing a job for every combination of the scattered inputs. The output arrays must be flattened to a single level, but otherwise listed in the order that the input arrays are listed in the scatter field. Conditional execution (Optional) Conditional execution makes execution of a step conditional on an expression. A step that is not executed is \"skipped\". A skipped step produces null for all output parameters. The condition is evaluated after scatter , using the input object of each individual scatter job. This means over a set of scatter jobs, some may be executed and some may be skipped. When the results are gathered, skipped steps must be null in the output arrays. The when field controls conditional execution. This is an expression that must be evaluated with inputs bound to the step input object (or individual scatter job), and returns a boolean value. It is an error if this expression returns a value other than true or false . Conditionals in CWL are an optional feature and are not required to be implemented by all consumers of CWL documents. An implementation that does not support conditionals must return a fatal error when attempting execute a workflow that uses conditional constructs the implementation does not support. Subworkflows To specify a nested workflow as part of a workflow step, SubworkflowFeatureRequirement must be specified in the workflow or workflow step requirements. It is a fatal error if a workflow directly or indirectly invokes itself as a subworkflow (recursive workflows are not allowed). IWorkflowStepInput Auto-generated interface for https://w3id.org/cwl/cwl#WorkflowStepInput The input of a workflow step connects an upstream parameter (from the workflow inputs, or the outputs of other workflows steps) with the input parameters of the process specified by the run field. Only input parameters declared by the target process will be passed through at runtime to the process though additonal parameters may be specified (for use within valueFrom expressions for instance) - unconnected or unused parameters do not represent an error condition. Input object A WorkflowStepInput object must contain an id field in the form #fieldname or #prefix/fieldname . When the id field contains a slash / the field name consists of the characters following the final slash (the prefix portion may contain one or more slashes to indicate scope). This defines a field of the workflow step input object with the value of the source parameter(s). Merging multiple inbound data links To merge multiple inbound data links, MultipleInputFeatureRequirement must be specified in the workflow or workflow step requirements. If the sink parameter is an array, or named in a workflow scatter operation, there may be multiple inbound data links listed in the source field. The values from the input links are merged depending on the method specified in the linkMerge field. If both linkMerge and pickValue are null or not specified, and there is more than one element in the source array, the default method is \"merge_nested\". If both linkMerge and pickValue are null or not specified, and there is only a single element in the source , then the input parameter takes the scalar value from the single input link (it is not wrapped in a single-list). merge_nested The input must be an array consisting of exactly one entry for each input link. If \"merge_nested\" is specified with a single link, the value from the link must be wrapped in a single-item list. merge_flattened The source and sink parameters must be compatible types, or the source type must be compatible with single element from the \"items\" type of the destination array parameter. Source parameters which are arrays are concatenated. Source parameters which are single element types are appended as single elements. Picking non-null values among inbound data links If present, pickValue specifies how to picking non-null values among inbound data links. pickValue is evaluated Once all source values from upstream step or parameters are available. After linkMerge . Before scatter or valueFrom . This is specifically intended to be useful in combination with conditional execution , where several upstream steps may be connected to a single input ( source is a list), and skipped steps produce null values. Static type checkers should check for type consistency after infering what the type will be after pickValue is applied, just as they do currently for linkMerge . first_non_null For the first level of a list input, pick the first non-null element. The result is a scalar. It is an error if there is no non-null element. Examples: [null, x, null, y] -> x [null, [null], null, y] -> [null] [null, null, null] -> Runtime Error Intended use case : If-else pattern where the value comes either from a conditional step or from a default or fallback value. The conditional step(s) should be placed first in the list. the_only_non_null For the first level of a list input, pick the single non-null element. The result is a scalar. It is an error if there is more than one non-null element. Examples: [null, x, null] -> x [null, x, null, y] -> Runtime Error [null, [null], null] -> [null] [null, null, null] -> Runtime Error Intended use case : Switch type patterns where developer considers more than one active code path as a workflow error (possibly indicating an error in writing when condition expressions). all_non_null For the first level of a list input, pick all non-null values. The result is a list, which may be empty. Examples: [null, x, null] -> [x] [x, null, y] -> [x, y] [null, [x], [null]] -> [[x], [null]] [null, null, null] -> [] Intended use case : It is valid to have more than one source, but sources are conditional, so null sources (from skipped steps) should be filtered out. IWorkflowStepOutput Auto-generated interface for https://w3id.org/cwl/cwl#WorkflowStepOutput Associate an output parameter of the underlying process with a workflow parameter. The workflow parameter (given in the id field) be may be used as a source to connect with input parameters of other workflow steps, or with an output parameter of the process. A unique identifier for this workflow output parameter. This is the identifier to use in the source field of WorkflowStepInput to connect the output value to downstream parameters. IWorkReuse Auto-generated interface for https://w3id.org/cwl/cwl#WorkReuse For implementations that support reusing output from past work (on the assumption that same code and same input produce same results), control whether to enable or disable the reuse behavior for a particular tool or step (to accomodate situations where that assumption is incorrect). A reused step is not executed but instead returns the same output as the original execution. If WorkReuse is not specified, correct tools should assume it is enabled by default."
  },
  "reference/CWLDotNet.IArraySchema.html": {
    "href": "reference/CWLDotNet.IArraySchema.html",
    "title": "Interface IArraySchema | Documentation",
    "keywords": "Interface IArraySchema Auto-generated interface for https://w3id.org/cwl/salad#ArraySchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IArraySchema"
  },
  "reference/CWLDotNet.ICommandInputArraySchema.html": {
    "href": "reference/CWLDotNet.ICommandInputArraySchema.html",
    "title": "Interface ICommandInputArraySchema | Documentation",
    "keywords": "Interface ICommandInputArraySchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandInputArraySchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandInputArraySchema : IInputArraySchema, IArraySchema, IInputSchema, IIOSchema, ILabeled, IDocumented, ICommandInputSchema, ICommandLineBindable"
  },
  "reference/CWLDotNet.ICommandInputEnumSchema.html": {
    "href": "reference/CWLDotNet.ICommandInputEnumSchema.html",
    "title": "Interface ICommandInputEnumSchema | Documentation",
    "keywords": "Interface ICommandInputEnumSchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandInputEnumSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandInputEnumSchema : IInputEnumSchema, IEnumSchema, IInputSchema, IIOSchema, ILabeled, IDocumented, ICommandInputSchema, ICommandLineBindable"
  },
  "reference/CWLDotNet.ICommandInputParameter.html": {
    "href": "reference/CWLDotNet.ICommandInputParameter.html",
    "title": "Interface ICommandInputParameter | Documentation",
    "keywords": "Interface ICommandInputParameter Auto-generated interface for https://w3id.org/cwl/cwl#CommandInputParameter An input parameter for a CommandLineTool. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandInputParameter : IInputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IInputFormat, ILoadContents"
  },
  "reference/CWLDotNet.ICommandInputRecordField.html": {
    "href": "reference/CWLDotNet.ICommandInputRecordField.html",
    "title": "Interface ICommandInputRecordField | Documentation",
    "keywords": "Interface ICommandInputRecordField Auto-generated interface for https://w3id.org/cwl/cwl#CommandInputRecordField Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandInputRecordField : IInputRecordField, IRecordField, IDocumented, IFieldBase, ILabeled, IInputFormat, ILoadContents, ICommandLineBindable"
  },
  "reference/CWLDotNet.ICommandInputRecordSchema.html": {
    "href": "reference/CWLDotNet.ICommandInputRecordSchema.html",
    "title": "Interface ICommandInputRecordSchema | Documentation",
    "keywords": "Interface ICommandInputRecordSchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandInputRecordSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandInputRecordSchema : IInputRecordSchema, IRecordSchema, IInputSchema, IIOSchema, ILabeled, IDocumented, ICommandInputSchema, ICommandLineBindable"
  },
  "reference/CWLDotNet.ICommandInputSchema.html": {
    "href": "reference/CWLDotNet.ICommandInputSchema.html",
    "title": "Interface ICommandInputSchema | Documentation",
    "keywords": "Interface ICommandInputSchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandInputSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandInputSchema"
  },
  "reference/CWLDotNet.ICommandLineBindable.html": {
    "href": "reference/CWLDotNet.ICommandLineBindable.html",
    "title": "Interface ICommandLineBindable | Documentation",
    "keywords": "Interface ICommandLineBindable Auto-generated interface for https://w3id.org/cwl/cwl#CommandLineBindable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandLineBindable"
  },
  "reference/CWLDotNet.ICommandLineBinding.html": {
    "href": "reference/CWLDotNet.ICommandLineBinding.html",
    "title": "Interface ICommandLineBinding | Documentation",
    "keywords": "Interface ICommandLineBinding Auto-generated interface for https://w3id.org/cwl/cwl#CommandLineBinding When listed under inputBinding in the input schema, the term \"value\" refers to the the corresponding value in the input object. For binding objects listed in CommandLineTool.arguments , the term \"value\" refers to the effective value after evaluating valueFrom . The binding behavior when building the command line depends on the data type of the value. If there is a mismatch between the type described by the input schema and the effective value, such as resulting from an expression evaluation, an implementation must use the data type of the effective value. string : Add prefix and the string to the command line. number : Add prefix and decimal representation to command line. boolean : If true, add prefix to the command line. If false, add nothing. File : Add prefix and the value of File.path to the command line. Directory : Add prefix and the value of Directory.path to the command line. array : If itemSeparator is specified, add prefix and the join the array into a single string with itemSeparator separating the items. Otherwise first add prefix , then recursively process individual elements. If the array is empty, it does not add anything to command line. object : Add prefix only, and recursively add object fields for which inputBinding is specified. null : Add nothing. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandLineBinding : IInputBinding"
  },
  "reference/CWLDotNet.ICommandLineTool.html": {
    "href": "reference/CWLDotNet.ICommandLineTool.html",
    "title": "Interface ICommandLineTool | Documentation",
    "keywords": "Interface ICommandLineTool Auto-generated interface for https://w3id.org/cwl/cwl#CommandLineTool This defines the schema of the CWL Command Line Tool Description document. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandLineTool : IProcess, IIdentified, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.ICommandOutputArraySchema.html": {
    "href": "reference/CWLDotNet.ICommandOutputArraySchema.html",
    "title": "Interface ICommandOutputArraySchema | Documentation",
    "keywords": "Interface ICommandOutputArraySchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandOutputArraySchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandOutputArraySchema : IOutputArraySchema, IArraySchema, IOutputSchema, IIOSchema, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.ICommandOutputBinding.html": {
    "href": "reference/CWLDotNet.ICommandOutputBinding.html",
    "title": "Interface ICommandOutputBinding | Documentation",
    "keywords": "Interface ICommandOutputBinding Auto-generated interface for https://w3id.org/cwl/cwl#CommandOutputBinding Describes how to generate an output parameter based on the files produced by a CommandLineTool. The output parameter value is generated by applying these operations in the following order: glob loadContents outputEval secondaryFiles Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandOutputBinding : ILoadContents"
  },
  "reference/CWLDotNet.ICommandOutputEnumSchema.html": {
    "href": "reference/CWLDotNet.ICommandOutputEnumSchema.html",
    "title": "Interface ICommandOutputEnumSchema | Documentation",
    "keywords": "Interface ICommandOutputEnumSchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandOutputEnumSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandOutputEnumSchema : IOutputEnumSchema, IEnumSchema, IOutputSchema, IIOSchema, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.ICommandOutputParameter.html": {
    "href": "reference/CWLDotNet.ICommandOutputParameter.html",
    "title": "Interface ICommandOutputParameter | Documentation",
    "keywords": "Interface ICommandOutputParameter Auto-generated interface for https://w3id.org/cwl/cwl#CommandOutputParameter An output parameter for a CommandLineTool. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandOutputParameter : IOutputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IOutputFormat"
  },
  "reference/CWLDotNet.ICommandOutputRecordField.html": {
    "href": "reference/CWLDotNet.ICommandOutputRecordField.html",
    "title": "Interface ICommandOutputRecordField | Documentation",
    "keywords": "Interface ICommandOutputRecordField Auto-generated interface for https://w3id.org/cwl/cwl#CommandOutputRecordField Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandOutputRecordField : IOutputRecordField, IRecordField, IDocumented, IFieldBase, ILabeled, IOutputFormat"
  },
  "reference/CWLDotNet.ICommandOutputRecordSchema.html": {
    "href": "reference/CWLDotNet.ICommandOutputRecordSchema.html",
    "title": "Interface ICommandOutputRecordSchema | Documentation",
    "keywords": "Interface ICommandOutputRecordSchema Auto-generated interface for https://w3id.org/cwl/cwl#CommandOutputRecordSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ICommandOutputRecordSchema : IOutputRecordSchema, IRecordSchema, IOutputSchema, IIOSchema, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IDirectory.html": {
    "href": "reference/CWLDotNet.IDirectory.html",
    "title": "Interface IDirectory | Documentation",
    "keywords": "Interface IDirectory Auto-generated interface for https://w3id.org/cwl/cwl#Directory Represents a directory to present to a command line tool. Directories are represented as objects with class of Directory . Directory objects have a number of properties that provide metadata about the directory. The location property of a Directory is a URI that uniquely identifies the directory. Implementations must support the file:// URI scheme and may support other schemes such as http://. Alternately to location , implementations must also accept the path property on Directory, which must be a filesystem path available on the same host as the CWL runner (for inputs) or the runtime environment of a command line tool execution (for command line tool outputs). A Directory object may have a listing field. This is a list of File and Directory objects that are contained in the Directory. For each entry in listing , the basename property defines the name of the File or Subdirectory when staged to disk. If listing is not provided, the implementation must have some way of fetching the Directory listing at runtime based on the location field. If a Directory does not have location , it is a Directory literal. A Directory literal must provide listing . Directory literals must be created on disk at runtime as needed. The resources in a Directory literal do not need to have any implied relationship in their location . For example, a Directory listing may contain two files located on different hosts. It is the responsibility of the runtime to ensure that those files are staged to disk appropriately. Secondary files associated with files in listing must also be staged to the same Directory. When executing a CommandLineTool, Directories must be recursively staged first and have local values of path assigend. Directory objects in CommandLineTool output must provide either a location URI or a path property in the context of the tool execution runtime (local to the compute node, or within the executing container). An ExpressionTool may forward file references from input to output by using the same value for location . Name conflicts (the same basename appearing multiple times in listing or in any entry in secondaryFiles in the listing) is a fatal error. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IDirectory"
  },
  "reference/CWLDotNet.IDirent.html": {
    "href": "reference/CWLDotNet.IDirent.html",
    "title": "Interface IDirent | Documentation",
    "keywords": "Interface IDirent Auto-generated interface for https://w3id.org/cwl/cwl#Dirent Define a file or subdirectory that must be staged to a particular place prior to executing the command line tool. May be the result of executing an expression, such as building a configuration file from a template. Usually files are staged within the designated output directory . However, under certain circumstances, files may be staged at arbitrary locations, see discussion for entryname . Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IDirent"
  },
  "reference/CWLDotNet.IDockerRequirement.html": {
    "href": "reference/CWLDotNet.IDockerRequirement.html",
    "title": "Interface IDockerRequirement | Documentation",
    "keywords": "Interface IDockerRequirement Auto-generated interface for https://w3id.org/cwl/cwl#DockerRequirement Indicates that a workflow component should be run in a Docker or Docker-compatible (such as Singularity and udocker ) container environment and specifies how to fetch or build the image. If a CommandLineTool lists DockerRequirement under hints (or requirements ), it may (or must) be run in the specified Docker container. The platform must first acquire or install the correct Docker image as specified by dockerPull , dockerImport , dockerLoad or dockerFile . The platform must execute the tool in the container using docker run with the appropriate Docker image and tool command line. The workflow platform may provide input files and the designated output directory through the use of volume bind mounts. The platform should rewrite file paths in the input object to correspond to the Docker bind mounted locations. That is, the platform should rewrite values in the parameter context such as runtime.outdir , runtime.tmpdir and others to be valid paths within the container. The platform must ensure that runtime.outdir and runtime.tmpdir are distinct directories. When running a tool contained in Docker, the workflow platform must not assume anything about the contents of the Docker container, such as the presence or absence of specific software, except to assume that the generated command line represents a valid command within the runtime environment of the container. A container image may specify an ENTRYPOINT and/or CMD . Command line arguments will be appended after all elements of ENTRYPOINT, and will override all elements specified using CMD (in other words, CMD is only used when the CommandLineTool definition produces an empty command line). Use of implicit ENTRYPOINT or CMD are discouraged due to reproducibility concerns of the implicit hidden execution point (For further discussion, see https://doi.org/10.12688/f1000research.15140.1 ). Portable CommandLineTool wrappers in which use of a container is optional must not rely on ENTRYPOINT or CMD. CommandLineTools which do rely on ENTRYPOINT or CMD must list DockerRequirement in the requirements section. Interaction with other requirements If EnvVarRequirement is specified alongside a DockerRequirement, the environment variables must be provided to Docker using --env or --env-file and interact with the container's preexisting environment as defined by Docker. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IDockerRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.IDocumented.html": {
    "href": "reference/CWLDotNet.IDocumented.html",
    "title": "Interface IDocumented | Documentation",
    "keywords": "Interface IDocumented Auto-generated interface for https://w3id.org/cwl/salad#Documented Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IDocumented"
  },
  "reference/CWLDotNet.IEnumClass.html": {
    "href": "reference/CWLDotNet.IEnumClass.html",
    "title": "Interface IEnumClass | Documentation",
    "keywords": "Interface IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IEnumClass"
  },
  "reference/CWLDotNet.IEnumClass-1.html": {
    "href": "reference/CWLDotNet.IEnumClass-1.html",
    "title": "Interface IEnumClass<T> | Documentation",
    "keywords": "Interface IEnumClass<T> Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IEnumClass<T> : IEnumClass Type Parameters Name Description T Methods Contains(String) Declaration static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration static T Parse(string value) Parameters Type Name Description System.String value Returns Type Description T Symbols() Declaration static List<string> Symbols() Returns Type Description List < System.String >"
  },
  "reference/CWLDotNet.IEnumSchema.html": {
    "href": "reference/CWLDotNet.IEnumSchema.html",
    "title": "Interface IEnumSchema | Documentation",
    "keywords": "Interface IEnumSchema Auto-generated interface for https://w3id.org/cwl/salad#EnumSchema Define an enumerated type. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IEnumSchema"
  },
  "reference/CWLDotNet.IEnvironmentDef.html": {
    "href": "reference/CWLDotNet.IEnvironmentDef.html",
    "title": "Interface IEnvironmentDef | Documentation",
    "keywords": "Interface IEnvironmentDef Auto-generated interface for https://w3id.org/cwl/cwl#EnvironmentDef Define an environment variable that will be set in the runtime environment by the workflow platform when executing the command line tool. May be the result of executing an expression, such as getting a parameter from input. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IEnvironmentDef"
  },
  "reference/CWLDotNet.IEnvVarRequirement.html": {
    "href": "reference/CWLDotNet.IEnvVarRequirement.html",
    "title": "Interface IEnvVarRequirement | Documentation",
    "keywords": "Interface IEnvVarRequirement Auto-generated interface for https://w3id.org/cwl/cwl#EnvVarRequirement Define a list of environment variables which will be set in the execution environment of the tool. See EnvironmentDef for details. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IEnvVarRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.IExpressionTool.html": {
    "href": "reference/CWLDotNet.IExpressionTool.html",
    "title": "Interface IExpressionTool | Documentation",
    "keywords": "Interface IExpressionTool Auto-generated interface for https://w3id.org/cwl/cwl#ExpressionTool An ExpressionTool is a type of Process object that can be run by itself or as a Workflow step. It executes a pure Javascript expression that has access to the same input parameters as a workflow. It is meant to be used sparingly as a way to isolate complex Javascript expressions that need to operate on input data and produce some result; perhaps just a rearrangement of the inputs. No Docker software container is required or allowed. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IExpressionTool : IProcess, IIdentified, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IExpressionToolOutputParameter.html": {
    "href": "reference/CWLDotNet.IExpressionToolOutputParameter.html",
    "title": "Interface IExpressionToolOutputParameter | Documentation",
    "keywords": "Interface IExpressionToolOutputParameter Auto-generated interface for https://w3id.org/cwl/cwl#ExpressionToolOutputParameter Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IExpressionToolOutputParameter : IOutputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IOutputFormat"
  },
  "reference/CWLDotNet.IFetcher.html": {
    "href": "reference/CWLDotNet.IFetcher.html",
    "title": "Interface IFetcher | Documentation",
    "keywords": "Interface IFetcher Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IFetcher Fields Schemes Declaration protected static readonly string[] Schemes Field Value Type Description System.String [] Methods CheckExists(String) Declaration bool CheckExists(string uri) Parameters Type Name Description System.String uri Returns Type Description System.Boolean FetchText(String) Declaration string FetchText(string uri) Parameters Type Name Description System.String uri Returns Type Description System.String Urljoin(String, String) Declaration string Urljoin(string baseUrl, string url) Parameters Type Name Description System.String baseUrl System.String url Returns Type Description System.String"
  },
  "reference/CWLDotNet.IFieldBase.html": {
    "href": "reference/CWLDotNet.IFieldBase.html",
    "title": "Interface IFieldBase | Documentation",
    "keywords": "Interface IFieldBase Auto-generated interface for https://w3id.org/cwl/cwl#FieldBase Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IFieldBase : ILabeled"
  },
  "reference/CWLDotNet.IFile.html": {
    "href": "reference/CWLDotNet.IFile.html",
    "title": "Interface IFile | Documentation",
    "keywords": "Interface IFile Auto-generated interface for https://w3id.org/cwl/cwl#File Represents a file (or group of files when secondaryFiles is provided) that will be accessible by tools using standard POSIX file system call API such as open(2) and read(2). Files are represented as objects with class of File . File objects have a number of properties that provide metadata about the file. The location property of a File is a URI that uniquely identifies the file. Implementations must support the file:// URI scheme and may support other schemes such as http:// and https:// . The value of location may also be a relative reference, in which case it must be resolved relative to the URI of the document it appears in. Alternately to location , implementations must also accept the path property on File, which must be a filesystem path available on the same host as the CWL runner (for inputs) or the runtime environment of a command line tool execution (for command line tool outputs). If no location or path is specified, a file object must specify contents with the UTF-8 text content of the file. This is a \"file literal\". File literals do not correspond to external resources, but are created on disk with contents with when needed for a executing a tool. Where appropriate, expressions can return file literals to define new files on a runtime. The maximum size of contents is 64 kilobytes. The basename property defines the filename on disk where the file is staged. This may differ from the resource name. If not provided, basename must be computed from the last path part of location and made available to expressions. The secondaryFiles property is a list of File or Directory objects that must be staged in the same directory as the primary file. It is an error for file names to be duplicated in secondaryFiles . The size property is the size in bytes of the File. It must be computed from the resource and made available to expressions. The checksum field contains a cryptographic hash of the file content for use it verifying file contents. Implementations may, at user option, enable or disable computation of the checksum field for performance or other reasons. However, the ability to compute output checksums is required to pass the CWL conformance test suite. When executing a CommandLineTool, the files and secondary files may be staged to an arbitrary directory, but must use the value of basename for the filename. The path property must be file path in the context of the tool execution runtime (local to the compute node, or within the executing container). All computed properties should be available to expressions. File literals also must be staged and path must be set. When collecting CommandLineTool outputs, glob matching returns file paths (with the path property) and the derived properties. This can all be modified by outputEval . Alternately, if the file cwl.output.json is present in the output, outputBinding is ignored. File objects in the output must provide either a location URI or a path property in the context of the tool execution runtime (local to the compute node, or within the executing container). When evaluating an ExpressionTool, file objects must be referenced via location (the expression tool does not have access to files on disk so path is meaningless) or as file literals. It is legal to return a file object with an existing location but a different basename . The loadContents field of ExpressionTool inputs behaves the same as on CommandLineTool inputs, however it is not meaningful on the outputs. An ExpressionTool may forward file references from input to output by using the same value for location . Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IFile"
  },
  "reference/CWLDotNet.IIdentified.html": {
    "href": "reference/CWLDotNet.IIdentified.html",
    "title": "Interface IIdentified | Documentation",
    "keywords": "Interface IIdentified Auto-generated interface for https://w3id.org/cwl/cwl#Identified Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IIdentified"
  },
  "reference/CWLDotNet.IInitialWorkDirRequirement.html": {
    "href": "reference/CWLDotNet.IInitialWorkDirRequirement.html",
    "title": "Interface IInitialWorkDirRequirement | Documentation",
    "keywords": "Interface IInitialWorkDirRequirement Auto-generated interface for https://w3id.org/cwl/cwl#InitialWorkDirRequirement Define a list of files and subdirectories that must be staged by the workflow platform prior to executing the command line tool. Normally files are staged within the designated output directory. However, when running inside containers, files may be staged at arbitrary locations, see discussion for Dirent.entryname . Together with DockerRequirement.dockerOutputDirectory it is possible to control the locations of both input and output files when running in containers. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IInitialWorkDirRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.IInlineJavascriptRequirement.html": {
    "href": "reference/CWLDotNet.IInlineJavascriptRequirement.html",
    "title": "Interface IInlineJavascriptRequirement | Documentation",
    "keywords": "Interface IInlineJavascriptRequirement Auto-generated interface for https://w3id.org/cwl/cwl#InlineJavascriptRequirement Indicates that the workflow platform must support inline Javascript expressions. If this requirement is not present, the workflow platform must not perform expression interpolatation. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IInlineJavascriptRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.IInplaceUpdateRequirement.html": {
    "href": "reference/CWLDotNet.IInplaceUpdateRequirement.html",
    "title": "Interface IInplaceUpdateRequirement | Documentation",
    "keywords": "Interface IInplaceUpdateRequirement Auto-generated interface for https://w3id.org/cwl/cwl#InplaceUpdateRequirement If inplaceUpdate is true, then an implementation supporting this feature may permit tools to directly update files with writable: true in InitialWorkDirRequirement. That is, as an optimization, files may be destructively modified in place as opposed to copied and updated. An implementation must ensure that only one workflow step may access a writable file at a time. It is an error if a file which is writable by one workflow step file is accessed (for reading or writing) by any other workflow step running independently. However, a file which has been updated in a previous completed step may be used as input to multiple steps, provided it is read-only in every step. Workflow steps which modify a file must produce the modified file as output. Downstream steps which futher process the file must use the output of previous steps, and not refer to a common input (this is necessary for both ordering and correctness). Workflow authors should provide this in the hints section. The intent of this feature is that workflows produce the same results whether or not InplaceUpdateRequirement is supported by the implementation, and this feature is primarily available as an optimization for particular environments. Users and implementers should be aware that workflows that destructively modify inputs may not be repeatable or reproducible. In particular, enabling this feature implies that WorkReuse should not be enabled. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IInplaceUpdateRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.IInputArraySchema.html": {
    "href": "reference/CWLDotNet.IInputArraySchema.html",
    "title": "Interface IInputArraySchema | Documentation",
    "keywords": "Interface IInputArraySchema Auto-generated interface for https://w3id.org/cwl/cwl#InputArraySchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IInputArraySchema : IArraySchema, IInputSchema, IIOSchema, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IInputBinding.html": {
    "href": "reference/CWLDotNet.IInputBinding.html",
    "title": "Interface IInputBinding | Documentation",
    "keywords": "Interface IInputBinding Auto-generated interface for https://w3id.org/cwl/cwl#InputBinding Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IInputBinding"
  },
  "reference/CWLDotNet.IInputEnumSchema.html": {
    "href": "reference/CWLDotNet.IInputEnumSchema.html",
    "title": "Interface IInputEnumSchema | Documentation",
    "keywords": "Interface IInputEnumSchema Auto-generated interface for https://w3id.org/cwl/cwl#InputEnumSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IInputEnumSchema : IEnumSchema, IInputSchema, IIOSchema, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IInputFormat.html": {
    "href": "reference/CWLDotNet.IInputFormat.html",
    "title": "Interface IInputFormat | Documentation",
    "keywords": "Interface IInputFormat Auto-generated interface for https://w3id.org/cwl/cwl#InputFormat Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IInputFormat"
  },
  "reference/CWLDotNet.IInputParameter.html": {
    "href": "reference/CWLDotNet.IInputParameter.html",
    "title": "Interface IInputParameter | Documentation",
    "keywords": "Interface IInputParameter Auto-generated interface for https://w3id.org/cwl/cwl#InputParameter Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IInputParameter : IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IInputFormat, ILoadContents"
  },
  "reference/CWLDotNet.IInputRecordField.html": {
    "href": "reference/CWLDotNet.IInputRecordField.html",
    "title": "Interface IInputRecordField | Documentation",
    "keywords": "Interface IInputRecordField Auto-generated interface for https://w3id.org/cwl/cwl#InputRecordField Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IInputRecordField : IRecordField, IDocumented, IFieldBase, ILabeled, IInputFormat, ILoadContents"
  },
  "reference/CWLDotNet.IInputRecordSchema.html": {
    "href": "reference/CWLDotNet.IInputRecordSchema.html",
    "title": "Interface IInputRecordSchema | Documentation",
    "keywords": "Interface IInputRecordSchema Auto-generated interface for https://w3id.org/cwl/cwl#InputRecordSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IInputRecordSchema : IRecordSchema, IInputSchema, IIOSchema, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IInputSchema.html": {
    "href": "reference/CWLDotNet.IInputSchema.html",
    "title": "Interface IInputSchema | Documentation",
    "keywords": "Interface IInputSchema Auto-generated interface for https://w3id.org/cwl/cwl#InputSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IInputSchema : IIOSchema, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IIOSchema.html": {
    "href": "reference/CWLDotNet.IIOSchema.html",
    "title": "Interface IIOSchema | Documentation",
    "keywords": "Interface IIOSchema Auto-generated interface for https://w3id.org/cwl/cwl#IOSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IIOSchema : ILabeled, IDocumented"
  },
  "reference/CWLDotNet.ILabeled.html": {
    "href": "reference/CWLDotNet.ILabeled.html",
    "title": "Interface ILabeled | Documentation",
    "keywords": "Interface ILabeled Auto-generated interface for https://w3id.org/cwl/cwl#Labeled Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ILabeled"
  },
  "reference/CWLDotNet.ILoadContents.html": {
    "href": "reference/CWLDotNet.ILoadContents.html",
    "title": "Interface ILoadContents | Documentation",
    "keywords": "Interface ILoadContents Auto-generated interface for https://w3id.org/cwl/cwl#LoadContents Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ILoadContents"
  },
  "reference/CWLDotNet.ILoadListingRequirement.html": {
    "href": "reference/CWLDotNet.ILoadListingRequirement.html",
    "title": "Interface ILoadListingRequirement | Documentation",
    "keywords": "Interface ILoadListingRequirement Auto-generated interface for https://w3id.org/cwl/cwl#LoadListingRequirement Specify the desired behavior for loading the listing field of a Directory object for use by expressions. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ILoadListingRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.IMultipleInputFeatureRequirement.html": {
    "href": "reference/CWLDotNet.IMultipleInputFeatureRequirement.html",
    "title": "Interface IMultipleInputFeatureRequirement | Documentation",
    "keywords": "Interface IMultipleInputFeatureRequirement Auto-generated interface for https://w3id.org/cwl/cwl#MultipleInputFeatureRequirement Indicates that the workflow platform must support multiple inbound data links listed in the source field of WorkflowStepInput . Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IMultipleInputFeatureRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.INetworkAccess.html": {
    "href": "reference/CWLDotNet.INetworkAccess.html",
    "title": "Interface INetworkAccess | Documentation",
    "keywords": "Interface INetworkAccess Auto-generated interface for https://w3id.org/cwl/cwl#NetworkAccess Indicate whether a process requires outgoing IPv4/IPv6 network access. Choice of IPv4 or IPv6 is implementation and site specific, correct tools must support both. If networkAccess is false or not specified, tools must not assume network access, except for localhost (the loopback device). If networkAccess is true, the tool must be able to make outgoing connections to network resources. Resources may be on a private subnet or the public Internet. However, implementations and sites may apply their own security policies to restrict what is accessible by the tool. Enabling network access does not imply a publically routable IP address or the ability to accept inbound connections. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface INetworkAccess : IProcessRequirement"
  },
  "reference/CWLDotNet.InitialWorkDirRequirement.html": {
    "href": "reference/CWLDotNet.InitialWorkDirRequirement.html",
    "title": "Class InitialWorkDirRequirement | Documentation",
    "keywords": "Class InitialWorkDirRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#InitialWorkDirRequirement Define a list of files and subdirectories that must be staged by the workflow platform prior to executing the command line tool. Normally files are staged within the designated output directory. However, when running inside containers, files may be staged at arbitrary locations, see discussion for Dirent.entryname . Together with DockerRequirement.dockerOutputDirectory it is possible to control the locations of both input and output files when running in containers. Inheritance System.Object InitialWorkDirRequirement Implements IInitialWorkDirRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class InitialWorkDirRequirement : IInitialWorkDirRequirement, IProcessRequirement, ISavable Constructors InitialWorkDirRequirement(OneOf<String, List<OneOf<None, Dirent, String, File, Directory, List<OneOf<File, Directory>>>>>, InitialWorkDirRequirement_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public InitialWorkDirRequirement(OneOf<string, List<OneOf<None, Dirent, string, File, Directory, List<OneOf<File, Directory>>>>> listing, InitialWorkDirRequirement_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < System.String , List < OneOf.OneOf < OneOf.Types.None , Dirent , System.String , File , Directory , List < OneOf.OneOf < File , Directory >>>>> listing InitialWorkDirRequirement_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ InitialWorkDirRequirement Declaration public InitialWorkDirRequirement_class class_ { get; set; } Property Value Type Description InitialWorkDirRequirement_class listing The list of files or subdirectories that must be staged prior to executing the command line tool. Return type of each expression must validate as [&quot;null&quot;, File, Directory, Dirent, {type: array, items: [File, Directory]}] . Each File or Directory that is returned by an Expression must be added to the designated output directory prior to executing the tool. Each Dirent record that is listed or returned by an expression specifies a file to be created or staged in the designated output directory prior to executing the tool. Expressions may return null, in which case they have no effect. Files or Directories which are listed in the input parameters and appear in the InitialWorkDirRequirement listing must have their path set to their staged location. If the same File or Directory appears more than once in the InitialWorkDirRequirement listing, the implementation must choose exactly one value for path ; how this value is chosen is undefined. Declaration public OneOf<string, List<OneOf<None, Dirent, string, File, Directory, List<OneOf<File, Directory>>>>> listing { get; set; } Property Value Type Description OneOf.OneOf < System.String , List < OneOf.OneOf < OneOf.Types.None , Dirent , System.String , File , Directory , List < OneOf.OneOf < File , Directory >>>>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IInitialWorkDirRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.InitialWorkDirRequirement_class.html": {
    "href": "reference/CWLDotNet.InitialWorkDirRequirement_class.html",
    "title": "Class InitialWorkDirRequirement_class | Documentation",
    "keywords": "Class InitialWorkDirRequirement_class Inheritance System.Object InitialWorkDirRequirement_class Implements IEnumClass < InitialWorkDirRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class InitialWorkDirRequirement_class : IEnumClass<InitialWorkDirRequirement_class>, IEnumClass Fields INITIALWORKDIRREQUIREMENT Declaration public static readonly InitialWorkDirRequirement_class INITIALWORKDIRREQUIREMENT Field Value Type Description InitialWorkDirRequirement_class Properties Members Declaration public static IList<InitialWorkDirRequirement_class> Members { get; } Property Value Type Description IList < InitialWorkDirRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static InitialWorkDirRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description InitialWorkDirRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.InlineJavascriptRequirement.html": {
    "href": "reference/CWLDotNet.InlineJavascriptRequirement.html",
    "title": "Class InlineJavascriptRequirement | Documentation",
    "keywords": "Class InlineJavascriptRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#InlineJavascriptRequirement Indicates that the workflow platform must support inline Javascript expressions. If this requirement is not present, the workflow platform must not perform expression interpolatation. Inheritance System.Object InlineJavascriptRequirement Implements IInlineJavascriptRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class InlineJavascriptRequirement : IInlineJavascriptRequirement, IProcessRequirement, ISavable Constructors InlineJavascriptRequirement(InlineJavascriptRequirement_class, OneOf<None, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public InlineJavascriptRequirement(InlineJavascriptRequirement_class class_ = null, OneOf<None, List<string>> expressionLib = default(OneOf<None, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description InlineJavascriptRequirement_class class_ OneOf.OneOf < OneOf.Types.None , List < System.String >> expressionLib LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'InlineJavascriptRequirement' Declaration public InlineJavascriptRequirement_class class_ { get; set; } Property Value Type Description InlineJavascriptRequirement_class expressionLib Additional code fragments that will also be inserted before executing the expression code. Allows for function definitions that may be called from CWL expressions. Declaration public OneOf<None, List<string>> expressionLib { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.String >> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IInlineJavascriptRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.InlineJavascriptRequirement_class.html": {
    "href": "reference/CWLDotNet.InlineJavascriptRequirement_class.html",
    "title": "Class InlineJavascriptRequirement_class | Documentation",
    "keywords": "Class InlineJavascriptRequirement_class Inheritance System.Object InlineJavascriptRequirement_class Implements IEnumClass < InlineJavascriptRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class InlineJavascriptRequirement_class : IEnumClass<InlineJavascriptRequirement_class>, IEnumClass Fields INLINEJAVASCRIPTREQUIREMENT Declaration public static readonly InlineJavascriptRequirement_class INLINEJAVASCRIPTREQUIREMENT Field Value Type Description InlineJavascriptRequirement_class Properties Members Declaration public static IList<InlineJavascriptRequirement_class> Members { get; } Property Value Type Description IList < InlineJavascriptRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static InlineJavascriptRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description InlineJavascriptRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.InplaceUpdateRequirement.html": {
    "href": "reference/CWLDotNet.InplaceUpdateRequirement.html",
    "title": "Class InplaceUpdateRequirement | Documentation",
    "keywords": "Class InplaceUpdateRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#InplaceUpdateRequirement If inplaceUpdate is true, then an implementation supporting this feature may permit tools to directly update files with writable: true in InitialWorkDirRequirement. That is, as an optimization, files may be destructively modified in place as opposed to copied and updated. An implementation must ensure that only one workflow step may access a writable file at a time. It is an error if a file which is writable by one workflow step file is accessed (for reading or writing) by any other workflow step running independently. However, a file which has been updated in a previous completed step may be used as input to multiple steps, provided it is read-only in every step. Workflow steps which modify a file must produce the modified file as output. Downstream steps which futher process the file must use the output of previous steps, and not refer to a common input (this is necessary for both ordering and correctness). Workflow authors should provide this in the hints section. The intent of this feature is that workflows produce the same results whether or not InplaceUpdateRequirement is supported by the implementation, and this feature is primarily available as an optimization for particular environments. Users and implementers should be aware that workflows that destructively modify inputs may not be repeatable or reproducible. In particular, enabling this feature implies that WorkReuse should not be enabled. Inheritance System.Object InplaceUpdateRequirement Implements IInplaceUpdateRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class InplaceUpdateRequirement : IInplaceUpdateRequirement, IProcessRequirement, ISavable Constructors InplaceUpdateRequirement(Boolean, InplaceUpdateRequirement_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public InplaceUpdateRequirement(bool inplaceUpdate, InplaceUpdateRequirement_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description System.Boolean inplaceUpdate InplaceUpdateRequirement_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'InplaceUpdateRequirement' Declaration public InplaceUpdateRequirement_class class_ { get; set; } Property Value Type Description InplaceUpdateRequirement_class inplaceUpdate Declaration public bool inplaceUpdate { get; set; } Property Value Type Description System.Boolean Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IInplaceUpdateRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.InplaceUpdateRequirement_class.html": {
    "href": "reference/CWLDotNet.InplaceUpdateRequirement_class.html",
    "title": "Class InplaceUpdateRequirement_class | Documentation",
    "keywords": "Class InplaceUpdateRequirement_class Inheritance System.Object InplaceUpdateRequirement_class Implements IEnumClass < InplaceUpdateRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class InplaceUpdateRequirement_class : IEnumClass<InplaceUpdateRequirement_class>, IEnumClass Fields INPLACEUPDATEREQUIREMENT Declaration public static readonly InplaceUpdateRequirement_class INPLACEUPDATEREQUIREMENT Field Value Type Description InplaceUpdateRequirement_class Properties Members Declaration public static IList<InplaceUpdateRequirement_class> Members { get; } Property Value Type Description IList < InplaceUpdateRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static InplaceUpdateRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description InplaceUpdateRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.InputArraySchema.html": {
    "href": "reference/CWLDotNet.InputArraySchema.html",
    "title": "Class InputArraySchema | Documentation",
    "keywords": "Class InputArraySchema Auto-generated class implementation for https://w3id.org/cwl/cwl#InputArraySchema Inheritance System.Object InputArraySchema Implements IInputArraySchema IArraySchema IInputSchema IIOSchema ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class InputArraySchema : IInputArraySchema, IArraySchema, IInputSchema, IIOSchema, ILabeled, IDocumented, ISavable Constructors InputArraySchema(OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, String, List<OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, String>>>, enum_d062602be0b4b8fd33e69e29a841317b6ab665bc, OneOf<None, String>, OneOf<None, String>, OneOf<None, String, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public InputArraySchema(OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string, List<OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string>>> items, enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type, OneOf<None, string> name = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String , List < OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String >>> items enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type OneOf.OneOf < OneOf.Types.None , System.String > name OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> items Defines the type of the array elements. Declaration public OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string, List<OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string>>> items { get; set; } Property Value Type Description OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String , List < OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String >>> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The identifier for this type Declaration public OneOf<None, string> name { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > type Must be array Declaration public enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type { get; set; } Property Value Type Description enum_d062602be0b4b8fd33e69e29a841317b6ab665bc Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IInputArraySchema IArraySchema IInputSchema IIOSchema ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.InputBinding.html": {
    "href": "reference/CWLDotNet.InputBinding.html",
    "title": "Class InputBinding | Documentation",
    "keywords": "Class InputBinding Auto-generated class implementation for https://w3id.org/cwl/cwl#InputBinding Inheritance System.Object InputBinding Implements IInputBinding ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class InputBinding : IInputBinding, ISavable Constructors InputBinding(OneOf<None, Boolean>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public InputBinding(OneOf<None, bool> loadContents = default(OneOf<None, bool>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < OneOf.Types.None , System.Boolean > loadContents LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties loadContents Use of loadContents in InputBinding is deprecated. Preserved for v1.0 backwards compatibility. Will be removed in CWL v2.0. Use InputParameter.loadContents instead. Declaration public OneOf<None, bool> loadContents { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IInputBinding ISavable"
  },
  "reference/CWLDotNet.InputEnumSchema.html": {
    "href": "reference/CWLDotNet.InputEnumSchema.html",
    "title": "Class InputEnumSchema | Documentation",
    "keywords": "Class InputEnumSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#InputEnumSchema Inheritance System.Object InputEnumSchema Implements IInputEnumSchema IEnumSchema IInputSchema IIOSchema ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class InputEnumSchema : IInputEnumSchema, IEnumSchema, IInputSchema, IIOSchema, ILabeled, IDocumented, ISavable Constructors InputEnumSchema(List<String>, enum_d961d79c225752b9fadb617367615ab176b47d77, OneOf<None, String>, OneOf<None, String>, OneOf<None, String, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public InputEnumSchema(List<string> symbols, enum_d961d79c225752b9fadb617367615ab176b47d77 type, OneOf<None, string> name = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < System.String > symbols enum_d961d79c225752b9fadb617367615ab176b47d77 type OneOf.OneOf < OneOf.Types.None , System.String > name OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The identifier for this type Declaration public OneOf<None, string> name { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > symbols Defines the set of valid symbols. Declaration public List<string> symbols { get; set; } Property Value Type Description List < System.String > type Must be enum Declaration public enum_d961d79c225752b9fadb617367615ab176b47d77 type { get; set; } Property Value Type Description enum_d961d79c225752b9fadb617367615ab176b47d77 Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IInputEnumSchema IEnumSchema IInputSchema IIOSchema ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.InputRecordField.html": {
    "href": "reference/CWLDotNet.InputRecordField.html",
    "title": "Class InputRecordField | Documentation",
    "keywords": "Class InputRecordField Auto-generated class implementation for https://w3id.org/cwl/cwl#InputRecordField Inheritance System.Object InputRecordField Implements IInputRecordField IRecordField IDocumented IFieldBase ILabeled IInputFormat ILoadContents ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class InputRecordField : IInputRecordField, IRecordField, IDocumented, IFieldBase, ILabeled, IInputFormat, ILoadContents, ISavable Constructors InputRecordField(OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, String, List<OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, String>>>, String, OneOf<None, String, List<String>>, OneOf<None, String>, OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>, OneOf<None, Boolean>, OneOf<None, String, List<String>>, OneOf<None, Boolean>, OneOf<None, LoadListingEnum>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public InputRecordField(OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string, List<OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string>>> type, string name = null, OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles = default(OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>), OneOf<None, bool> streamable = default(OneOf<None, bool>), OneOf<None, string, List<string>> format = default(OneOf<None, string, List<string>>), OneOf<None, bool> loadContents = default(OneOf<None, bool>), OneOf<None, LoadListingEnum> loadListing = default(OneOf<None, LoadListingEnum>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String , List < OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String >>> type System.String name OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> secondaryFiles OneOf.OneOf < OneOf.Types.None , System.Boolean > streamable OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format OneOf.OneOf < OneOf.Types.None , System.Boolean > loadContents OneOf.OneOf < OneOf.Types.None , LoadListingEnum > loadListing LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format Only valid when type: File or is an array of items: File . This must be one or more IRIs of concept nodes that represents file formats which are allowed as input to this parameter, preferrably defined within an ontology. If no ontology is available, file formats may be tested by exact match. Declaration public OneOf<None, string, List<string>> format { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > loadContents Only valid when type: File or is an array of items: File . If true, the file (or each file in the array) must be a UTF-8 text file 64 KiB or smaller, and the implementation must read the entire contents of the file (or file array) and place it in the contents field of the File object for use by expressions. If the size of the file is greater than 64 KiB, the implementation must raise a fatal error. Declaration public OneOf<None, bool> loadContents { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > loadListing Only valid when type: Directory or is an array of items: Directory . Specify the desired behavior for loading the listing field of a Directory object for use by expressions. The order of precedence for loadListing is: loadListing on an individual parameter Inherited from LoadListingRequirement By default: no_listing Declaration public OneOf<None, LoadListingEnum> loadListing { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , LoadListingEnum > name The name of the field Declaration public string name { get; set; } Property Value Type Description System.String secondaryFiles Only valid when type: File or is an array of items: File . Provides a pattern or expression specifying files or directories that should be included alongside the primary file. Secondary files may be required or optional. When not explicitly specified, secondary files specified for inputs are required and outputs are optional. An implementation must include matching Files and Directories in the secondaryFiles property of the primary file. These Files and Directories must be transferred and staged alongside the primary file. An implementation may fail workflow execution if a required secondary file does not exist. If the value is an expression, the value of self in the expression must be the primary input or output File object to which this binding applies. The basename , nameroot and nameext fields must be present in self . For CommandLineTool outputs the path field must also be present. The expression must return a filename string relative to the path to the primary File, a File or Directory object with either path or location and basename fields set, or an array consisting of strings or File or Directory objects. It is legal to reference an unchanged File or Directory object taken from input as a secondaryFile. The expression may return \"null\" in which case there is no secondaryFile from that expression. To work on non-filename-preserving storage systems, portable tool descriptions should avoid constructing new values from location , but should construct relative references using basename or nameroot instead. If a value in secondaryFiles is a string that is not an expression, it specifies that the following pattern should be applied to the path of the primary file to yield a filename relative to the primary File: If string ends with ? character, remove the last ? and mark the resulting secondary file as optional. If string begins with one or more caret ^ characters, for each caret, remove the last file extension from the path (the last period . and all following characters). If there are no file extensions, the path is unchanged. Append the remainder of the string to the end of the file path. Declaration public OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> streamable Only valid when type: File or is an array of items: File . A value of true indicates that the file is read or written sequentially without seeking. An implementation may use this flag to indicate whether it is valid to stream file contents using a named pipe. Default: false . Declaration public OneOf<None, bool> streamable { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > type The field type Declaration public OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string, List<OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string>>> type { get; set; } Property Value Type Description OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String , List < OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IInputRecordField IRecordField IDocumented IFieldBase ILabeled IInputFormat ILoadContents ISavable"
  },
  "reference/CWLDotNet.InputRecordSchema.html": {
    "href": "reference/CWLDotNet.InputRecordSchema.html",
    "title": "Class InputRecordSchema | Documentation",
    "keywords": "Class InputRecordSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#InputRecordSchema Inheritance System.Object InputRecordSchema Implements IInputRecordSchema IRecordSchema IInputSchema IIOSchema ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class InputRecordSchema : IInputRecordSchema, IRecordSchema, IInputSchema, IIOSchema, ILabeled, IDocumented, ISavable Constructors InputRecordSchema(enum_d9cba076fca539106791a4f46d198c7fcfbdb779, OneOf<None, String>, OneOf<None, List<InputRecordField>>, OneOf<None, String>, OneOf<None, String, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public InputRecordSchema(enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type, OneOf<None, string> name = default(OneOf<None, string>), OneOf<None, List<InputRecordField>> fields = default(OneOf<None, List<InputRecordField>>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type OneOf.OneOf < OneOf.Types.None , System.String > name OneOf.OneOf < OneOf.Types.None , List < InputRecordField >> fields OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> fields Defines the fields of the record. Declaration public OneOf<None, List<InputRecordField>> fields { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < InputRecordField >> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The identifier for this type Declaration public OneOf<None, string> name { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > type Must be record Declaration public enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type { get; set; } Property Value Type Description enum_d9cba076fca539106791a4f46d198c7fcfbdb779 Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IInputRecordSchema IRecordSchema IInputSchema IIOSchema ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.IOperation.html": {
    "href": "reference/CWLDotNet.IOperation.html",
    "title": "Interface IOperation | Documentation",
    "keywords": "Interface IOperation Auto-generated interface for https://w3id.org/cwl/cwl#Operation This record describes an abstract operation. It is a potential step of a workflow that has not yet been bound to a concrete implementation. It specifies an input and output signature, but does not provide enough information to be executed. An implementation (or other tooling) may provide a means of binding an Operation to a concrete process (such as Workflow, CommandLineTool, or ExpressionTool) with a compatible signature. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IOperation : IProcess, IIdentified, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IOperationInputParameter.html": {
    "href": "reference/CWLDotNet.IOperationInputParameter.html",
    "title": "Interface IOperationInputParameter | Documentation",
    "keywords": "Interface IOperationInputParameter Auto-generated interface for https://w3id.org/cwl/cwl#OperationInputParameter Describe an input parameter of an operation. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IOperationInputParameter : IInputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IInputFormat, ILoadContents"
  },
  "reference/CWLDotNet.IOperationOutputParameter.html": {
    "href": "reference/CWLDotNet.IOperationOutputParameter.html",
    "title": "Interface IOperationOutputParameter | Documentation",
    "keywords": "Interface IOperationOutputParameter Auto-generated interface for https://w3id.org/cwl/cwl#OperationOutputParameter Describe an output parameter of an operation. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IOperationOutputParameter : IOutputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IOutputFormat"
  },
  "reference/CWLDotNet.IOutputArraySchema.html": {
    "href": "reference/CWLDotNet.IOutputArraySchema.html",
    "title": "Interface IOutputArraySchema | Documentation",
    "keywords": "Interface IOutputArraySchema Auto-generated interface for https://w3id.org/cwl/cwl#OutputArraySchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IOutputArraySchema : IArraySchema, IOutputSchema, IIOSchema, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IOutputEnumSchema.html": {
    "href": "reference/CWLDotNet.IOutputEnumSchema.html",
    "title": "Interface IOutputEnumSchema | Documentation",
    "keywords": "Interface IOutputEnumSchema Auto-generated interface for https://w3id.org/cwl/cwl#OutputEnumSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IOutputEnumSchema : IEnumSchema, IOutputSchema, IIOSchema, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IOutputFormat.html": {
    "href": "reference/CWLDotNet.IOutputFormat.html",
    "title": "Interface IOutputFormat | Documentation",
    "keywords": "Interface IOutputFormat Auto-generated interface for https://w3id.org/cwl/cwl#OutputFormat Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IOutputFormat"
  },
  "reference/CWLDotNet.IOutputParameter.html": {
    "href": "reference/CWLDotNet.IOutputParameter.html",
    "title": "Interface IOutputParameter | Documentation",
    "keywords": "Interface IOutputParameter Auto-generated interface for https://w3id.org/cwl/cwl#OutputParameter Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IOutputParameter : IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IOutputFormat"
  },
  "reference/CWLDotNet.IOutputRecordField.html": {
    "href": "reference/CWLDotNet.IOutputRecordField.html",
    "title": "Interface IOutputRecordField | Documentation",
    "keywords": "Interface IOutputRecordField Auto-generated interface for https://w3id.org/cwl/cwl#OutputRecordField Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IOutputRecordField : IRecordField, IDocumented, IFieldBase, ILabeled, IOutputFormat"
  },
  "reference/CWLDotNet.IOutputRecordSchema.html": {
    "href": "reference/CWLDotNet.IOutputRecordSchema.html",
    "title": "Interface IOutputRecordSchema | Documentation",
    "keywords": "Interface IOutputRecordSchema Auto-generated interface for https://w3id.org/cwl/cwl#OutputRecordSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IOutputRecordSchema : IRecordSchema, IOutputSchema, IIOSchema, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IOutputSchema.html": {
    "href": "reference/CWLDotNet.IOutputSchema.html",
    "title": "Interface IOutputSchema | Documentation",
    "keywords": "Interface IOutputSchema Auto-generated interface for https://w3id.org/cwl/cwl#OutputSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IOutputSchema : IIOSchema, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IParameter.html": {
    "href": "reference/CWLDotNet.IParameter.html",
    "title": "Interface IParameter | Documentation",
    "keywords": "Interface IParameter Auto-generated interface for https://w3id.org/cwl/cwl#Parameter Define an input or output parameter to a process. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IParameter : IFieldBase, ILabeled, IDocumented, IIdentified"
  },
  "reference/CWLDotNet.IProcess.html": {
    "href": "reference/CWLDotNet.IProcess.html",
    "title": "Interface IProcess | Documentation",
    "keywords": "Interface IProcess Auto-generated interface for https://w3id.org/cwl/cwl#Process The base executable type in CWL is the Process object defined by the document. Note that the Process object is abstract and cannot be directly executed. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IProcess : IIdentified, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IProcessRequirement.html": {
    "href": "reference/CWLDotNet.IProcessRequirement.html",
    "title": "Interface IProcessRequirement | Documentation",
    "keywords": "Interface IProcessRequirement Auto-generated interface for https://w3id.org/cwl/cwl#ProcessRequirement A process requirement declares a prerequisite that may or must be fulfilled before executing a process. See Process.hints and Process.requirements . Process requirements are the primary mechanism for specifying extensions to the CWL core specification. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IProcessRequirement"
  },
  "reference/CWLDotNet.IRecordField.html": {
    "href": "reference/CWLDotNet.IRecordField.html",
    "title": "Interface IRecordField | Documentation",
    "keywords": "Interface IRecordField Auto-generated interface for https://w3id.org/cwl/salad#RecordField A field of a record. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IRecordField : IDocumented"
  },
  "reference/CWLDotNet.IRecordSchema.html": {
    "href": "reference/CWLDotNet.IRecordSchema.html",
    "title": "Interface IRecordSchema | Documentation",
    "keywords": "Interface IRecordSchema Auto-generated interface for https://w3id.org/cwl/salad#RecordSchema Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IRecordSchema"
  },
  "reference/CWLDotNet.IResourceRequirement.html": {
    "href": "reference/CWLDotNet.IResourceRequirement.html",
    "title": "Interface IResourceRequirement | Documentation",
    "keywords": "Interface IResourceRequirement Auto-generated interface for https://w3id.org/cwl/cwl#ResourceRequirement Specify basic hardware resource requirements. \"min\" is the minimum amount of a resource that must be reserved to schedule a job. If \"min\" cannot be satisfied, the job should not be run. \"max\" is the maximum amount of a resource that the job shall be allocated. If a node has sufficient resources, multiple jobs may be scheduled on a single node provided each job's \"max\" resource requirements are met. If a job attempts to exceed its resource allocation, an implementation may deny additional resources, which may result in job failure. If both \"min\" and \"max\" are specified, an implementation may choose to allocate any amount between \"min\" and \"max\", with the actual allocation provided in the runtime object. If \"min\" is specified but \"max\" is not, then \"max\" == \"min\" If \"max\" is specified by \"min\" is not, then \"min\" == \"max\". It is an error if max < min. It is an error if the value of any of these fields is negative. If neither \"min\" nor \"max\" is specified for a resource, use the default values below. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IResourceRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.ISavable.html": {
    "href": "reference/CWLDotNet.ISavable.html",
    "title": "Interface ISavable | Documentation",
    "keywords": "Interface ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ISavable Methods FromDoc(Object, String, LoadingOptions, String) Declaration static ISavable FromDoc(object doc, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration Dictionary<object, object> Save(bool top, string baseUrl, bool relativeUris) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Save(Object, Boolean, String, Boolean) Declaration static object Save(object val_, bool top = true, string baseurl = \"\", bool relativeUris = true) Parameters Type Name Description System.Object val_ System.Boolean top System.String baseurl System.Boolean relativeUris Returns Type Description System.Object SaveRelativeUri(Object, Boolean, Boolean, Nullable<Int32>, String) Declaration static object SaveRelativeUri(object uri_, bool scopedId, bool relativeUris, int? refScope, string baseUrl = \"\") Parameters Type Name Description System.Object uri_ System.Boolean scopedId System.Boolean relativeUris System.Nullable < System.Int32 > refScope System.String baseUrl Returns Type Description System.Object"
  },
  "reference/CWLDotNet.IScatterFeatureRequirement.html": {
    "href": "reference/CWLDotNet.IScatterFeatureRequirement.html",
    "title": "Interface IScatterFeatureRequirement | Documentation",
    "keywords": "Interface IScatterFeatureRequirement Auto-generated interface for https://w3id.org/cwl/cwl#ScatterFeatureRequirement Indicates that the workflow platform must support the scatter and scatterMethod fields of WorkflowStep . Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IScatterFeatureRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.ISchemaDefRequirement.html": {
    "href": "reference/CWLDotNet.ISchemaDefRequirement.html",
    "title": "Interface ISchemaDefRequirement | Documentation",
    "keywords": "Interface ISchemaDefRequirement Auto-generated interface for https://w3id.org/cwl/cwl#SchemaDefRequirement This field consists of an array of type definitions which must be used when interpreting the inputs and outputs fields. When a type field contains a IRI, the implementation must check if the type is defined in schemaDefs and use that definition. If the type is not found in schemaDefs , it is an error. The entries in schemaDefs must be processed in the order listed such that later schema definitions may refer to earlier schema definitions. Type definitions are allowed for enum and record types only. Type definitions may be shared by defining them in a file and then $include -ing them in the types field. A file can contain a list of type definitions Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ISchemaDefRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.ISecondaryFileSchema.html": {
    "href": "reference/CWLDotNet.ISecondaryFileSchema.html",
    "title": "Interface ISecondaryFileSchema | Documentation",
    "keywords": "Interface ISecondaryFileSchema Auto-generated interface for https://w3id.org/cwl/cwl#SecondaryFileSchema Secondary files are specified using the following micro-DSL for secondary files: If the value is a string, it is transformed to an object with two fields pattern and required By default, the value of required is null (this indicates default behavior, which may be based on the context) If the value ends with a question mark ? the question mark is stripped off and the value of the field required is set to False The remaining value is assigned to the field pattern For implementation details and examples, please see this section in the Schema Salad specification. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ISecondaryFileSchema"
  },
  "reference/CWLDotNet.IShellCommandRequirement.html": {
    "href": "reference/CWLDotNet.IShellCommandRequirement.html",
    "title": "Interface IShellCommandRequirement | Documentation",
    "keywords": "Interface IShellCommandRequirement Auto-generated interface for https://w3id.org/cwl/cwl#ShellCommandRequirement Modify the behavior of CommandLineTool to generate a single string containing a shell command line. Each item in the arguments list must be joined into a string separated by single spaces and quoted to prevent intepretation by the shell, unless CommandLineBinding for that argument contains shellQuote: false . If shellQuote: false is specified, the argument is joined into the command string without quoting, which allows the use of shell metacharacters such as | for pipes. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IShellCommandRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.ISink.html": {
    "href": "reference/CWLDotNet.ISink.html",
    "title": "Interface ISink | Documentation",
    "keywords": "Interface ISink Auto-generated interface for https://w3id.org/cwl/cwl#Sink Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ISink"
  },
  "reference/CWLDotNet.ISoftwarePackage.html": {
    "href": "reference/CWLDotNet.ISoftwarePackage.html",
    "title": "Interface ISoftwarePackage | Documentation",
    "keywords": "Interface ISoftwarePackage Auto-generated interface for https://w3id.org/cwl/cwl#SoftwarePackage Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ISoftwarePackage"
  },
  "reference/CWLDotNet.ISoftwareRequirement.html": {
    "href": "reference/CWLDotNet.ISoftwareRequirement.html",
    "title": "Interface ISoftwareRequirement | Documentation",
    "keywords": "Interface ISoftwareRequirement Auto-generated interface for https://w3id.org/cwl/cwl#SoftwareRequirement A list of software packages that should be configured in the environment of the defined process. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ISoftwareRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.IStepInputExpressionRequirement.html": {
    "href": "reference/CWLDotNet.IStepInputExpressionRequirement.html",
    "title": "Interface IStepInputExpressionRequirement | Documentation",
    "keywords": "Interface IStepInputExpressionRequirement Auto-generated interface for https://w3id.org/cwl/cwl#StepInputExpressionRequirement Indicate that the workflow platform must support the valueFrom field of WorkflowStepInput . Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IStepInputExpressionRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.ISubworkflowFeatureRequirement.html": {
    "href": "reference/CWLDotNet.ISubworkflowFeatureRequirement.html",
    "title": "Interface ISubworkflowFeatureRequirement | Documentation",
    "keywords": "Interface ISubworkflowFeatureRequirement Auto-generated interface for https://w3id.org/cwl/cwl#SubworkflowFeatureRequirement Indicates that the workflow platform must support nested workflows in the run field of WorkflowStep . Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface ISubworkflowFeatureRequirement : IProcessRequirement"
  },
  "reference/CWLDotNet.IToolTimeLimit.html": {
    "href": "reference/CWLDotNet.IToolTimeLimit.html",
    "title": "Interface IToolTimeLimit | Documentation",
    "keywords": "Interface IToolTimeLimit Auto-generated interface for https://w3id.org/cwl/cwl#ToolTimeLimit Set an upper limit on the execution time of a CommandLineTool. A CommandLineTool whose execution duration exceeds the time limit may be preemptively terminated and considered failed. May also be used by batch systems to make scheduling decisions. The execution duration excludes external operations, such as staging of files, pulling a docker image etc, and only counts wall-time for the execution of the command line itself. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IToolTimeLimit : IProcessRequirement"
  },
  "reference/CWLDotNet.IWorkflow.html": {
    "href": "reference/CWLDotNet.IWorkflow.html",
    "title": "Interface IWorkflow | Documentation",
    "keywords": "Interface IWorkflow Auto-generated interface for https://w3id.org/cwl/cwl#Workflow A workflow describes a set of steps and the dependencies between those steps. When a step produces output that will be consumed by a second step, the first step is a dependency of the second step. When there is a dependency, the workflow engine must execute the preceding step and wait for it to successfully produce output before executing the dependent step. If two steps are defined in the workflow graph that are not directly or indirectly dependent, these steps are independent , and may execute in any order or execute concurrently. A workflow is complete when all steps have been executed. Dependencies between parameters are expressed using the source field on workflow step input parameters and outputSource field on workflow output parameters . The source field on each workflow step input parameter expresses the data links that contribute to the value of the step input parameter (the \"sink\"). A workflow step can only begin execution when every data link connected to a step has been fulfilled. The outputSource field on each workflow step input parameter expresses the data links that contribute to the value of the workflow output parameter (the \"sink\"). Workflow execution cannot complete successfully until every data link connected to an output parameter has been fulfilled. Workflow success and failure A completed step must result in one of success , temporaryFailure or permanentFailure states. An implementation may choose to retry a step execution which resulted in temporaryFailure . An implementation may choose to either continue running other steps of a workflow, or terminate immediately upon permanentFailure . If any step of a workflow execution results in permanentFailure , then the workflow status is permanentFailure . If one or more steps result in temporaryFailure and all other steps complete success or are not executed, then the workflow status is temporaryFailure . If all workflow steps are executed and complete with success , then the workflow status is success . Extensions ScatterFeatureRequirement and SubworkflowFeatureRequirement are available as standard extensions to core workflow semantics. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IWorkflow : IProcess, IIdentified, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IWorkflowInputParameter.html": {
    "href": "reference/CWLDotNet.IWorkflowInputParameter.html",
    "title": "Interface IWorkflowInputParameter | Documentation",
    "keywords": "Interface IWorkflowInputParameter Auto-generated interface for https://w3id.org/cwl/cwl#WorkflowInputParameter Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IWorkflowInputParameter : IInputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IInputFormat, ILoadContents"
  },
  "reference/CWLDotNet.IWorkflowOutputParameter.html": {
    "href": "reference/CWLDotNet.IWorkflowOutputParameter.html",
    "title": "Interface IWorkflowOutputParameter | Documentation",
    "keywords": "Interface IWorkflowOutputParameter Auto-generated interface for https://w3id.org/cwl/cwl#WorkflowOutputParameter Describe an output parameter of a workflow. The parameter must be connected to one or more parameters defined in the workflow that will provide the value of the output parameter. It is legal to connect a WorkflowInputParameter to a WorkflowOutputParameter. See WorkflowStepInput for discussion of linkMerge and pickValue . Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IWorkflowOutputParameter : IOutputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IOutputFormat"
  },
  "reference/CWLDotNet.IWorkflowStep.html": {
    "href": "reference/CWLDotNet.IWorkflowStep.html",
    "title": "Interface IWorkflowStep | Documentation",
    "keywords": "Interface IWorkflowStep Auto-generated interface for https://w3id.org/cwl/cwl#WorkflowStep A workflow step is an executable element of a workflow. It specifies the underlying process implementation (such as CommandLineTool or another Workflow ) in the run field and connects the input and output parameters of the underlying process to workflow parameters. Scatter/gather To use scatter/gather, ScatterFeatureRequirement must be specified in the workflow or workflow step requirements. A \"scatter\" operation specifies that the associated workflow step or subworkflow should execute separately over a list of input elements. Each job making up a scatter operation is independent and may be executed concurrently. The scatter field specifies one or more input parameters which will be scattered. An input parameter may be listed more than once. The declared type of each input parameter is implicitly becomes an array of items of the input parameter type. If a parameter is listed more than once, it becomes a nested array. As a result, upstream parameters which are connected to scattered parameters must be arrays. All output parameter types are also implicitly wrapped in arrays. Each job in the scatter results in an entry in the output array. If any scattered parameter runtime value is an empty array, all outputs are set to empty arrays and no work is done for the step, according to applicable scattering rules. If scatter declares more than one input parameter, scatterMethod describes how to decompose the input into a discrete set of jobs. dotproduct specifies that each of the input arrays are aligned and one element taken from each array to construct each job. It is an error if all input arrays are not the same length. nested_crossproduct specifies the Cartesian product of the inputs, producing a job for every combination of the scattered inputs. The output must be nested arrays for each level of scattering, in the order that the input arrays are listed in the scatter field. flat_crossproduct specifies the Cartesian product of the inputs, producing a job for every combination of the scattered inputs. The output arrays must be flattened to a single level, but otherwise listed in the order that the input arrays are listed in the scatter field. Conditional execution (Optional) Conditional execution makes execution of a step conditional on an expression. A step that is not executed is \"skipped\". A skipped step produces null for all output parameters. The condition is evaluated after scatter , using the input object of each individual scatter job. This means over a set of scatter jobs, some may be executed and some may be skipped. When the results are gathered, skipped steps must be null in the output arrays. The when field controls conditional execution. This is an expression that must be evaluated with inputs bound to the step input object (or individual scatter job), and returns a boolean value. It is an error if this expression returns a value other than true or false . Conditionals in CWL are an optional feature and are not required to be implemented by all consumers of CWL documents. An implementation that does not support conditionals must return a fatal error when attempting execute a workflow that uses conditional constructs the implementation does not support. Subworkflows To specify a nested workflow as part of a workflow step, SubworkflowFeatureRequirement must be specified in the workflow or workflow step requirements. It is a fatal error if a workflow directly or indirectly invokes itself as a subworkflow (recursive workflows are not allowed). Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IWorkflowStep : IIdentified, ILabeled, IDocumented"
  },
  "reference/CWLDotNet.IWorkflowStepInput.html": {
    "href": "reference/CWLDotNet.IWorkflowStepInput.html",
    "title": "Interface IWorkflowStepInput | Documentation",
    "keywords": "Interface IWorkflowStepInput Auto-generated interface for https://w3id.org/cwl/cwl#WorkflowStepInput The input of a workflow step connects an upstream parameter (from the workflow inputs, or the outputs of other workflows steps) with the input parameters of the process specified by the run field. Only input parameters declared by the target process will be passed through at runtime to the process though additonal parameters may be specified (for use within valueFrom expressions for instance) - unconnected or unused parameters do not represent an error condition. Input object A WorkflowStepInput object must contain an id field in the form #fieldname or #prefix/fieldname . When the id field contains a slash / the field name consists of the characters following the final slash (the prefix portion may contain one or more slashes to indicate scope). This defines a field of the workflow step input object with the value of the source parameter(s). Merging multiple inbound data links To merge multiple inbound data links, MultipleInputFeatureRequirement must be specified in the workflow or workflow step requirements. If the sink parameter is an array, or named in a workflow scatter operation, there may be multiple inbound data links listed in the source field. The values from the input links are merged depending on the method specified in the linkMerge field. If both linkMerge and pickValue are null or not specified, and there is more than one element in the source array, the default method is \"merge_nested\". If both linkMerge and pickValue are null or not specified, and there is only a single element in the source , then the input parameter takes the scalar value from the single input link (it is not wrapped in a single-list). merge_nested The input must be an array consisting of exactly one entry for each input link. If \"merge_nested\" is specified with a single link, the value from the link must be wrapped in a single-item list. merge_flattened The source and sink parameters must be compatible types, or the source type must be compatible with single element from the \"items\" type of the destination array parameter. Source parameters which are arrays are concatenated. Source parameters which are single element types are appended as single elements. Picking non-null values among inbound data links If present, pickValue specifies how to picking non-null values among inbound data links. pickValue is evaluated Once all source values from upstream step or parameters are available. After linkMerge . Before scatter or valueFrom . This is specifically intended to be useful in combination with conditional execution , where several upstream steps may be connected to a single input ( source is a list), and skipped steps produce null values. Static type checkers should check for type consistency after infering what the type will be after pickValue is applied, just as they do currently for linkMerge . first_non_null For the first level of a list input, pick the first non-null element. The result is a scalar. It is an error if there is no non-null element. Examples: [null, x, null, y] -> x [null, [null], null, y] -> [null] [null, null, null] -> Runtime Error Intended use case : If-else pattern where the value comes either from a conditional step or from a default or fallback value. The conditional step(s) should be placed first in the list. the_only_non_null For the first level of a list input, pick the single non-null element. The result is a scalar. It is an error if there is more than one non-null element. Examples: [null, x, null] -> x [null, x, null, y] -> Runtime Error [null, [null], null] -> [null] [null, null, null] -> Runtime Error Intended use case : Switch type patterns where developer considers more than one active code path as a workflow error (possibly indicating an error in writing when condition expressions). all_non_null For the first level of a list input, pick all non-null values. The result is a list, which may be empty. Examples: [null, x, null] -> [x] [x, null, y] -> [x, y] [null, [x], [null]] -> [[x], [null]] [null, null, null] -> [] Intended use case : It is valid to have more than one source, but sources are conditional, so null sources (from skipped steps) should be filtered out. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IWorkflowStepInput : IIdentified, ISink, ILoadContents, ILabeled"
  },
  "reference/CWLDotNet.IWorkflowStepOutput.html": {
    "href": "reference/CWLDotNet.IWorkflowStepOutput.html",
    "title": "Interface IWorkflowStepOutput | Documentation",
    "keywords": "Interface IWorkflowStepOutput Auto-generated interface for https://w3id.org/cwl/cwl#WorkflowStepOutput Associate an output parameter of the underlying process with a workflow parameter. The workflow parameter (given in the id field) be may be used as a source to connect with input parameters of other workflow steps, or with an output parameter of the process. A unique identifier for this workflow output parameter. This is the identifier to use in the source field of WorkflowStepInput to connect the output value to downstream parameters. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IWorkflowStepOutput : IIdentified"
  },
  "reference/CWLDotNet.IWorkReuse.html": {
    "href": "reference/CWLDotNet.IWorkReuse.html",
    "title": "Interface IWorkReuse | Documentation",
    "keywords": "Interface IWorkReuse Auto-generated interface for https://w3id.org/cwl/cwl#WorkReuse For implementations that support reusing output from past work (on the assumption that same code and same input produce same results), control whether to enable or disable the reuse behavior for a particular tool or step (to accomodate situations where that assumption is incorrect). A reused step is not executed but instead returns the same output as the original execution. If WorkReuse is not specified, correct tools should assume it is enabled by default. Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public interface IWorkReuse : IProcessRequirement"
  },
  "reference/CWLDotNet.LinkMergeMethod.html": {
    "href": "reference/CWLDotNet.LinkMergeMethod.html",
    "title": "Class LinkMergeMethod | Documentation",
    "keywords": "Class LinkMergeMethod Inheritance System.Object LinkMergeMethod Implements IEnumClass < LinkMergeMethod > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class LinkMergeMethod : IEnumClass<LinkMergeMethod>, IEnumClass Fields MERGE_FLATTENED Declaration public static readonly LinkMergeMethod MERGE_FLATTENED Field Value Type Description LinkMergeMethod MERGE_NESTED Declaration public static readonly LinkMergeMethod MERGE_NESTED Field Value Type Description LinkMergeMethod Properties Members Declaration public static IList<LinkMergeMethod> Members { get; } Property Value Type Description IList < LinkMergeMethod > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static LinkMergeMethod Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description LinkMergeMethod Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.LoadingOptions.html": {
    "href": "reference/CWLDotNet.LoadingOptions.html",
    "title": "Class LoadingOptions | Documentation",
    "keywords": "Class LoadingOptions Inheritance System.Object LoadingOptions Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class LoadingOptions Constructors LoadingOptions(in IFetcher, in String, in Nullable<Dictionary<String, String>>, in Nullable<List<String>>, in Nullable<Dictionary<String, Object>>, LoadingOptions) Declaration public LoadingOptions(in IFetcher fetcher = null, in string fileUri = null, in Dictionary<string, string>? namespaces = null, in List<string>? schemas = null, in Dictionary<string, object>? idx = null, LoadingOptions copyFrom = null) Parameters Type Name Description IFetcher fetcher System.String fileUri System.Nullable < Dictionary < System.String , System.String >> namespaces System.Nullable < List < System.String >> schemas System.Nullable < Dictionary < System.String , System.Object >> idx LoadingOptions copyFrom Fields fetcher Declaration public IFetcher fetcher Field Value Type Description IFetcher fileUri Declaration public string fileUri Field Value Type Description System.String idx Declaration public Dictionary<string, object> idx Field Value Type Description Dictionary < System.String , System.Object > namespaces Declaration public Dictionary<string, string>? namespaces Field Value Type Description System.Nullable < Dictionary < System.String , System.String >> rvocab Declaration public Dictionary<string, string> rvocab Field Value Type Description Dictionary < System.String , System.String > schemas Declaration public List<string>? schemas Field Value Type Description System.Nullable < List < System.String >> vocab Declaration public Dictionary<string, string> vocab Field Value Type Description Dictionary < System.String , System.String > Methods ExpandUrl(in String, String, Boolean, Boolean, Nullable<Int32>) Declaration public string ExpandUrl(in string url_, string baseUrl, bool scopeId, bool vocabTerm, int? scopedRef) Parameters Type Name Description System.String url_ System.String baseUrl System.Boolean scopeId System.Boolean vocabTerm System.Nullable < System.Int32 > scopedRef Returns Type Description System.String PrefixUrl(in String) Declaration public string PrefixUrl(in string url) Parameters Type Name Description System.String url Returns Type Description System.String"
  },
  "reference/CWLDotNet.LoadListingEnum.html": {
    "href": "reference/CWLDotNet.LoadListingEnum.html",
    "title": "Class LoadListingEnum | Documentation",
    "keywords": "Class LoadListingEnum Inheritance System.Object LoadListingEnum Implements IEnumClass < LoadListingEnum > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class LoadListingEnum : IEnumClass<LoadListingEnum>, IEnumClass Fields DEEP_LISTING Declaration public static readonly LoadListingEnum DEEP_LISTING Field Value Type Description LoadListingEnum NO_LISTING Declaration public static readonly LoadListingEnum NO_LISTING Field Value Type Description LoadListingEnum SHALLOW_LISTING Declaration public static readonly LoadListingEnum SHALLOW_LISTING Field Value Type Description LoadListingEnum Properties Members Declaration public static IList<LoadListingEnum> Members { get; } Property Value Type Description IList < LoadListingEnum > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static LoadListingEnum Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description LoadListingEnum Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.LoadListingRequirement.html": {
    "href": "reference/CWLDotNet.LoadListingRequirement.html",
    "title": "Class LoadListingRequirement | Documentation",
    "keywords": "Class LoadListingRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#LoadListingRequirement Specify the desired behavior for loading the listing field of a Directory object for use by expressions. Inheritance System.Object LoadListingRequirement Implements ILoadListingRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class LoadListingRequirement : ILoadListingRequirement, IProcessRequirement, ISavable Constructors LoadListingRequirement(LoadListingRequirement_class, OneOf<None, LoadListingEnum>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public LoadListingRequirement(LoadListingRequirement_class class_ = null, OneOf<None, LoadListingEnum> loadListing = default(OneOf<None, LoadListingEnum>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description LoadListingRequirement_class class_ OneOf.OneOf < OneOf.Types.None , LoadListingEnum > loadListing LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'LoadListingRequirement' Declaration public LoadListingRequirement_class class_ { get; set; } Property Value Type Description LoadListingRequirement_class loadListing Declaration public OneOf<None, LoadListingEnum> loadListing { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , LoadListingEnum > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ILoadListingRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.LoadListingRequirement_class.html": {
    "href": "reference/CWLDotNet.LoadListingRequirement_class.html",
    "title": "Class LoadListingRequirement_class | Documentation",
    "keywords": "Class LoadListingRequirement_class Inheritance System.Object LoadListingRequirement_class Implements IEnumClass < LoadListingRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class LoadListingRequirement_class : IEnumClass<LoadListingRequirement_class>, IEnumClass Fields LOADLISTINGREQUIREMENT Declaration public static readonly LoadListingRequirement_class LOADLISTINGREQUIREMENT Field Value Type Description LoadListingRequirement_class Properties Members Declaration public static IList<LoadListingRequirement_class> Members { get; } Property Value Type Description IList < LoadListingRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static LoadListingRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description LoadListingRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.MultipleInputFeatureRequirement.html": {
    "href": "reference/CWLDotNet.MultipleInputFeatureRequirement.html",
    "title": "Class MultipleInputFeatureRequirement | Documentation",
    "keywords": "Class MultipleInputFeatureRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#MultipleInputFeatureRequirement Indicates that the workflow platform must support multiple inbound data links listed in the source field of WorkflowStepInput . Inheritance System.Object MultipleInputFeatureRequirement Implements IMultipleInputFeatureRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class MultipleInputFeatureRequirement : IMultipleInputFeatureRequirement, IProcessRequirement, ISavable Constructors MultipleInputFeatureRequirement(MultipleInputFeatureRequirement_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public MultipleInputFeatureRequirement(MultipleInputFeatureRequirement_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description MultipleInputFeatureRequirement_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'MultipleInputFeatureRequirement' Declaration public MultipleInputFeatureRequirement_class class_ { get; set; } Property Value Type Description MultipleInputFeatureRequirement_class Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IMultipleInputFeatureRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.MultipleInputFeatureRequirement_class.html": {
    "href": "reference/CWLDotNet.MultipleInputFeatureRequirement_class.html",
    "title": "Class MultipleInputFeatureRequirement_class | Documentation",
    "keywords": "Class MultipleInputFeatureRequirement_class Inheritance System.Object MultipleInputFeatureRequirement_class Implements IEnumClass < MultipleInputFeatureRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class MultipleInputFeatureRequirement_class : IEnumClass<MultipleInputFeatureRequirement_class>, IEnumClass Fields MULTIPLEINPUTFEATUREREQUIREMENT Declaration public static readonly MultipleInputFeatureRequirement_class MULTIPLEINPUTFEATUREREQUIREMENT Field Value Type Description MultipleInputFeatureRequirement_class Properties Members Declaration public static IList<MultipleInputFeatureRequirement_class> Members { get; } Property Value Type Description IList < MultipleInputFeatureRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static MultipleInputFeatureRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description MultipleInputFeatureRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.NetworkAccess.html": {
    "href": "reference/CWLDotNet.NetworkAccess.html",
    "title": "Class NetworkAccess | Documentation",
    "keywords": "Class NetworkAccess Auto-generated class implementation for https://w3id.org/cwl/cwl#NetworkAccess Indicate whether a process requires outgoing IPv4/IPv6 network access. Choice of IPv4 or IPv6 is implementation and site specific, correct tools must support both. If networkAccess is false or not specified, tools must not assume network access, except for localhost (the loopback device). If networkAccess is true, the tool must be able to make outgoing connections to network resources. Resources may be on a private subnet or the public Internet. However, implementations and sites may apply their own security policies to restrict what is accessible by the tool. Enabling network access does not imply a publically routable IP address or the ability to accept inbound connections. Inheritance System.Object NetworkAccess Implements INetworkAccess IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class NetworkAccess : INetworkAccess, IProcessRequirement, ISavable Constructors NetworkAccess(OneOf<Boolean, String>, NetworkAccess_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public NetworkAccess(OneOf<bool, string> networkAccess, NetworkAccess_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < System.Boolean , System.String > networkAccess NetworkAccess_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'NetworkAccess' Declaration public NetworkAccess_class class_ { get; set; } Property Value Type Description NetworkAccess_class networkAccess Declaration public OneOf<bool, string> networkAccess { get; set; } Property Value Type Description OneOf.OneOf < System.Boolean , System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements INetworkAccess IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.NetworkAccess_class.html": {
    "href": "reference/CWLDotNet.NetworkAccess_class.html",
    "title": "Class NetworkAccess_class | Documentation",
    "keywords": "Class NetworkAccess_class Inheritance System.Object NetworkAccess_class Implements IEnumClass < NetworkAccess_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class NetworkAccess_class : IEnumClass<NetworkAccess_class>, IEnumClass Fields NETWORKACCESS Declaration public static readonly NetworkAccess_class NETWORKACCESS Field Value Type Description NetworkAccess_class Properties Members Declaration public static IList<NetworkAccess_class> Members { get; } Property Value Type Description IList < NetworkAccess_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static NetworkAccess_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description NetworkAccess_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.Operation.html": {
    "href": "reference/CWLDotNet.Operation.html",
    "title": "Class Operation | Documentation",
    "keywords": "Class Operation Auto-generated class implementation for https://w3id.org/cwl/cwl#Operation This record describes an abstract operation. It is a potential step of a workflow that has not yet been bound to a concrete implementation. It specifies an input and output signature, but does not provide enough information to be executed. An implementation (or other tooling) may provide a means of binding an Operation to a concrete process (such as Workflow, CommandLineTool, or ExpressionTool) with a compatible signature. Inheritance System.Object Operation Implements IOperation IProcess IIdentified ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class Operation : IOperation, IProcess, IIdentified, ILabeled, IDocumented, ISavable Constructors Operation(List<OperationInputParameter>, List<OperationOutputParameter>, OneOf<None, String>, Operation_class, OneOf<None, String>, OneOf<None, String, List<String>>, OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>>, OneOf<None, List<Object>>, OneOf<None, CWLVersion>, OneOf<None, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public Operation(List<OperationInputParameter> inputs, List<OperationOutputParameter> outputs, OneOf<None, string> id = default(OneOf<None, string>), Operation_class class_ = null, OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>> requirements = default(OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>>), OneOf<None, List<object>> hints = default(OneOf<None, List<object>>), OneOf<None, CWLVersion> cwlVersion = default(OneOf<None, CWLVersion>), OneOf<None, List<string>> intent = default(OneOf<None, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < OperationInputParameter > inputs List < OperationOutputParameter > outputs OneOf.OneOf < OneOf.Types.None , System.String > id Operation_class class_ OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < InlineJavascriptRequirement , SchemaDefRequirement , LoadListingRequirement , DockerRequirement , SoftwareRequirement , InitialWorkDirRequirement , EnvVarRequirement , ShellCommandRequirement , ResourceRequirement , WorkReuse , NetworkAccess , InplaceUpdateRequirement , ToolTimeLimit , SubworkflowFeatureRequirement , ScatterFeatureRequirement , MultipleInputFeatureRequirement , StepInputExpressionRequirement >>> requirements OneOf.OneOf < OneOf.Types.None , List < System.Object >> hints OneOf.OneOf < OneOf.Types.None , CWLVersion > cwlVersion OneOf.OneOf < OneOf.Types.None , List < System.String >> intent LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Declaration public Operation_class class_ { get; set; } Property Value Type Description Operation_class cwlVersion CWL document version. Always required at the document root. Not required for a Process embedded inside another Process. Declaration public OneOf<None, CWLVersion> cwlVersion { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , CWLVersion > doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> hints Declares hints applying to either the runtime environment or the workflow engine that may be helpful in executing this process. It is not an error if an implementation cannot satisfy all hints, however the implementation may report a warning. Declaration public OneOf<None, List<object>> hints { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.Object >> id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > inputs Defines the input parameters of the process. The process is ready to run when all required input parameters are associated with concrete values. Input parameters include a schema for each parameter which is used to validate the input object. It may also be used to build a user interface for constructing the input object. When accepting an input object, all input parameters must have a value. If an input parameter is missing from the input object, it must be assigned a value of null (or the value of default for that parameter, if provided) for the purposes of validation and evaluation of expressions. Declaration public List<OperationInputParameter> inputs { get; set; } Property Value Type Description List < OperationInputParameter > intent An identifier for the type of computational operation, of this Process. Especially useful for \"class: Operation\", but can also be used for CommandLineTool, Workflow, or ExpressionTool. If provided, then this must be an IRI of a concept node that represents the type of operation, preferrably defined within an ontology. For example, in the domain of bioinformatics, one can use an IRI from the EDAM Ontology's Operation concept nodes , like Alignment , or Clustering ; or a more specific Operation concept like Split read mapping . Declaration public OneOf<None, List<string>> intent { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.String >> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > outputs Defines the parameters representing the output of the process. May be used to generate and/or validate the output object. Declaration public List<OperationOutputParameter> outputs { get; set; } Property Value Type Description List < OperationOutputParameter > requirements Declares requirements that apply to either the runtime environment or the workflow engine that must be met in order to execute this process. If an implementation cannot satisfy all requirements, or a requirement is listed which is not recognized by the implementation, it is a fatal error and the implementation must not attempt to run the process, unless overridden at user option. Declaration public OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>> requirements { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < InlineJavascriptRequirement , SchemaDefRequirement , LoadListingRequirement , DockerRequirement , SoftwareRequirement , InitialWorkDirRequirement , EnvVarRequirement , ShellCommandRequirement , ResourceRequirement , WorkReuse , NetworkAccess , InplaceUpdateRequirement , ToolTimeLimit , SubworkflowFeatureRequirement , ScatterFeatureRequirement , MultipleInputFeatureRequirement , StepInputExpressionRequirement >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IOperation IProcess IIdentified ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.Operation_class.html": {
    "href": "reference/CWLDotNet.Operation_class.html",
    "title": "Class Operation_class | Documentation",
    "keywords": "Class Operation_class Inheritance System.Object Operation_class Implements IEnumClass < Operation_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class Operation_class : IEnumClass<Operation_class>, IEnumClass Fields OPERATION Declaration public static readonly Operation_class OPERATION Field Value Type Description Operation_class Properties Members Declaration public static IList<Operation_class> Members { get; } Property Value Type Description IList < Operation_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static Operation_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description Operation_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.OperationInputParameter.html": {
    "href": "reference/CWLDotNet.OperationInputParameter.html",
    "title": "Class OperationInputParameter | Documentation",
    "keywords": "Class OperationInputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#OperationInputParameter Describe an input parameter of an operation. Inheritance System.Object OperationInputParameter Implements IOperationInputParameter IInputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IInputFormat ILoadContents ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class OperationInputParameter : IOperationInputParameter, IInputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IInputFormat, ILoadContents, ISavable Constructors OperationInputParameter(OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, String, List<OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, String>>>, OneOf<None, String>, OneOf<None, String>, OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>, OneOf<None, Boolean>, OneOf<None, String, List<String>>, OneOf<None, String, List<String>>, OneOf<None, Boolean>, OneOf<None, LoadListingEnum>, OneOf<None, Object>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public OperationInputParameter(OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string, List<OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string>>> type, OneOf<None, string> id = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles = default(OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>), OneOf<None, bool> streamable = default(OneOf<None, bool>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, string, List<string>> format = default(OneOf<None, string, List<string>>), OneOf<None, bool> loadContents = default(OneOf<None, bool>), OneOf<None, LoadListingEnum> loadListing = default(OneOf<None, LoadListingEnum>), OneOf<None, object> default_ = default(OneOf<None, object>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String , List < OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String >>> type OneOf.OneOf < OneOf.Types.None , System.String > id OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> secondaryFiles OneOf.OneOf < OneOf.Types.None , System.Boolean > streamable OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format OneOf.OneOf < OneOf.Types.None , System.Boolean > loadContents OneOf.OneOf < OneOf.Types.None , LoadListingEnum > loadListing OneOf.OneOf < OneOf.Types.None , System.Object > default_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties default_ The default value to use for this parameter if the parameter is missing from the input object, or if the value of the parameter in the input object is null . Default values are applied before evaluating expressions (e.g. dependent valueFrom fields). Declaration public OneOf<None, object> default_ { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Object > doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format Only valid when type: File or is an array of items: File . This must be one or more IRIs of concept nodes that represents file formats which are allowed as input to this parameter, preferrably defined within an ontology. If no ontology is available, file formats may be tested by exact match. Declaration public OneOf<None, string, List<string>> format { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > loadContents Only valid when type: File or is an array of items: File . If true, the file (or each file in the array) must be a UTF-8 text file 64 KiB or smaller, and the implementation must read the entire contents of the file (or file array) and place it in the contents field of the File object for use by expressions. If the size of the file is greater than 64 KiB, the implementation must raise a fatal error. Declaration public OneOf<None, bool> loadContents { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > loadListing Only valid when type: Directory or is an array of items: Directory . Specify the desired behavior for loading the listing field of a Directory object for use by expressions. The order of precedence for loadListing is: loadListing on an individual parameter Inherited from LoadListingRequirement By default: no_listing Declaration public OneOf<None, LoadListingEnum> loadListing { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , LoadListingEnum > secondaryFiles Only valid when type: File or is an array of items: File . Provides a pattern or expression specifying files or directories that should be included alongside the primary file. Secondary files may be required or optional. When not explicitly specified, secondary files specified for inputs are required and outputs are optional. An implementation must include matching Files and Directories in the secondaryFiles property of the primary file. These Files and Directories must be transferred and staged alongside the primary file. An implementation may fail workflow execution if a required secondary file does not exist. If the value is an expression, the value of self in the expression must be the primary input or output File object to which this binding applies. The basename , nameroot and nameext fields must be present in self . For CommandLineTool outputs the path field must also be present. The expression must return a filename string relative to the path to the primary File, a File or Directory object with either path or location and basename fields set, or an array consisting of strings or File or Directory objects. It is legal to reference an unchanged File or Directory object taken from input as a secondaryFile. The expression may return \"null\" in which case there is no secondaryFile from that expression. To work on non-filename-preserving storage systems, portable tool descriptions should avoid constructing new values from location , but should construct relative references using basename or nameroot instead. If a value in secondaryFiles is a string that is not an expression, it specifies that the following pattern should be applied to the path of the primary file to yield a filename relative to the primary File: If string ends with ? character, remove the last ? and mark the resulting secondary file as optional. If string begins with one or more caret ^ characters, for each caret, remove the last file extension from the path (the last period . and all following characters). If there are no file extensions, the path is unchanged. Append the remainder of the string to the end of the file path. Declaration public OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> streamable Only valid when type: File or is an array of items: File . A value of true indicates that the file is read or written sequentially without seeking. An implementation may use this flag to indicate whether it is valid to stream file contents using a named pipe. Default: false . Declaration public OneOf<None, bool> streamable { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > type Specify valid types of data that may be assigned to this parameter. Declaration public OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string, List<OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string>>> type { get; set; } Property Value Type Description OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String , List < OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IOperationInputParameter IInputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IInputFormat ILoadContents ISavable"
  },
  "reference/CWLDotNet.OperationOutputParameter.html": {
    "href": "reference/CWLDotNet.OperationOutputParameter.html",
    "title": "Class OperationOutputParameter | Documentation",
    "keywords": "Class OperationOutputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#OperationOutputParameter Describe an output parameter of an operation. Inheritance System.Object OperationOutputParameter Implements IOperationOutputParameter IOutputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IOutputFormat ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class OperationOutputParameter : IOperationOutputParameter, IOutputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IOutputFormat, ISavable Constructors OperationOutputParameter(OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, String, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, String>>>, OneOf<None, String>, OneOf<None, String>, OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>, OneOf<None, Boolean>, OneOf<None, String, List<String>>, OneOf<None, String>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public OperationOutputParameter(OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string>>> type, OneOf<None, string> id = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles = default(OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>), OneOf<None, bool> streamable = default(OneOf<None, bool>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, string> format = default(OneOf<None, string>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String , List < OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String >>> type OneOf.OneOf < OneOf.Types.None , System.String > id OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> secondaryFiles OneOf.OneOf < OneOf.Types.None , System.Boolean > streamable OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , System.String > format LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format Only valid when type: File or is an array of items: File . This is the file format that will be assigned to the output File object. Declaration public OneOf<None, string> format { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > secondaryFiles Only valid when type: File or is an array of items: File . Provides a pattern or expression specifying files or directories that should be included alongside the primary file. Secondary files may be required or optional. When not explicitly specified, secondary files specified for inputs are required and outputs are optional. An implementation must include matching Files and Directories in the secondaryFiles property of the primary file. These Files and Directories must be transferred and staged alongside the primary file. An implementation may fail workflow execution if a required secondary file does not exist. If the value is an expression, the value of self in the expression must be the primary input or output File object to which this binding applies. The basename , nameroot and nameext fields must be present in self . For CommandLineTool outputs the path field must also be present. The expression must return a filename string relative to the path to the primary File, a File or Directory object with either path or location and basename fields set, or an array consisting of strings or File or Directory objects. It is legal to reference an unchanged File or Directory object taken from input as a secondaryFile. The expression may return \"null\" in which case there is no secondaryFile from that expression. To work on non-filename-preserving storage systems, portable tool descriptions should avoid constructing new values from location , but should construct relative references using basename or nameroot instead. If a value in secondaryFiles is a string that is not an expression, it specifies that the following pattern should be applied to the path of the primary file to yield a filename relative to the primary File: If string ends with ? character, remove the last ? and mark the resulting secondary file as optional. If string begins with one or more caret ^ characters, for each caret, remove the last file extension from the path (the last period . and all following characters). If there are no file extensions, the path is unchanged. Append the remainder of the string to the end of the file path. Declaration public OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> streamable Only valid when type: File or is an array of items: File . A value of true indicates that the file is read or written sequentially without seeking. An implementation may use this flag to indicate whether it is valid to stream file contents using a named pipe. Default: false . Declaration public OneOf<None, bool> streamable { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > type Specify valid types of data that may be assigned to this parameter. Declaration public OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string>>> type { get; set; } Property Value Type Description OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String , List < OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IOperationOutputParameter IOutputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IOutputFormat ISavable"
  },
  "reference/CWLDotNet.OutputArraySchema.html": {
    "href": "reference/CWLDotNet.OutputArraySchema.html",
    "title": "Class OutputArraySchema | Documentation",
    "keywords": "Class OutputArraySchema Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputArraySchema Inheritance System.Object OutputArraySchema Implements IOutputArraySchema IArraySchema IOutputSchema IIOSchema ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class OutputArraySchema : IOutputArraySchema, IArraySchema, IOutputSchema, IIOSchema, ILabeled, IDocumented, ISavable Constructors OutputArraySchema(OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, String, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, String>>>, enum_d062602be0b4b8fd33e69e29a841317b6ab665bc, OneOf<None, String>, OneOf<None, String>, OneOf<None, String, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public OutputArraySchema(OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string>>> items, enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type, OneOf<None, string> name = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String , List < OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String >>> items enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type OneOf.OneOf < OneOf.Types.None , System.String > name OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> items Defines the type of the array elements. Declaration public OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string>>> items { get; set; } Property Value Type Description OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String , List < OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String >>> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The identifier for this type Declaration public OneOf<None, string> name { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > type Must be array Declaration public enum_d062602be0b4b8fd33e69e29a841317b6ab665bc type { get; set; } Property Value Type Description enum_d062602be0b4b8fd33e69e29a841317b6ab665bc Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IOutputArraySchema IArraySchema IOutputSchema IIOSchema ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.OutputEnumSchema.html": {
    "href": "reference/CWLDotNet.OutputEnumSchema.html",
    "title": "Class OutputEnumSchema | Documentation",
    "keywords": "Class OutputEnumSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputEnumSchema Inheritance System.Object OutputEnumSchema Implements IOutputEnumSchema IEnumSchema IOutputSchema IIOSchema ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class OutputEnumSchema : IOutputEnumSchema, IEnumSchema, IOutputSchema, IIOSchema, ILabeled, IDocumented, ISavable Constructors OutputEnumSchema(List<String>, enum_d961d79c225752b9fadb617367615ab176b47d77, OneOf<None, String>, OneOf<None, String>, OneOf<None, String, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public OutputEnumSchema(List<string> symbols, enum_d961d79c225752b9fadb617367615ab176b47d77 type, OneOf<None, string> name = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < System.String > symbols enum_d961d79c225752b9fadb617367615ab176b47d77 type OneOf.OneOf < OneOf.Types.None , System.String > name OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The identifier for this type Declaration public OneOf<None, string> name { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > symbols Defines the set of valid symbols. Declaration public List<string> symbols { get; set; } Property Value Type Description List < System.String > type Must be enum Declaration public enum_d961d79c225752b9fadb617367615ab176b47d77 type { get; set; } Property Value Type Description enum_d961d79c225752b9fadb617367615ab176b47d77 Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IOutputEnumSchema IEnumSchema IOutputSchema IIOSchema ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.OutputRecordField.html": {
    "href": "reference/CWLDotNet.OutputRecordField.html",
    "title": "Class OutputRecordField | Documentation",
    "keywords": "Class OutputRecordField Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputRecordField Inheritance System.Object OutputRecordField Implements IOutputRecordField IRecordField IDocumented IFieldBase ILabeled IOutputFormat ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class OutputRecordField : IOutputRecordField, IRecordField, IDocumented, IFieldBase, ILabeled, IOutputFormat, ISavable Constructors OutputRecordField(OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, String, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, String>>>, String, OneOf<None, String, List<String>>, OneOf<None, String>, OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>, OneOf<None, Boolean>, OneOf<None, String>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public OutputRecordField(OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string>>> type, string name = null, OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles = default(OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>), OneOf<None, bool> streamable = default(OneOf<None, bool>), OneOf<None, string> format = default(OneOf<None, string>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String , List < OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String >>> type System.String name OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> secondaryFiles OneOf.OneOf < OneOf.Types.None , System.Boolean > streamable OneOf.OneOf < OneOf.Types.None , System.String > format LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format Only valid when type: File or is an array of items: File . This is the file format that will be assigned to the output File object. Declaration public OneOf<None, string> format { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The name of the field Declaration public string name { get; set; } Property Value Type Description System.String secondaryFiles Only valid when type: File or is an array of items: File . Provides a pattern or expression specifying files or directories that should be included alongside the primary file. Secondary files may be required or optional. When not explicitly specified, secondary files specified for inputs are required and outputs are optional. An implementation must include matching Files and Directories in the secondaryFiles property of the primary file. These Files and Directories must be transferred and staged alongside the primary file. An implementation may fail workflow execution if a required secondary file does not exist. If the value is an expression, the value of self in the expression must be the primary input or output File object to which this binding applies. The basename , nameroot and nameext fields must be present in self . For CommandLineTool outputs the path field must also be present. The expression must return a filename string relative to the path to the primary File, a File or Directory object with either path or location and basename fields set, or an array consisting of strings or File or Directory objects. It is legal to reference an unchanged File or Directory object taken from input as a secondaryFile. The expression may return \"null\" in which case there is no secondaryFile from that expression. To work on non-filename-preserving storage systems, portable tool descriptions should avoid constructing new values from location , but should construct relative references using basename or nameroot instead. If a value in secondaryFiles is a string that is not an expression, it specifies that the following pattern should be applied to the path of the primary file to yield a filename relative to the primary File: If string ends with ? character, remove the last ? and mark the resulting secondary file as optional. If string begins with one or more caret ^ characters, for each caret, remove the last file extension from the path (the last period . and all following characters). If there are no file extensions, the path is unchanged. Append the remainder of the string to the end of the file path. Declaration public OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> streamable Only valid when type: File or is an array of items: File . A value of true indicates that the file is read or written sequentially without seeking. An implementation may use this flag to indicate whether it is valid to stream file contents using a named pipe. Default: false . Declaration public OneOf<None, bool> streamable { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > type The field type Declaration public OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string>>> type { get; set; } Property Value Type Description OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String , List < OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IOutputRecordField IRecordField IDocumented IFieldBase ILabeled IOutputFormat ISavable"
  },
  "reference/CWLDotNet.OutputRecordSchema.html": {
    "href": "reference/CWLDotNet.OutputRecordSchema.html",
    "title": "Class OutputRecordSchema | Documentation",
    "keywords": "Class OutputRecordSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputRecordSchema Inheritance System.Object OutputRecordSchema Implements IOutputRecordSchema IRecordSchema IOutputSchema IIOSchema ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class OutputRecordSchema : IOutputRecordSchema, IRecordSchema, IOutputSchema, IIOSchema, ILabeled, IDocumented, ISavable Constructors OutputRecordSchema(enum_d9cba076fca539106791a4f46d198c7fcfbdb779, OneOf<None, String>, OneOf<None, List<OutputRecordField>>, OneOf<None, String>, OneOf<None, String, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public OutputRecordSchema(enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type, OneOf<None, string> name = default(OneOf<None, string>), OneOf<None, List<OutputRecordField>> fields = default(OneOf<None, List<OutputRecordField>>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type OneOf.OneOf < OneOf.Types.None , System.String > name OneOf.OneOf < OneOf.Types.None , List < OutputRecordField >> fields OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> fields Defines the fields of the record. Declaration public OneOf<None, List<OutputRecordField>> fields { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < OutputRecordField >> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > name The identifier for this type Declaration public OneOf<None, string> name { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > type Must be record Declaration public enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type { get; set; } Property Value Type Description enum_d9cba076fca539106791a4f46d198c7fcfbdb779 Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IOutputRecordSchema IRecordSchema IOutputSchema IIOSchema ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.PickValueMethod.html": {
    "href": "reference/CWLDotNet.PickValueMethod.html",
    "title": "Class PickValueMethod | Documentation",
    "keywords": "Class PickValueMethod Inheritance System.Object PickValueMethod Implements IEnumClass < PickValueMethod > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class PickValueMethod : IEnumClass<PickValueMethod>, IEnumClass Fields ALL_NON_NULL Declaration public static readonly PickValueMethod ALL_NON_NULL Field Value Type Description PickValueMethod FIRST_NON_NULL Declaration public static readonly PickValueMethod FIRST_NON_NULL Field Value Type Description PickValueMethod THE_ONLY_NON_NULL Declaration public static readonly PickValueMethod THE_ONLY_NON_NULL Field Value Type Description PickValueMethod Properties Members Declaration public static IList<PickValueMethod> Members { get; } Property Value Type Description IList < PickValueMethod > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static PickValueMethod Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description PickValueMethod Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.PrimitiveType.html": {
    "href": "reference/CWLDotNet.PrimitiveType.html",
    "title": "Class PrimitiveType | Documentation",
    "keywords": "Class PrimitiveType Inheritance System.Object PrimitiveType Implements IEnumClass < PrimitiveType > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class PrimitiveType : IEnumClass<PrimitiveType>, IEnumClass Fields BOOLEAN Declaration public static readonly PrimitiveType BOOLEAN Field Value Type Description PrimitiveType DOUBLE Declaration public static readonly PrimitiveType DOUBLE Field Value Type Description PrimitiveType FLOAT Declaration public static readonly PrimitiveType FLOAT Field Value Type Description PrimitiveType INT Declaration public static readonly PrimitiveType INT Field Value Type Description PrimitiveType LONG Declaration public static readonly PrimitiveType LONG Field Value Type Description PrimitiveType NULL Declaration public static readonly PrimitiveType NULL Field Value Type Description PrimitiveType STRING Declaration public static readonly PrimitiveType STRING Field Value Type Description PrimitiveType Properties Members Declaration public static IList<PrimitiveType> Members { get; } Property Value Type Description IList < PrimitiveType > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static PrimitiveType Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description PrimitiveType Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.RecordField.html": {
    "href": "reference/CWLDotNet.RecordField.html",
    "title": "Class RecordField | Documentation",
    "keywords": "Class RecordField Auto-generated class implementation for https://w3id.org/cwl/salad#RecordField A field of a record. Inheritance System.Object RecordField Implements IRecordField IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class RecordField : IRecordField, IDocumented, ISavable Constructors RecordField(OneOf<PrimitiveType, RecordSchema, EnumSchema, ArraySchema, String, List<OneOf<PrimitiveType, RecordSchema, EnumSchema, ArraySchema, String>>>, String, OneOf<None, String, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public RecordField(OneOf<PrimitiveType, RecordSchema, EnumSchema, ArraySchema, string, List<OneOf<PrimitiveType, RecordSchema, EnumSchema, ArraySchema, string>>> type, string name = null, OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < PrimitiveType , RecordSchema , EnumSchema , ArraySchema , System.String , List < OneOf.OneOf < PrimitiveType , RecordSchema , EnumSchema , ArraySchema , System.String >>> type System.String name OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> name The name of the field Declaration public string name { get; set; } Property Value Type Description System.String type The field type Declaration public OneOf<PrimitiveType, RecordSchema, EnumSchema, ArraySchema, string, List<OneOf<PrimitiveType, RecordSchema, EnumSchema, ArraySchema, string>>> type { get; set; } Property Value Type Description OneOf.OneOf < PrimitiveType , RecordSchema , EnumSchema , ArraySchema , System.String , List < OneOf.OneOf < PrimitiveType , RecordSchema , EnumSchema , ArraySchema , System.String >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IRecordField IDocumented ISavable"
  },
  "reference/CWLDotNet.RecordSchema.html": {
    "href": "reference/CWLDotNet.RecordSchema.html",
    "title": "Class RecordSchema | Documentation",
    "keywords": "Class RecordSchema Auto-generated class implementation for https://w3id.org/cwl/salad#RecordSchema Inheritance System.Object RecordSchema Implements IRecordSchema ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class RecordSchema : IRecordSchema, ISavable Constructors RecordSchema(enum_d9cba076fca539106791a4f46d198c7fcfbdb779, OneOf<None, List<RecordField>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public RecordSchema(enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type, OneOf<None, List<RecordField>> fields = default(OneOf<None, List<RecordField>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type OneOf.OneOf < OneOf.Types.None , List < RecordField >> fields LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties fields Defines the fields of the record. Declaration public OneOf<None, List<RecordField>> fields { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < RecordField >> type Must be record Declaration public enum_d9cba076fca539106791a4f46d198c7fcfbdb779 type { get; set; } Property Value Type Description enum_d9cba076fca539106791a4f46d198c7fcfbdb779 Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IRecordSchema ISavable"
  },
  "reference/CWLDotNet.ResourceRequirement.html": {
    "href": "reference/CWLDotNet.ResourceRequirement.html",
    "title": "Class ResourceRequirement | Documentation",
    "keywords": "Class ResourceRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#ResourceRequirement Specify basic hardware resource requirements. \"min\" is the minimum amount of a resource that must be reserved to schedule a job. If \"min\" cannot be satisfied, the job should not be run. \"max\" is the maximum amount of a resource that the job shall be allocated. If a node has sufficient resources, multiple jobs may be scheduled on a single node provided each job's \"max\" resource requirements are met. If a job attempts to exceed its resource allocation, an implementation may deny additional resources, which may result in job failure. If both \"min\" and \"max\" are specified, an implementation may choose to allocate any amount between \"min\" and \"max\", with the actual allocation provided in the runtime object. If \"min\" is specified but \"max\" is not, then \"max\" == \"min\" If \"max\" is specified by \"min\" is not, then \"min\" == \"max\". It is an error if max < min. It is an error if the value of any of these fields is negative. If neither \"min\" nor \"max\" is specified for a resource, use the default values below. Inheritance System.Object ResourceRequirement Implements IResourceRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ResourceRequirement : IResourceRequirement, IProcessRequirement, ISavable Constructors ResourceRequirement(ResourceRequirement_class, OneOf<None, Int32, Int64, Double, String>, OneOf<None, Int32, Int64, Double, String>, OneOf<None, Int32, Int64, Double, String>, OneOf<None, Int32, Int64, Double, String>, OneOf<None, Int32, Int64, Double, String>, OneOf<None, Int32, Int64, Double, String>, OneOf<None, Int32, Int64, Double, String>, OneOf<None, Int32, Int64, Double, String>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public ResourceRequirement(ResourceRequirement_class class_ = null, OneOf<None, int, long, double, string> coresMin = default(OneOf<None, int, long, double, string>), OneOf<None, int, long, double, string> coresMax = default(OneOf<None, int, long, double, string>), OneOf<None, int, long, double, string> ramMin = default(OneOf<None, int, long, double, string>), OneOf<None, int, long, double, string> ramMax = default(OneOf<None, int, long, double, string>), OneOf<None, int, long, double, string> tmpdirMin = default(OneOf<None, int, long, double, string>), OneOf<None, int, long, double, string> tmpdirMax = default(OneOf<None, int, long, double, string>), OneOf<None, int, long, double, string> outdirMin = default(OneOf<None, int, long, double, string>), OneOf<None, int, long, double, string> outdirMax = default(OneOf<None, int, long, double, string>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description ResourceRequirement_class class_ OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > coresMin OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > coresMax OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > ramMin OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > ramMax OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > tmpdirMin OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > tmpdirMax OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > outdirMin OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > outdirMax LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'ResourceRequirement' Declaration public ResourceRequirement_class class_ { get; set; } Property Value Type Description ResourceRequirement_class coresMax Maximum reserved number of CPU cores. See coresMin for discussion about fractional CPU requests. Declaration public OneOf<None, int, long, double, string> coresMax { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > coresMin Minimum reserved number of CPU cores (default is 1). May be a fractional value to indicate to a scheduling algorithm that one core can be allocated to multiple jobs. For example, a value of 0.25 indicates that up to 4 jobs may run in parallel on 1 core. A value of 1.25 means that up to 3 jobs can run on a 4 core system (4/1.25 ≈ 3). Processes can only share a core allocation if the sum of each of their ramMax , tmpdirMax , and outdirMax requests also do not exceed the capacity of the node. Processes sharing a core must have the same level of isolation (typically a container or VM) that they would normally. The reported number of CPU cores reserved for the process, which is available to expressions on the CommandLineTool as runtime.cores , must be a non-zero integer, and may be calculated by rounding up the cores request to the next whole number. Scheduling systems may allocate fractional CPU resources by setting quotas or scheduling weights. Scheduling systems that do not support fractional CPUs may round up the request to the next whole number. Declaration public OneOf<None, int, long, double, string> coresMin { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > outdirMax Maximum reserved filesystem based storage for the designated output directory, in mebibytes (2**20) See outdirMin for discussion about fractional storage requests. Declaration public OneOf<None, int, long, double, string> outdirMax { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > outdirMin Minimum reserved filesystem based storage for the designated output directory, in mebibytes (2**20) (default is 1024) May be a fractional value. If so, the actual storage request must be rounded up to the next whole number. The reported amount of storage reserved for the process, which is available to expressions on the CommandLineTool as runtime.outdirSize , must be a non-zero integer. Declaration public OneOf<None, int, long, double, string> outdirMin { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > ramMax Maximum reserved RAM in mebibytes (2**20) See ramMin for discussion about fractional RAM requests. Declaration public OneOf<None, int, long, double, string> ramMax { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > ramMin Minimum reserved RAM in mebibytes (2**20) (default is 256) May be a fractional value. If so, the actual RAM request must be rounded up to the next whole number. The reported amount of RAM reserved for the process, which is available to expressions on the CommandLineTool as runtime.ram , must be a non-zero integer. Declaration public OneOf<None, int, long, double, string> ramMin { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > tmpdirMax Maximum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20) See tmpdirMin for discussion about fractional storage requests. Declaration public OneOf<None, int, long, double, string> tmpdirMax { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > tmpdirMin Minimum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20) (default is 1024) May be a fractional value. If so, the actual storage request must be rounded up to the next whole number. The reported amount of storage reserved for the process, which is available to expressions on the CommandLineTool as runtime.tmpdirSize , must be a non-zero integer. Declaration public OneOf<None, int, long, double, string> tmpdirMin { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Int32 , System.Int64 , System.Double , System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IResourceRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.ResourceRequirement_class.html": {
    "href": "reference/CWLDotNet.ResourceRequirement_class.html",
    "title": "Class ResourceRequirement_class | Documentation",
    "keywords": "Class ResourceRequirement_class Inheritance System.Object ResourceRequirement_class Implements IEnumClass < ResourceRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ResourceRequirement_class : IEnumClass<ResourceRequirement_class>, IEnumClass Fields RESOURCEREQUIREMENT Declaration public static readonly ResourceRequirement_class RESOURCEREQUIREMENT Field Value Type Description ResourceRequirement_class Properties Members Declaration public static IList<ResourceRequirement_class> Members { get; } Property Value Type Description IList < ResourceRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static ResourceRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description ResourceRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.RootLoader.html": {
    "href": "reference/CWLDotNet.RootLoader.html",
    "title": "Class RootLoader | Documentation",
    "keywords": "Class RootLoader Inheritance System.Object RootLoader Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class RootLoader Methods LoadDocument(Dictionary<Object, Object>, String, LoadingOptions) Declaration public static OneOf<CommandLineTool, ExpressionTool, Workflow, Operation, List<OneOf<CommandLineTool, ExpressionTool, Workflow, Operation>>> LoadDocument(Dictionary<object, object> doc, string baseUri_, LoadingOptions loadingOptions_ = null) Parameters Type Name Description Dictionary < System.Object , System.Object > doc System.String baseUri_ LoadingOptions loadingOptions_ Returns Type Description OneOf.OneOf < CommandLineTool , ExpressionTool , Workflow , Operation , List < OneOf.OneOf < CommandLineTool , ExpressionTool , Workflow , Operation >>> LoadDocument(String, String, LoadingOptions) Declaration public static OneOf<CommandLineTool, ExpressionTool, Workflow, Operation, List<OneOf<CommandLineTool, ExpressionTool, Workflow, Operation>>> LoadDocument(string doc, string uri_, LoadingOptions loadingOptions_ = null) Parameters Type Name Description System.String doc System.String uri_ LoadingOptions loadingOptions_ Returns Type Description OneOf.OneOf < CommandLineTool , ExpressionTool , Workflow , Operation , List < OneOf.OneOf < CommandLineTool , ExpressionTool , Workflow , Operation >>>"
  },
  "reference/CWLDotNet.ScatterFeatureRequirement.html": {
    "href": "reference/CWLDotNet.ScatterFeatureRequirement.html",
    "title": "Class ScatterFeatureRequirement | Documentation",
    "keywords": "Class ScatterFeatureRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#ScatterFeatureRequirement Indicates that the workflow platform must support the scatter and scatterMethod fields of WorkflowStep . Inheritance System.Object ScatterFeatureRequirement Implements IScatterFeatureRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ScatterFeatureRequirement : IScatterFeatureRequirement, IProcessRequirement, ISavable Constructors ScatterFeatureRequirement(ScatterFeatureRequirement_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public ScatterFeatureRequirement(ScatterFeatureRequirement_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description ScatterFeatureRequirement_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'ScatterFeatureRequirement' Declaration public ScatterFeatureRequirement_class class_ { get; set; } Property Value Type Description ScatterFeatureRequirement_class Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IScatterFeatureRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.ScatterFeatureRequirement_class.html": {
    "href": "reference/CWLDotNet.ScatterFeatureRequirement_class.html",
    "title": "Class ScatterFeatureRequirement_class | Documentation",
    "keywords": "Class ScatterFeatureRequirement_class Inheritance System.Object ScatterFeatureRequirement_class Implements IEnumClass < ScatterFeatureRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ScatterFeatureRequirement_class : IEnumClass<ScatterFeatureRequirement_class>, IEnumClass Fields SCATTERFEATUREREQUIREMENT Declaration public static readonly ScatterFeatureRequirement_class SCATTERFEATUREREQUIREMENT Field Value Type Description ScatterFeatureRequirement_class Properties Members Declaration public static IList<ScatterFeatureRequirement_class> Members { get; } Property Value Type Description IList < ScatterFeatureRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static ScatterFeatureRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description ScatterFeatureRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.ScatterMethod.html": {
    "href": "reference/CWLDotNet.ScatterMethod.html",
    "title": "Class ScatterMethod | Documentation",
    "keywords": "Class ScatterMethod Inheritance System.Object ScatterMethod Implements IEnumClass < ScatterMethod > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ScatterMethod : IEnumClass<ScatterMethod>, IEnumClass Fields DOTPRODUCT Declaration public static readonly ScatterMethod DOTPRODUCT Field Value Type Description ScatterMethod FLAT_CROSSPRODUCT Declaration public static readonly ScatterMethod FLAT_CROSSPRODUCT Field Value Type Description ScatterMethod NESTED_CROSSPRODUCT Declaration public static readonly ScatterMethod NESTED_CROSSPRODUCT Field Value Type Description ScatterMethod Properties Members Declaration public static IList<ScatterMethod> Members { get; } Property Value Type Description IList < ScatterMethod > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static ScatterMethod Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description ScatterMethod Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.SchemaDefRequirement.html": {
    "href": "reference/CWLDotNet.SchemaDefRequirement.html",
    "title": "Class SchemaDefRequirement | Documentation",
    "keywords": "Class SchemaDefRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#SchemaDefRequirement This field consists of an array of type definitions which must be used when interpreting the inputs and outputs fields. When a type field contains a IRI, the implementation must check if the type is defined in schemaDefs and use that definition. If the type is not found in schemaDefs , it is an error. The entries in schemaDefs must be processed in the order listed such that later schema definitions may refer to earlier schema definitions. Type definitions are allowed for enum and record types only. Type definitions may be shared by defining them in a file and then $include -ing them in the types field. A file can contain a list of type definitions Inheritance System.Object SchemaDefRequirement Implements ISchemaDefRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class SchemaDefRequirement : ISchemaDefRequirement, IProcessRequirement, ISavable Constructors SchemaDefRequirement(List<OneOf<CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema>>, SchemaDefRequirement_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public SchemaDefRequirement(List<OneOf<CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema>> types, SchemaDefRequirement_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < OneOf.OneOf < CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema >> types SchemaDefRequirement_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'SchemaDefRequirement' Declaration public SchemaDefRequirement_class class_ { get; set; } Property Value Type Description SchemaDefRequirement_class types The list of type definitions. Declaration public List<OneOf<CommandInputRecordSchema, CommandInputEnumSchema, CommandInputArraySchema>> types { get; set; } Property Value Type Description List < OneOf.OneOf < CommandInputRecordSchema , CommandInputEnumSchema , CommandInputArraySchema >> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ISchemaDefRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.SchemaDefRequirement_class.html": {
    "href": "reference/CWLDotNet.SchemaDefRequirement_class.html",
    "title": "Class SchemaDefRequirement_class | Documentation",
    "keywords": "Class SchemaDefRequirement_class Inheritance System.Object SchemaDefRequirement_class Implements IEnumClass < SchemaDefRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class SchemaDefRequirement_class : IEnumClass<SchemaDefRequirement_class>, IEnumClass Fields SCHEMADEFREQUIREMENT Declaration public static readonly SchemaDefRequirement_class SCHEMADEFREQUIREMENT Field Value Type Description SchemaDefRequirement_class Properties Members Declaration public static IList<SchemaDefRequirement_class> Members { get; } Property Value Type Description IList < SchemaDefRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static SchemaDefRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description SchemaDefRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.SecondaryFileSchema.html": {
    "href": "reference/CWLDotNet.SecondaryFileSchema.html",
    "title": "Class SecondaryFileSchema | Documentation",
    "keywords": "Class SecondaryFileSchema Auto-generated class implementation for https://w3id.org/cwl/cwl#SecondaryFileSchema Secondary files are specified using the following micro-DSL for secondary files: If the value is a string, it is transformed to an object with two fields pattern and required By default, the value of required is null (this indicates default behavior, which may be based on the context) If the value ends with a question mark ? the question mark is stripped off and the value of the field required is set to False The remaining value is assigned to the field pattern For implementation details and examples, please see this section in the Schema Salad specification. Inheritance System.Object SecondaryFileSchema Implements ISecondaryFileSchema ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class SecondaryFileSchema : ISecondaryFileSchema, ISavable Constructors SecondaryFileSchema(OneOf<String>, OneOf<None, Boolean, String>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public SecondaryFileSchema(OneOf<string> pattern, OneOf<None, bool, string> required = default(OneOf<None, bool, string>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < System.String > pattern OneOf.OneOf < OneOf.Types.None , System.Boolean , System.String > required LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties pattern Provides a pattern or expression specifying files or directories that should be included alongside the primary file. If the value is an expression, the value of self in the expression must be the primary input or output File object to which this binding applies. The basename , nameroot and nameext fields must be present in self . For CommandLineTool inputs the location field must also be present. For CommandLineTool outputs the path field must also be present. If secondary files were included on an input File object as part of the Process invocation, they must also be present in secondaryFiles on self . The expression must return either: a filename string relative to the path to the primary File, a File or Directory object ( class: File or class: Directory ) with either location (for inputs) or path (for outputs) and basename fields set, or an array consisting of strings or File or Directory objects as previously described. It is legal to use location from a File or Directory object passed in as input, including location from secondary files on self . If an expression returns a File object with the same location but a different basename as a secondary file that was passed in, the expression result takes precedence. Setting the basename with an expression this way affects the path where the secondary file will be staged to in the CommandLineTool. The expression may return \"null\" in which case there is no secondary file from that expression. To work on non-filename-preserving storage systems, portable tool descriptions should treat location as an opaque identifier and avoid constructing new values from location , but should construct relative references using basename or nameroot instead, or propagate location from defined inputs. If a value in secondaryFiles is a string that is not an expression, it specifies that the following pattern should be applied to the path of the primary file to yield a filename relative to the primary File: If string ends with ? character, remove the last ? and mark the resulting secondary file as optional. If string begins with one or more caret ^ characters, for each caret, remove the last file extension from the path (the last period . and all following characters). If there are no file extensions, the path is unchanged. Append the remainder of the string to the end of the file path. Declaration public OneOf<string> pattern { get; set; } Property Value Type Description OneOf.OneOf < System.String > required An implementation must not fail workflow execution if required is set to false and the expected secondary file does not exist. Default value for required field is true for secondary files on input and false for secondary files on output. Declaration public OneOf<None, bool, string> required { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean , System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ISecondaryFileSchema ISavable"
  },
  "reference/CWLDotNet.ShellCommandRequirement.html": {
    "href": "reference/CWLDotNet.ShellCommandRequirement.html",
    "title": "Class ShellCommandRequirement | Documentation",
    "keywords": "Class ShellCommandRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#ShellCommandRequirement Modify the behavior of CommandLineTool to generate a single string containing a shell command line. Each item in the arguments list must be joined into a string separated by single spaces and quoted to prevent intepretation by the shell, unless CommandLineBinding for that argument contains shellQuote: false . If shellQuote: false is specified, the argument is joined into the command string without quoting, which allows the use of shell metacharacters such as | for pipes. Inheritance System.Object ShellCommandRequirement Implements IShellCommandRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ShellCommandRequirement : IShellCommandRequirement, IProcessRequirement, ISavable Constructors ShellCommandRequirement(ShellCommandRequirement_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public ShellCommandRequirement(ShellCommandRequirement_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description ShellCommandRequirement_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'ShellCommandRequirement' Declaration public ShellCommandRequirement_class class_ { get; set; } Property Value Type Description ShellCommandRequirement_class Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IShellCommandRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.ShellCommandRequirement_class.html": {
    "href": "reference/CWLDotNet.ShellCommandRequirement_class.html",
    "title": "Class ShellCommandRequirement_class | Documentation",
    "keywords": "Class ShellCommandRequirement_class Inheritance System.Object ShellCommandRequirement_class Implements IEnumClass < ShellCommandRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ShellCommandRequirement_class : IEnumClass<ShellCommandRequirement_class>, IEnumClass Fields SHELLCOMMANDREQUIREMENT Declaration public static readonly ShellCommandRequirement_class SHELLCOMMANDREQUIREMENT Field Value Type Description ShellCommandRequirement_class Properties Members Declaration public static IList<ShellCommandRequirement_class> Members { get; } Property Value Type Description IList < ShellCommandRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static ShellCommandRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description ShellCommandRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.SoftwarePackage.html": {
    "href": "reference/CWLDotNet.SoftwarePackage.html",
    "title": "Class SoftwarePackage | Documentation",
    "keywords": "Class SoftwarePackage Auto-generated class implementation for https://w3id.org/cwl/cwl#SoftwarePackage Inheritance System.Object SoftwarePackage Implements ISoftwarePackage ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class SoftwarePackage : ISoftwarePackage, ISavable Constructors SoftwarePackage(String, OneOf<None, List<String>>, OneOf<None, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public SoftwarePackage(string package_, OneOf<None, List<string>> version = default(OneOf<None, List<string>>), OneOf<None, List<string>> specs = default(OneOf<None, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description System.String package_ OneOf.OneOf < OneOf.Types.None , List < System.String >> version OneOf.OneOf < OneOf.Types.None , List < System.String >> specs LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties package_ The name of the software to be made available. If the name is common, inconsistent, or otherwise ambiguous it should be combined with one or more identifiers in the specs field. Declaration public string package_ { get; set; } Property Value Type Description System.String specs One or more IRI s identifying resources for installing or enabling the software named in the package field. Implementations may provide resolvers which map these software identifer IRIs to some configuration action; or they can use only the name from the package field on a best effort basis. For example, the IRI https://packages.debian.org/bowtie could be resolved with apt-get install bowtie . The IRI https://anaconda.org/bioconda/bowtie could be resolved with conda install -c bioconda bowtie . IRIs can also be system independent and used to map to a specific software installation or selection mechanism. Using RRID as an example: https://identifiers.org/rrid/RRID:SCR_005476 could be fulfilled using the above mentioned Debian or bioconda package, a local installation managed by Environment Modules , or any other mechanism the platform chooses. IRIs can also be from identifer sources that are discipline specific yet still system independent. As an example, the equivalent ELIXIR Tools and Data Service Registry IRI to the previous RRID example is https://bio.tools/tool/bowtie2/version/2.2.8 . If supported by a given registry, implementations are encouraged to query these system independent sofware identifier IRIs directly for links to packaging systems. A site specific IRI can be listed as well. For example, an academic computing cluster using Environment Modules could list the IRI https://hpc.example.edu/modules/bowtie-tbb/1.22 to indicate that module load bowtie-tbb/1.1.2 should be executed to make available bowtie version 1.1.2 compiled with the TBB library prior to running the accompanying Workflow or CommandLineTool. Note that the example IRI is specific to a particular institution and computing environment as the Environment Modules system does not have a common namespace or standardized naming convention. This last example is the least portable and should only be used if mechanisms based off of the package field or more generic IRIs are unavailable or unsuitable. While harmless to other sites, site specific software IRIs should be left out of shared CWL descriptions to avoid clutter. Declaration public OneOf<None, List<string>> specs { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.String >> version The (optional) versions of the software that are known to be compatible. Declaration public OneOf<None, List<string>> version { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.String >> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ISoftwarePackage ISavable"
  },
  "reference/CWLDotNet.SoftwareRequirement.html": {
    "href": "reference/CWLDotNet.SoftwareRequirement.html",
    "title": "Class SoftwareRequirement | Documentation",
    "keywords": "Class SoftwareRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#SoftwareRequirement A list of software packages that should be configured in the environment of the defined process. Inheritance System.Object SoftwareRequirement Implements ISoftwareRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class SoftwareRequirement : ISoftwareRequirement, IProcessRequirement, ISavable Constructors SoftwareRequirement(List<SoftwarePackage>, SoftwareRequirement_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public SoftwareRequirement(List<SoftwarePackage> packages, SoftwareRequirement_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < SoftwarePackage > packages SoftwareRequirement_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'SoftwareRequirement' Declaration public SoftwareRequirement_class class_ { get; set; } Property Value Type Description SoftwareRequirement_class packages The list of software to be configured. Declaration public List<SoftwarePackage> packages { get; set; } Property Value Type Description List < SoftwarePackage > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ISoftwareRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.SoftwareRequirement_class.html": {
    "href": "reference/CWLDotNet.SoftwareRequirement_class.html",
    "title": "Class SoftwareRequirement_class | Documentation",
    "keywords": "Class SoftwareRequirement_class Inheritance System.Object SoftwareRequirement_class Implements IEnumClass < SoftwareRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class SoftwareRequirement_class : IEnumClass<SoftwareRequirement_class>, IEnumClass Fields SOFTWAREREQUIREMENT Declaration public static readonly SoftwareRequirement_class SOFTWAREREQUIREMENT Field Value Type Description SoftwareRequirement_class Properties Members Declaration public static IList<SoftwareRequirement_class> Members { get; } Property Value Type Description IList < SoftwareRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static SoftwareRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description SoftwareRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.stderr.html": {
    "href": "reference/CWLDotNet.stderr.html",
    "title": "Class stderr | Documentation",
    "keywords": "Class stderr Inheritance System.Object stderr Implements IEnumClass < stderr > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class stderr : IEnumClass<stderr>, IEnumClass Fields STDERR Declaration public static readonly stderr STDERR Field Value Type Description stderr Properties Members Declaration public static IList<stderr> Members { get; } Property Value Type Description IList < stderr > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static stderr Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description stderr Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.stdin.html": {
    "href": "reference/CWLDotNet.stdin.html",
    "title": "Class stdin | Documentation",
    "keywords": "Class stdin Inheritance System.Object stdin Implements IEnumClass < stdin > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class stdin : IEnumClass<stdin>, IEnumClass Fields STDIN Declaration public static readonly stdin STDIN Field Value Type Description stdin Properties Members Declaration public static IList<stdin> Members { get; } Property Value Type Description IList < stdin > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static stdin Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description stdin Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.stdout.html": {
    "href": "reference/CWLDotNet.stdout.html",
    "title": "Class stdout | Documentation",
    "keywords": "Class stdout Inheritance System.Object stdout Implements IEnumClass < stdout > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class stdout : IEnumClass<stdout>, IEnumClass Fields STDOUT Declaration public static readonly stdout STDOUT Field Value Type Description stdout Properties Members Declaration public static IList<stdout> Members { get; } Property Value Type Description IList < stdout > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static stdout Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description stdout Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.StepInputExpressionRequirement.html": {
    "href": "reference/CWLDotNet.StepInputExpressionRequirement.html",
    "title": "Class StepInputExpressionRequirement | Documentation",
    "keywords": "Class StepInputExpressionRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#StepInputExpressionRequirement Indicate that the workflow platform must support the valueFrom field of WorkflowStepInput . Inheritance System.Object StepInputExpressionRequirement Implements IStepInputExpressionRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class StepInputExpressionRequirement : IStepInputExpressionRequirement, IProcessRequirement, ISavable Constructors StepInputExpressionRequirement(StepInputExpressionRequirement_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public StepInputExpressionRequirement(StepInputExpressionRequirement_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description StepInputExpressionRequirement_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'StepInputExpressionRequirement' Declaration public StepInputExpressionRequirement_class class_ { get; set; } Property Value Type Description StepInputExpressionRequirement_class Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IStepInputExpressionRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.StepInputExpressionRequirement_class.html": {
    "href": "reference/CWLDotNet.StepInputExpressionRequirement_class.html",
    "title": "Class StepInputExpressionRequirement_class | Documentation",
    "keywords": "Class StepInputExpressionRequirement_class Inheritance System.Object StepInputExpressionRequirement_class Implements IEnumClass < StepInputExpressionRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class StepInputExpressionRequirement_class : IEnumClass<StepInputExpressionRequirement_class>, IEnumClass Fields STEPINPUTEXPRESSIONREQUIREMENT Declaration public static readonly StepInputExpressionRequirement_class STEPINPUTEXPRESSIONREQUIREMENT Field Value Type Description StepInputExpressionRequirement_class Properties Members Declaration public static IList<StepInputExpressionRequirement_class> Members { get; } Property Value Type Description IList < StepInputExpressionRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static StepInputExpressionRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description StepInputExpressionRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.SubworkflowFeatureRequirement.html": {
    "href": "reference/CWLDotNet.SubworkflowFeatureRequirement.html",
    "title": "Class SubworkflowFeatureRequirement | Documentation",
    "keywords": "Class SubworkflowFeatureRequirement Auto-generated class implementation for https://w3id.org/cwl/cwl#SubworkflowFeatureRequirement Indicates that the workflow platform must support nested workflows in the run field of WorkflowStep . Inheritance System.Object SubworkflowFeatureRequirement Implements ISubworkflowFeatureRequirement IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class SubworkflowFeatureRequirement : ISubworkflowFeatureRequirement, IProcessRequirement, ISavable Constructors SubworkflowFeatureRequirement(SubworkflowFeatureRequirement_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public SubworkflowFeatureRequirement(SubworkflowFeatureRequirement_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description SubworkflowFeatureRequirement_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'SubworkflowFeatureRequirement' Declaration public SubworkflowFeatureRequirement_class class_ { get; set; } Property Value Type Description SubworkflowFeatureRequirement_class Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements ISubworkflowFeatureRequirement IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.SubworkflowFeatureRequirement_class.html": {
    "href": "reference/CWLDotNet.SubworkflowFeatureRequirement_class.html",
    "title": "Class SubworkflowFeatureRequirement_class | Documentation",
    "keywords": "Class SubworkflowFeatureRequirement_class Inheritance System.Object SubworkflowFeatureRequirement_class Implements IEnumClass < SubworkflowFeatureRequirement_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class SubworkflowFeatureRequirement_class : IEnumClass<SubworkflowFeatureRequirement_class>, IEnumClass Fields SUBWORKFLOWFEATUREREQUIREMENT Declaration public static readonly SubworkflowFeatureRequirement_class SUBWORKFLOWFEATUREREQUIREMENT Field Value Type Description SubworkflowFeatureRequirement_class Properties Members Declaration public static IList<SubworkflowFeatureRequirement_class> Members { get; } Property Value Type Description IList < SubworkflowFeatureRequirement_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static SubworkflowFeatureRequirement_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description SubworkflowFeatureRequirement_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.ToolTimeLimit.html": {
    "href": "reference/CWLDotNet.ToolTimeLimit.html",
    "title": "Class ToolTimeLimit | Documentation",
    "keywords": "Class ToolTimeLimit Auto-generated class implementation for https://w3id.org/cwl/cwl#ToolTimeLimit Set an upper limit on the execution time of a CommandLineTool. A CommandLineTool whose execution duration exceeds the time limit may be preemptively terminated and considered failed. May also be used by batch systems to make scheduling decisions. The execution duration excludes external operations, such as staging of files, pulling a docker image etc, and only counts wall-time for the execution of the command line itself. Inheritance System.Object ToolTimeLimit Implements IToolTimeLimit IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ToolTimeLimit : IToolTimeLimit, IProcessRequirement, ISavable Constructors ToolTimeLimit(OneOf<Int32, Int64, String>, ToolTimeLimit_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public ToolTimeLimit(OneOf<int, long, string> timelimit, ToolTimeLimit_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < System.Int32 , System.Int64 , System.String > timelimit ToolTimeLimit_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'ToolTimeLimit' Declaration public ToolTimeLimit_class class_ { get; set; } Property Value Type Description ToolTimeLimit_class timelimit The time limit, in seconds. A time limit of zero means no time limit. Negative time limits are an error. Declaration public OneOf<int, long, string> timelimit { get; set; } Property Value Type Description OneOf.OneOf < System.Int32 , System.Int64 , System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IToolTimeLimit IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.ToolTimeLimit_class.html": {
    "href": "reference/CWLDotNet.ToolTimeLimit_class.html",
    "title": "Class ToolTimeLimit_class | Documentation",
    "keywords": "Class ToolTimeLimit_class Inheritance System.Object ToolTimeLimit_class Implements IEnumClass < ToolTimeLimit_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ToolTimeLimit_class : IEnumClass<ToolTimeLimit_class>, IEnumClass Fields TOOLTIMELIMIT Declaration public static readonly ToolTimeLimit_class TOOLTIMELIMIT Field Value Type Description ToolTimeLimit_class Properties Members Declaration public static IList<ToolTimeLimit_class> Members { get; } Property Value Type Description IList < ToolTimeLimit_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static ToolTimeLimit_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description ToolTimeLimit_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.Utilities.html": {
    "href": "reference/CWLDotNet.Utilities.html",
    "title": "Class Utilities | Documentation",
    "keywords": "Class Utilities Inheritance System.Object Utilities Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public static class Utilities Methods Shortname(String) Declaration public static string Shortname(string inputId) Parameters Type Name Description System.String inputId Returns Type Description System.String"
  },
  "reference/CWLDotNet.ValidationException.html": {
    "href": "reference/CWLDotNet.ValidationException.html",
    "title": "Class ValidationException | Documentation",
    "keywords": "Class ValidationException Inheritance System.Object ValidationException Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class ValidationException : Exception Constructors ValidationException() Declaration public ValidationException() ValidationException(String) Declaration public ValidationException(string message) Parameters Type Name Description System.String message ValidationException(String, ValidationException) Declaration public ValidationException(string message, ValidationException child) Parameters Type Name Description System.String message ValidationException child ValidationException(String, List<ValidationException>) Declaration public ValidationException(string message, List<ValidationException> children) Parameters Type Name Description System.String message List < ValidationException > children Properties Message Declaration public override string Message { get; } Property Value Type Description System.String Methods ToString() Declaration public override string ToString() Returns Type Description System.String WithBullet(String) Declaration public ValidationException WithBullet(string bullet) Parameters Type Name Description System.String bullet Returns Type Description ValidationException"
  },
  "reference/CWLDotNet.Workflow.html": {
    "href": "reference/CWLDotNet.Workflow.html",
    "title": "Class Workflow | Documentation",
    "keywords": "Class Workflow Auto-generated class implementation for https://w3id.org/cwl/cwl#Workflow A workflow describes a set of steps and the dependencies between those steps. When a step produces output that will be consumed by a second step, the first step is a dependency of the second step. When there is a dependency, the workflow engine must execute the preceding step and wait for it to successfully produce output before executing the dependent step. If two steps are defined in the workflow graph that are not directly or indirectly dependent, these steps are independent , and may execute in any order or execute concurrently. A workflow is complete when all steps have been executed. Dependencies between parameters are expressed using the source field on workflow step input parameters and outputSource field on workflow output parameters . The source field on each workflow step input parameter expresses the data links that contribute to the value of the step input parameter (the \"sink\"). A workflow step can only begin execution when every data link connected to a step has been fulfilled. The outputSource field on each workflow step input parameter expresses the data links that contribute to the value of the workflow output parameter (the \"sink\"). Workflow execution cannot complete successfully until every data link connected to an output parameter has been fulfilled. Workflow success and failure A completed step must result in one of success , temporaryFailure or permanentFailure states. An implementation may choose to retry a step execution which resulted in temporaryFailure . An implementation may choose to either continue running other steps of a workflow, or terminate immediately upon permanentFailure . If any step of a workflow execution results in permanentFailure , then the workflow status is permanentFailure . If one or more steps result in temporaryFailure and all other steps complete success or are not executed, then the workflow status is temporaryFailure . If all workflow steps are executed and complete with success , then the workflow status is success . Extensions ScatterFeatureRequirement and SubworkflowFeatureRequirement are available as standard extensions to core workflow semantics. Inheritance System.Object Workflow Implements IWorkflow IProcess IIdentified ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class Workflow : IWorkflow, IProcess, IIdentified, ILabeled, IDocumented, ISavable Constructors Workflow(List<WorkflowInputParameter>, List<WorkflowOutputParameter>, OneOf<List<WorkflowStep>>, OneOf<None, String>, Workflow_class, OneOf<None, String>, OneOf<None, String, List<String>>, OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>>, OneOf<None, List<Object>>, OneOf<None, CWLVersion>, OneOf<None, List<String>>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public Workflow(List<WorkflowInputParameter> inputs, List<WorkflowOutputParameter> outputs, OneOf<List<WorkflowStep>> steps, OneOf<None, string> id = default(OneOf<None, string>), Workflow_class class_ = null, OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>> requirements = default(OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>>), OneOf<None, List<object>> hints = default(OneOf<None, List<object>>), OneOf<None, CWLVersion> cwlVersion = default(OneOf<None, CWLVersion>), OneOf<None, List<string>> intent = default(OneOf<None, List<string>>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < WorkflowInputParameter > inputs List < WorkflowOutputParameter > outputs OneOf.OneOf < List < WorkflowStep >> steps OneOf.OneOf < OneOf.Types.None , System.String > id Workflow_class class_ OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < InlineJavascriptRequirement , SchemaDefRequirement , LoadListingRequirement , DockerRequirement , SoftwareRequirement , InitialWorkDirRequirement , EnvVarRequirement , ShellCommandRequirement , ResourceRequirement , WorkReuse , NetworkAccess , InplaceUpdateRequirement , ToolTimeLimit , SubworkflowFeatureRequirement , ScatterFeatureRequirement , MultipleInputFeatureRequirement , StepInputExpressionRequirement >>> requirements OneOf.OneOf < OneOf.Types.None , List < System.Object >> hints OneOf.OneOf < OneOf.Types.None , CWLVersion > cwlVersion OneOf.OneOf < OneOf.Types.None , List < System.String >> intent LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Declaration public Workflow_class class_ { get; set; } Property Value Type Description Workflow_class cwlVersion CWL document version. Always required at the document root. Not required for a Process embedded inside another Process. Declaration public OneOf<None, CWLVersion> cwlVersion { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , CWLVersion > doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> hints Declares hints applying to either the runtime environment or the workflow engine that may be helpful in executing this process. It is not an error if an implementation cannot satisfy all hints, however the implementation may report a warning. Declaration public OneOf<None, List<object>> hints { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.Object >> id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > inputs Defines the input parameters of the process. The process is ready to run when all required input parameters are associated with concrete values. Input parameters include a schema for each parameter which is used to validate the input object. It may also be used to build a user interface for constructing the input object. When accepting an input object, all input parameters must have a value. If an input parameter is missing from the input object, it must be assigned a value of null (or the value of default for that parameter, if provided) for the purposes of validation and evaluation of expressions. Declaration public List<WorkflowInputParameter> inputs { get; set; } Property Value Type Description List < WorkflowInputParameter > intent An identifier for the type of computational operation, of this Process. Especially useful for \"class: Operation\", but can also be used for CommandLineTool, Workflow, or ExpressionTool. If provided, then this must be an IRI of a concept node that represents the type of operation, preferrably defined within an ontology. For example, in the domain of bioinformatics, one can use an IRI from the EDAM Ontology's Operation concept nodes , like Alignment , or Clustering ; or a more specific Operation concept like Split read mapping . Declaration public OneOf<None, List<string>> intent { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.String >> label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > outputs Defines the parameters representing the output of the process. May be used to generate and/or validate the output object. Declaration public List<WorkflowOutputParameter> outputs { get; set; } Property Value Type Description List < WorkflowOutputParameter > requirements Declares requirements that apply to either the runtime environment or the workflow engine that must be met in order to execute this process. If an implementation cannot satisfy all requirements, or a requirement is listed which is not recognized by the implementation, it is a fatal error and the implementation must not attempt to run the process, unless overridden at user option. Declaration public OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>> requirements { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < InlineJavascriptRequirement , SchemaDefRequirement , LoadListingRequirement , DockerRequirement , SoftwareRequirement , InitialWorkDirRequirement , EnvVarRequirement , ShellCommandRequirement , ResourceRequirement , WorkReuse , NetworkAccess , InplaceUpdateRequirement , ToolTimeLimit , SubworkflowFeatureRequirement , ScatterFeatureRequirement , MultipleInputFeatureRequirement , StepInputExpressionRequirement >>> steps The individual steps that make up the workflow. Each step is executed when all of its input data links are fufilled. An implementation may choose to execute the steps in a different order than listed and/or execute steps concurrently, provided that dependencies between steps are met. Declaration public OneOf<List<WorkflowStep>> steps { get; set; } Property Value Type Description OneOf.OneOf < List < WorkflowStep >> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IWorkflow IProcess IIdentified ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.Workflow_class.html": {
    "href": "reference/CWLDotNet.Workflow_class.html",
    "title": "Class Workflow_class | Documentation",
    "keywords": "Class Workflow_class Inheritance System.Object Workflow_class Implements IEnumClass < Workflow_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class Workflow_class : IEnumClass<Workflow_class>, IEnumClass Fields WORKFLOW Declaration public static readonly Workflow_class WORKFLOW Field Value Type Description Workflow_class Properties Members Declaration public static IList<Workflow_class> Members { get; } Property Value Type Description IList < Workflow_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static Workflow_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description Workflow_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  },
  "reference/CWLDotNet.WorkflowInputParameter.html": {
    "href": "reference/CWLDotNet.WorkflowInputParameter.html",
    "title": "Class WorkflowInputParameter | Documentation",
    "keywords": "Class WorkflowInputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkflowInputParameter Inheritance System.Object WorkflowInputParameter Implements IWorkflowInputParameter IInputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IInputFormat ILoadContents ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class WorkflowInputParameter : IWorkflowInputParameter, IInputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IInputFormat, ILoadContents, ISavable Constructors WorkflowInputParameter(OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, String, List<OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, String>>>, OneOf<None, String>, OneOf<None, String>, OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>, OneOf<None, Boolean>, OneOf<None, String, List<String>>, OneOf<None, String, List<String>>, OneOf<None, Boolean>, OneOf<None, LoadListingEnum>, OneOf<None, Object>, OneOf<None, InputBinding>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public WorkflowInputParameter(OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string, List<OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string>>> type, OneOf<None, string> id = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles = default(OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>), OneOf<None, bool> streamable = default(OneOf<None, bool>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, string, List<string>> format = default(OneOf<None, string, List<string>>), OneOf<None, bool> loadContents = default(OneOf<None, bool>), OneOf<None, LoadListingEnum> loadListing = default(OneOf<None, LoadListingEnum>), OneOf<None, object> default_ = default(OneOf<None, object>), OneOf<None, InputBinding> inputBinding = default(OneOf<None, InputBinding>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String , List < OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String >>> type OneOf.OneOf < OneOf.Types.None , System.String > id OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> secondaryFiles OneOf.OneOf < OneOf.Types.None , System.Boolean > streamable OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format OneOf.OneOf < OneOf.Types.None , System.Boolean > loadContents OneOf.OneOf < OneOf.Types.None , LoadListingEnum > loadListing OneOf.OneOf < OneOf.Types.None , System.Object > default_ OneOf.OneOf < OneOf.Types.None , InputBinding > inputBinding LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties default_ The default value to use for this parameter if the parameter is missing from the input object, or if the value of the parameter in the input object is null . Default values are applied before evaluating expressions (e.g. dependent valueFrom fields). Declaration public OneOf<None, object> default_ { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Object > doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format Only valid when type: File or is an array of items: File . This must be one or more IRIs of concept nodes that represents file formats which are allowed as input to this parameter, preferrably defined within an ontology. If no ontology is available, file formats may be tested by exact match. Declaration public OneOf<None, string, List<string>> format { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > inputBinding Deprecated. Preserved for v1.0 backwards compatibility. Will be removed in CWL v2.0. Use WorkflowInputParameter.loadContents instead. Declaration public OneOf<None, InputBinding> inputBinding { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , InputBinding > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > loadContents Only valid when type: File or is an array of items: File . If true, the file (or each file in the array) must be a UTF-8 text file 64 KiB or smaller, and the implementation must read the entire contents of the file (or file array) and place it in the contents field of the File object for use by expressions. If the size of the file is greater than 64 KiB, the implementation must raise a fatal error. Declaration public OneOf<None, bool> loadContents { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > loadListing Only valid when type: Directory or is an array of items: Directory . Specify the desired behavior for loading the listing field of a Directory object for use by expressions. The order of precedence for loadListing is: loadListing on an individual parameter Inherited from LoadListingRequirement By default: no_listing Declaration public OneOf<None, LoadListingEnum> loadListing { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , LoadListingEnum > secondaryFiles Only valid when type: File or is an array of items: File . Provides a pattern or expression specifying files or directories that should be included alongside the primary file. Secondary files may be required or optional. When not explicitly specified, secondary files specified for inputs are required and outputs are optional. An implementation must include matching Files and Directories in the secondaryFiles property of the primary file. These Files and Directories must be transferred and staged alongside the primary file. An implementation may fail workflow execution if a required secondary file does not exist. If the value is an expression, the value of self in the expression must be the primary input or output File object to which this binding applies. The basename , nameroot and nameext fields must be present in self . For CommandLineTool outputs the path field must also be present. The expression must return a filename string relative to the path to the primary File, a File or Directory object with either path or location and basename fields set, or an array consisting of strings or File or Directory objects. It is legal to reference an unchanged File or Directory object taken from input as a secondaryFile. The expression may return \"null\" in which case there is no secondaryFile from that expression. To work on non-filename-preserving storage systems, portable tool descriptions should avoid constructing new values from location , but should construct relative references using basename or nameroot instead. If a value in secondaryFiles is a string that is not an expression, it specifies that the following pattern should be applied to the path of the primary file to yield a filename relative to the primary File: If string ends with ? character, remove the last ? and mark the resulting secondary file as optional. If string begins with one or more caret ^ characters, for each caret, remove the last file extension from the path (the last period . and all following characters). If there are no file extensions, the path is unchanged. Append the remainder of the string to the end of the file path. Declaration public OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> streamable Only valid when type: File or is an array of items: File . A value of true indicates that the file is read or written sequentially without seeking. An implementation may use this flag to indicate whether it is valid to stream file contents using a named pipe. Default: false . Declaration public OneOf<None, bool> streamable { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > type Specify valid types of data that may be assigned to this parameter. Declaration public OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string, List<OneOf<CWLType, InputRecordSchema, InputEnumSchema, InputArraySchema, string>>> type { get; set; } Property Value Type Description OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String , List < OneOf.OneOf < CWLType , InputRecordSchema , InputEnumSchema , InputArraySchema , System.String >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IWorkflowInputParameter IInputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IInputFormat ILoadContents ISavable"
  },
  "reference/CWLDotNet.WorkflowOutputParameter.html": {
    "href": "reference/CWLDotNet.WorkflowOutputParameter.html",
    "title": "Class WorkflowOutputParameter | Documentation",
    "keywords": "Class WorkflowOutputParameter Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkflowOutputParameter Describe an output parameter of a workflow. The parameter must be connected to one or more parameters defined in the workflow that will provide the value of the output parameter. It is legal to connect a WorkflowInputParameter to a WorkflowOutputParameter. See WorkflowStepInput for discussion of linkMerge and pickValue . Inheritance System.Object WorkflowOutputParameter Implements IWorkflowOutputParameter IOutputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IOutputFormat ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class WorkflowOutputParameter : IWorkflowOutputParameter, IOutputParameter, IParameter, IFieldBase, ILabeled, IDocumented, IIdentified, IOutputFormat, ISavable Constructors WorkflowOutputParameter(OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, String, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, String>>>, OneOf<None, String>, OneOf<None, String>, OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>, OneOf<None, Boolean>, OneOf<None, String, List<String>>, OneOf<None, String>, OneOf<None, String, List<String>>, OneOf<None, LinkMergeMethod>, OneOf<None, PickValueMethod>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public WorkflowOutputParameter(OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string>>> type, OneOf<None, string> id = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles = default(OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>>), OneOf<None, bool> streamable = default(OneOf<None, bool>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, string> format = default(OneOf<None, string>), OneOf<None, string, List<string>> outputSource = default(OneOf<None, string, List<string>>), OneOf<None, LinkMergeMethod> linkMerge = default(OneOf<None, LinkMergeMethod>), OneOf<None, PickValueMethod> pickValue = default(OneOf<None, PickValueMethod>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String , List < OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String >>> type OneOf.OneOf < OneOf.Types.None , System.String > id OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> secondaryFiles OneOf.OneOf < OneOf.Types.None , System.Boolean > streamable OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , System.String > format OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> outputSource OneOf.OneOf < OneOf.Types.None , LinkMergeMethod > linkMerge OneOf.OneOf < OneOf.Types.None , PickValueMethod > pickValue LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> format Only valid when type: File or is an array of items: File . This is the file format that will be assigned to the output File object. Declaration public OneOf<None, string> format { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > linkMerge The method to use to merge multiple sources into a single array. If not specified, the default method is \"merge_nested\". Declaration public OneOf<None, LinkMergeMethod> linkMerge { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , LinkMergeMethod > outputSource Specifies one or more names of an output from a workflow step (in the form step_name/output_name with a / separator`), or a workflow input name, that supply their value(s) to the output parameter. the output parameter. It is valid to reference workflow level inputs here. Declaration public OneOf<None, string, List<string>> outputSource { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> pickValue The method to use to choose non-null elements among multiple sources. Declaration public OneOf<None, PickValueMethod> pickValue { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , PickValueMethod > secondaryFiles Only valid when type: File or is an array of items: File . Provides a pattern or expression specifying files or directories that should be included alongside the primary file. Secondary files may be required or optional. When not explicitly specified, secondary files specified for inputs are required and outputs are optional. An implementation must include matching Files and Directories in the secondaryFiles property of the primary file. These Files and Directories must be transferred and staged alongside the primary file. An implementation may fail workflow execution if a required secondary file does not exist. If the value is an expression, the value of self in the expression must be the primary input or output File object to which this binding applies. The basename , nameroot and nameext fields must be present in self . For CommandLineTool outputs the path field must also be present. The expression must return a filename string relative to the path to the primary File, a File or Directory object with either path or location and basename fields set, or an array consisting of strings or File or Directory objects. It is legal to reference an unchanged File or Directory object taken from input as a secondaryFile. The expression may return \"null\" in which case there is no secondaryFile from that expression. To work on non-filename-preserving storage systems, portable tool descriptions should avoid constructing new values from location , but should construct relative references using basename or nameroot instead. If a value in secondaryFiles is a string that is not an expression, it specifies that the following pattern should be applied to the path of the primary file to yield a filename relative to the primary File: If string ends with ? character, remove the last ? and mark the resulting secondary file as optional. If string begins with one or more caret ^ characters, for each caret, remove the last file extension from the path (the last period . and all following characters). If there are no file extensions, the path is unchanged. Append the remainder of the string to the end of the file path. Declaration public OneOf<None, SecondaryFileSchema, List<SecondaryFileSchema>> secondaryFiles { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , SecondaryFileSchema , List < SecondaryFileSchema >> streamable Only valid when type: File or is an array of items: File . A value of true indicates that the file is read or written sequentially without seeking. An implementation may use this flag to indicate whether it is valid to stream file contents using a named pipe. Default: false . Declaration public OneOf<None, bool> streamable { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > type Specify valid types of data that may be assigned to this parameter. Declaration public OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string, List<OneOf<CWLType, OutputRecordSchema, OutputEnumSchema, OutputArraySchema, string>>> type { get; set; } Property Value Type Description OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String , List < OneOf.OneOf < CWLType , OutputRecordSchema , OutputEnumSchema , OutputArraySchema , System.String >>> Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IWorkflowOutputParameter IOutputParameter IParameter IFieldBase ILabeled IDocumented IIdentified IOutputFormat ISavable"
  },
  "reference/CWLDotNet.WorkflowStep.html": {
    "href": "reference/CWLDotNet.WorkflowStep.html",
    "title": "Class WorkflowStep | Documentation",
    "keywords": "Class WorkflowStep Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkflowStep A workflow step is an executable element of a workflow. It specifies the underlying process implementation (such as CommandLineTool or another Workflow ) in the run field and connects the input and output parameters of the underlying process to workflow parameters. Scatter/gather To use scatter/gather, ScatterFeatureRequirement must be specified in the workflow or workflow step requirements. A \"scatter\" operation specifies that the associated workflow step or subworkflow should execute separately over a list of input elements. Each job making up a scatter operation is independent and may be executed concurrently. The scatter field specifies one or more input parameters which will be scattered. An input parameter may be listed more than once. The declared type of each input parameter is implicitly becomes an array of items of the input parameter type. If a parameter is listed more than once, it becomes a nested array. As a result, upstream parameters which are connected to scattered parameters must be arrays. All output parameter types are also implicitly wrapped in arrays. Each job in the scatter results in an entry in the output array. If any scattered parameter runtime value is an empty array, all outputs are set to empty arrays and no work is done for the step, according to applicable scattering rules. If scatter declares more than one input parameter, scatterMethod describes how to decompose the input into a discrete set of jobs. dotproduct specifies that each of the input arrays are aligned and one element taken from each array to construct each job. It is an error if all input arrays are not the same length. nested_crossproduct specifies the Cartesian product of the inputs, producing a job for every combination of the scattered inputs. The output must be nested arrays for each level of scattering, in the order that the input arrays are listed in the scatter field. flat_crossproduct specifies the Cartesian product of the inputs, producing a job for every combination of the scattered inputs. The output arrays must be flattened to a single level, but otherwise listed in the order that the input arrays are listed in the scatter field. Conditional execution (Optional) Conditional execution makes execution of a step conditional on an expression. A step that is not executed is \"skipped\". A skipped step produces null for all output parameters. The condition is evaluated after scatter , using the input object of each individual scatter job. This means over a set of scatter jobs, some may be executed and some may be skipped. When the results are gathered, skipped steps must be null in the output arrays. The when field controls conditional execution. This is an expression that must be evaluated with inputs bound to the step input object (or individual scatter job), and returns a boolean value. It is an error if this expression returns a value other than true or false . Conditionals in CWL are an optional feature and are not required to be implemented by all consumers of CWL documents. An implementation that does not support conditionals must return a fatal error when attempting execute a workflow that uses conditional constructs the implementation does not support. Subworkflows To specify a nested workflow as part of a workflow step, SubworkflowFeatureRequirement must be specified in the workflow or workflow step requirements. It is a fatal error if a workflow directly or indirectly invokes itself as a subworkflow (recursive workflows are not allowed). Inheritance System.Object WorkflowStep Implements IWorkflowStep IIdentified ILabeled IDocumented ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class WorkflowStep : IWorkflowStep, IIdentified, ILabeled, IDocumented, ISavable Constructors WorkflowStep(List<WorkflowStepInput>, OneOf<List<OneOf<String, WorkflowStepOutput>>>, OneOf<String, CommandLineTool, ExpressionTool, Workflow, Operation>, OneOf<None, String>, OneOf<None, String>, OneOf<None, String, List<String>>, OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>>, OneOf<None, List<Object>>, OneOf<None, String>, OneOf<None, String, List<String>>, OneOf<None, ScatterMethod>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public WorkflowStep(List<WorkflowStepInput> in_, OneOf<List<OneOf<string, WorkflowStepOutput>>> out_, OneOf<string, CommandLineTool, ExpressionTool, Workflow, Operation> run, OneOf<None, string> id = default(OneOf<None, string>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, string, List<string>> doc = default(OneOf<None, string, List<string>>), OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>> requirements = default(OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>>), OneOf<None, List<object>> hints = default(OneOf<None, List<object>>), OneOf<None, string> when = default(OneOf<None, string>), OneOf<None, string, List<string>> scatter = default(OneOf<None, string, List<string>>), OneOf<None, ScatterMethod> scatterMethod = default(OneOf<None, ScatterMethod>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description List < WorkflowStepInput > in_ OneOf.OneOf < List < OneOf.OneOf < System.String , WorkflowStepOutput >>> out_ OneOf.OneOf < System.String , CommandLineTool , ExpressionTool , Workflow , Operation > run OneOf.OneOf < OneOf.Types.None , System.String > id OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> doc OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < InlineJavascriptRequirement , SchemaDefRequirement , LoadListingRequirement , DockerRequirement , SoftwareRequirement , InitialWorkDirRequirement , EnvVarRequirement , ShellCommandRequirement , ResourceRequirement , WorkReuse , NetworkAccess , InplaceUpdateRequirement , ToolTimeLimit , SubworkflowFeatureRequirement , ScatterFeatureRequirement , MultipleInputFeatureRequirement , StepInputExpressionRequirement >>> requirements OneOf.OneOf < OneOf.Types.None , List < System.Object >> hints OneOf.OneOf < OneOf.Types.None , System.String > when OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> scatter OneOf.OneOf < OneOf.Types.None , ScatterMethod > scatterMethod LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties doc A documentation string for this object, or an array of strings which should be concatenated. Declaration public OneOf<None, string, List<string>> doc { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> hints Declares hints applying to either the runtime environment or the workflow engine that may be helpful in executing this workflow step. It is not an error if an implementation cannot satisfy all hints, however the implementation may report a warning. Declaration public OneOf<None, List<object>> hints { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < System.Object >> id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > in_ Defines the input parameters of the workflow step. The process is ready to run when all required input parameters are associated with concrete values. Input parameters include a schema for each parameter which is used to validate the input object. It may also be used build a user interface for constructing the input object. Declaration public List<WorkflowStepInput> in_ { get; set; } Property Value Type Description List < WorkflowStepInput > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > out_ Defines the parameters representing the output of the process. May be used to generate and/or validate the output object. Declaration public OneOf<List<OneOf<string, WorkflowStepOutput>>> out_ { get; set; } Property Value Type Description OneOf.OneOf < List < OneOf.OneOf < System.String , WorkflowStepOutput >>> requirements Declares requirements that apply to either the runtime environment or the workflow engine that must be met in order to execute this workflow step. If an implementation cannot satisfy all requirements, or a requirement is listed which is not recognized by the implementation, it is a fatal error and the implementation must not attempt to run the process, unless overridden at user option. Declaration public OneOf<None, List<OneOf<InlineJavascriptRequirement, SchemaDefRequirement, LoadListingRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement, WorkReuse, NetworkAccess, InplaceUpdateRequirement, ToolTimeLimit, SubworkflowFeatureRequirement, ScatterFeatureRequirement, MultipleInputFeatureRequirement, StepInputExpressionRequirement>>> requirements { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , List < OneOf.OneOf < InlineJavascriptRequirement , SchemaDefRequirement , LoadListingRequirement , DockerRequirement , SoftwareRequirement , InitialWorkDirRequirement , EnvVarRequirement , ShellCommandRequirement , ResourceRequirement , WorkReuse , NetworkAccess , InplaceUpdateRequirement , ToolTimeLimit , SubworkflowFeatureRequirement , ScatterFeatureRequirement , MultipleInputFeatureRequirement , StepInputExpressionRequirement >>> run Specifies the process to run. If run is a string, it must be an absolute IRI or a relative path from the primary document. Declaration public OneOf<string, CommandLineTool, ExpressionTool, Workflow, Operation> run { get; set; } Property Value Type Description OneOf.OneOf < System.String , CommandLineTool , ExpressionTool , Workflow , Operation > scatter Declaration public OneOf<None, string, List<string>> scatter { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> scatterMethod Required if scatter is an array of more than one element. Declaration public OneOf<None, ScatterMethod> scatterMethod { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , ScatterMethod > when If defined, only run the step when the expression evaluates to true . If false the step is skipped. A skipped step produces a null on each output. Declaration public OneOf<None, string> when { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IWorkflowStep IIdentified ILabeled IDocumented ISavable"
  },
  "reference/CWLDotNet.WorkflowStepInput.html": {
    "href": "reference/CWLDotNet.WorkflowStepInput.html",
    "title": "Class WorkflowStepInput | Documentation",
    "keywords": "Class WorkflowStepInput Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkflowStepInput The input of a workflow step connects an upstream parameter (from the workflow inputs, or the outputs of other workflows steps) with the input parameters of the process specified by the run field. Only input parameters declared by the target process will be passed through at runtime to the process though additonal parameters may be specified (for use within valueFrom expressions for instance) - unconnected or unused parameters do not represent an error condition. Input object A WorkflowStepInput object must contain an id field in the form #fieldname or #prefix/fieldname . When the id field contains a slash / the field name consists of the characters following the final slash (the prefix portion may contain one or more slashes to indicate scope). This defines a field of the workflow step input object with the value of the source parameter(s). Merging multiple inbound data links To merge multiple inbound data links, MultipleInputFeatureRequirement must be specified in the workflow or workflow step requirements. If the sink parameter is an array, or named in a workflow scatter operation, there may be multiple inbound data links listed in the source field. The values from the input links are merged depending on the method specified in the linkMerge field. If both linkMerge and pickValue are null or not specified, and there is more than one element in the source array, the default method is \"merge_nested\". If both linkMerge and pickValue are null or not specified, and there is only a single element in the source , then the input parameter takes the scalar value from the single input link (it is not wrapped in a single-list). merge_nested The input must be an array consisting of exactly one entry for each input link. If \"merge_nested\" is specified with a single link, the value from the link must be wrapped in a single-item list. merge_flattened The source and sink parameters must be compatible types, or the source type must be compatible with single element from the \"items\" type of the destination array parameter. Source parameters which are arrays are concatenated. Source parameters which are single element types are appended as single elements. Picking non-null values among inbound data links If present, pickValue specifies how to picking non-null values among inbound data links. pickValue is evaluated Once all source values from upstream step or parameters are available. After linkMerge . Before scatter or valueFrom . This is specifically intended to be useful in combination with conditional execution , where several upstream steps may be connected to a single input ( source is a list), and skipped steps produce null values. Static type checkers should check for type consistency after infering what the type will be after pickValue is applied, just as they do currently for linkMerge . first_non_null For the first level of a list input, pick the first non-null element. The result is a scalar. It is an error if there is no non-null element. Examples: [null, x, null, y] -> x [null, [null], null, y] -> [null] [null, null, null] -> Runtime Error Intended use case : If-else pattern where the value comes either from a conditional step or from a default or fallback value. The conditional step(s) should be placed first in the list. the_only_non_null For the first level of a list input, pick the single non-null element. The result is a scalar. It is an error if there is more than one non-null element. Examples: [null, x, null] -> x [null, x, null, y] -> Runtime Error [null, [null], null] -> [null] [null, null, null] -> Runtime Error Intended use case : Switch type patterns where developer considers more than one active code path as a workflow error (possibly indicating an error in writing when condition expressions). all_non_null For the first level of a list input, pick all non-null values. The result is a list, which may be empty. Examples: [null, x, null] -> [x] [x, null, y] -> [x, y] [null, [x], [null]] -> [[x], [null]] [null, null, null] -> [] Intended use case : It is valid to have more than one source, but sources are conditional, so null sources (from skipped steps) should be filtered out. Inheritance System.Object WorkflowStepInput Implements IWorkflowStepInput IIdentified ISink ILoadContents ILabeled ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class WorkflowStepInput : IWorkflowStepInput, IIdentified, ISink, ILoadContents, ILabeled, ISavable Constructors WorkflowStepInput(OneOf<None, String>, OneOf<None, String, List<String>>, OneOf<None, LinkMergeMethod>, OneOf<None, PickValueMethod>, OneOf<None, Boolean>, OneOf<None, LoadListingEnum>, OneOf<None, String>, OneOf<None, Object>, OneOf<None, String>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public WorkflowStepInput(OneOf<None, string> id = default(OneOf<None, string>), OneOf<None, string, List<string>> source = default(OneOf<None, string, List<string>>), OneOf<None, LinkMergeMethod> linkMerge = default(OneOf<None, LinkMergeMethod>), OneOf<None, PickValueMethod> pickValue = default(OneOf<None, PickValueMethod>), OneOf<None, bool> loadContents = default(OneOf<None, bool>), OneOf<None, LoadListingEnum> loadListing = default(OneOf<None, LoadListingEnum>), OneOf<None, string> label = default(OneOf<None, string>), OneOf<None, object> default_ = default(OneOf<None, object>), OneOf<None, string> valueFrom = default(OneOf<None, string>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < OneOf.Types.None , System.String > id OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> source OneOf.OneOf < OneOf.Types.None , LinkMergeMethod > linkMerge OneOf.OneOf < OneOf.Types.None , PickValueMethod > pickValue OneOf.OneOf < OneOf.Types.None , System.Boolean > loadContents OneOf.OneOf < OneOf.Types.None , LoadListingEnum > loadListing OneOf.OneOf < OneOf.Types.None , System.String > label OneOf.OneOf < OneOf.Types.None , System.Object > default_ OneOf.OneOf < OneOf.Types.None , System.String > valueFrom LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties default_ The default value for this parameter to use if either there is no source field, or the value produced by the source is null . The default must be applied prior to scattering or evaluating valueFrom . Declaration public OneOf<None, object> default_ { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Object > id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > label A short, human-readable label of this object. Declaration public OneOf<None, string> label { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > linkMerge The method to use to merge multiple inbound links into a single array. If not specified, the default method is \"merge_nested\". Declaration public OneOf<None, LinkMergeMethod> linkMerge { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , LinkMergeMethod > loadContents Only valid when type: File or is an array of items: File . If true, the file (or each file in the array) must be a UTF-8 text file 64 KiB or smaller, and the implementation must read the entire contents of the file (or file array) and place it in the contents field of the File object for use by expressions. If the size of the file is greater than 64 KiB, the implementation must raise a fatal error. Declaration public OneOf<None, bool> loadContents { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.Boolean > loadListing Only valid when type: Directory or is an array of items: Directory . Specify the desired behavior for loading the listing field of a Directory object for use by expressions. The order of precedence for loadListing is: loadListing on an individual parameter Inherited from LoadListingRequirement By default: no_listing Declaration public OneOf<None, LoadListingEnum> loadListing { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , LoadListingEnum > pickValue The method to use to choose non-null elements among multiple sources. Declaration public OneOf<None, PickValueMethod> pickValue { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , PickValueMethod > source Specifies one or more workflow parameters that will provide input to the underlying step parameter. Declaration public OneOf<None, string, List<string>> source { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String , List < System.String >> valueFrom To use valueFrom, StepInputExpressionRequirement must be specified in the workflow or workflow step requirements. If valueFrom is a constant string value, use this as the value for this input parameter. If valueFrom is a parameter reference or expression, it must be evaluated to yield the actual value to be assiged to the input field. The self value in the parameter reference or expression must be null if there is no source field the value of the parameter(s) specified in the source field when this workflow input parameter is not specified in this workflow step's scatter field. an element of the parameter specified in the source field when this workflow input parameter is specified in this workflow step's scatter field. The value of inputs in the parameter reference or expression must be the input object to the workflow step after assigning the source values, applying default , and then scattering. The order of evaluating valueFrom among step input parameters is undefined and the result of evaluating valueFrom on a parameter must not be visible to evaluation of valueFrom on other parameters. Declaration public OneOf<None, string> valueFrom { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IWorkflowStepInput IIdentified ISink ILoadContents ILabeled ISavable"
  },
  "reference/CWLDotNet.WorkflowStepOutput.html": {
    "href": "reference/CWLDotNet.WorkflowStepOutput.html",
    "title": "Class WorkflowStepOutput | Documentation",
    "keywords": "Class WorkflowStepOutput Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkflowStepOutput Associate an output parameter of the underlying process with a workflow parameter. The workflow parameter (given in the id field) be may be used as a source to connect with input parameters of other workflow steps, or with an output parameter of the process. A unique identifier for this workflow output parameter. This is the identifier to use in the source field of WorkflowStepInput to connect the output value to downstream parameters. Inheritance System.Object WorkflowStepOutput Implements IWorkflowStepOutput IIdentified ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class WorkflowStepOutput : IWorkflowStepOutput, IIdentified, ISavable Constructors WorkflowStepOutput(OneOf<None, String>, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public WorkflowStepOutput(OneOf<None, string> id = default(OneOf<None, string>), LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < OneOf.Types.None , System.String > id LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties id The unique identifier for this object. Declaration public OneOf<None, string> id { get; set; } Property Value Type Description OneOf.OneOf < OneOf.Types.None , System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IWorkflowStepOutput IIdentified ISavable"
  },
  "reference/CWLDotNet.WorkReuse.html": {
    "href": "reference/CWLDotNet.WorkReuse.html",
    "title": "Class WorkReuse | Documentation",
    "keywords": "Class WorkReuse Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkReuse For implementations that support reusing output from past work (on the assumption that same code and same input produce same results), control whether to enable or disable the reuse behavior for a particular tool or step (to accomodate situations where that assumption is incorrect). A reused step is not executed but instead returns the same output as the original execution. If WorkReuse is not specified, correct tools should assume it is enabled by default. Inheritance System.Object WorkReuse Implements IWorkReuse IProcessRequirement ISavable Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class WorkReuse : IWorkReuse, IProcessRequirement, ISavable Constructors WorkReuse(OneOf<Boolean, String>, WorkReuse_class, LoadingOptions, Nullable<Dictionary<Object, Object>>) Declaration public WorkReuse(OneOf<bool, string> enableReuse, WorkReuse_class class_ = null, LoadingOptions loadingOptions = null, Dictionary<object, object>? extensionFields = null) Parameters Type Name Description OneOf.OneOf < System.Boolean , System.String > enableReuse WorkReuse_class class_ LoadingOptions loadingOptions System.Nullable < Dictionary < System.Object , System.Object >> extensionFields Properties class_ Always 'WorkReuse' Declaration public WorkReuse_class class_ { get; set; } Property Value Type Description WorkReuse_class enableReuse Declaration public OneOf<bool, string> enableReuse { get; set; } Property Value Type Description OneOf.OneOf < System.Boolean , System.String > Methods FromDoc(Object, String, LoadingOptions, String) Declaration public static ISavable FromDoc(object doc__, string baseUri, LoadingOptions loadingOptions, string docRoot = null) Parameters Type Name Description System.Object doc__ System.String baseUri LoadingOptions loadingOptions System.String docRoot Returns Type Description ISavable Save(Boolean, String, Boolean) Declaration public Dictionary<object, object> Save(bool top = false, string baseUrl = \"\", bool relativeUris = true) Parameters Type Name Description System.Boolean top System.String baseUrl System.Boolean relativeUris Returns Type Description Dictionary < System.Object , System.Object > Implements IWorkReuse IProcessRequirement ISavable"
  },
  "reference/CWLDotNet.WorkReuse_class.html": {
    "href": "reference/CWLDotNet.WorkReuse_class.html",
    "title": "Class WorkReuse_class | Documentation",
    "keywords": "Class WorkReuse_class Inheritance System.Object WorkReuse_class Implements IEnumClass < WorkReuse_class > IEnumClass Namespace : CWLDotNet Assembly : CWLDotNet.dll Syntax public class WorkReuse_class : IEnumClass<WorkReuse_class>, IEnumClass Fields WORKREUSE Declaration public static readonly WorkReuse_class WORKREUSE Field Value Type Description WorkReuse_class Properties Members Declaration public static IList<WorkReuse_class> Members { get; } Property Value Type Description IList < WorkReuse_class > Name Declaration public string Name { get; } Property Value Type Description System.String Methods Contains(String) Declaration public static bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Parse(String) Declaration public static WorkReuse_class Parse(string toParse) Parameters Type Name Description System.String toParse Returns Type Description WorkReuse_class Symbols() Declaration public static List<string> Symbols() Returns Type Description List < System.String > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IEnumClass<T> IEnumClass"
  }
}